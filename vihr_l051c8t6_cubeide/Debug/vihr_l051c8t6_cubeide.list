
vihr_l051c8t6_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009204  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f98  080092c4  080092c4  000192c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a25c  0800a25c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a25c  0800a25c  0001a25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a264  0800a264  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a264  0800a264  0001a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a26c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  20000098  0800a300  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  0800a300  00020824  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a570  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003977  00000000  00000000  0003a62c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001260  00000000  00000000  0003dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001070  00000000  00000000  0003f208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015481  00000000  00000000  00040278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013429  00000000  00000000  000556f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000788f6  00000000  00000000  00068b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e1418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000449c  00000000  00000000  000e1494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080092ac 	.word	0x080092ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	080092ac 	.word	0x080092ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c10      	adds	r0, r2, #0
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	1c19      	adds	r1, r3, #0
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f000 fff1 	bl	8001228 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 ff49 	bl	80010e8 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 ffe3 	bl	8001228 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 ffd9 	bl	8001228 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 ff6b 	bl	8001160 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 ff61 	bl	8001160 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__aeabi_uldivmod>:
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d111      	bne.n	80002d4 <__aeabi_uldivmod+0x28>
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	d10f      	bne.n	80002d4 <__aeabi_uldivmod+0x28>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	d100      	bne.n	80002ba <__aeabi_uldivmod+0xe>
 80002b8:	2800      	cmp	r0, #0
 80002ba:	d002      	beq.n	80002c2 <__aeabi_uldivmod+0x16>
 80002bc:	2100      	movs	r1, #0
 80002be:	43c9      	mvns	r1, r1
 80002c0:	1c08      	adds	r0, r1, #0
 80002c2:	b407      	push	{r0, r1, r2}
 80002c4:	4802      	ldr	r0, [pc, #8]	; (80002d0 <__aeabi_uldivmod+0x24>)
 80002c6:	a102      	add	r1, pc, #8	; (adr r1, 80002d0 <__aeabi_uldivmod+0x24>)
 80002c8:	1840      	adds	r0, r0, r1
 80002ca:	9002      	str	r0, [sp, #8]
 80002cc:	bd03      	pop	{r0, r1, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	ffffff5d 	.word	0xffffff5d
 80002d4:	b403      	push	{r0, r1}
 80002d6:	4668      	mov	r0, sp
 80002d8:	b501      	push	{r0, lr}
 80002da:	9802      	ldr	r0, [sp, #8]
 80002dc:	f000 f824 	bl	8000328 <__udivmoddi4>
 80002e0:	9b01      	ldr	r3, [sp, #4]
 80002e2:	469e      	mov	lr, r3
 80002e4:	b002      	add	sp, #8
 80002e6:	bc0c      	pop	{r2, r3}
 80002e8:	4770      	bx	lr
 80002ea:	46c0      	nop			; (mov r8, r8)

080002ec <__aeabi_d2uiz>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	2200      	movs	r2, #0
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <__aeabi_d2uiz+0x38>)
 80002f2:	0004      	movs	r4, r0
 80002f4:	000d      	movs	r5, r1
 80002f6:	f7ff ffcf 	bl	8000298 <__aeabi_dcmpge>
 80002fa:	2800      	cmp	r0, #0
 80002fc:	d104      	bne.n	8000308 <__aeabi_d2uiz+0x1c>
 80002fe:	0020      	movs	r0, r4
 8000300:	0029      	movs	r1, r5
 8000302:	f001 fdb3 	bl	8001e6c <__aeabi_d2iz>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <__aeabi_d2uiz+0x38>)
 800030a:	2200      	movs	r2, #0
 800030c:	0020      	movs	r0, r4
 800030e:	0029      	movs	r1, r5
 8000310:	f001 fa64 	bl	80017dc <__aeabi_dsub>
 8000314:	f001 fdaa 	bl	8001e6c <__aeabi_d2iz>
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	061b      	lsls	r3, r3, #24
 800031c:	469c      	mov	ip, r3
 800031e:	4460      	add	r0, ip
 8000320:	e7f1      	b.n	8000306 <__aeabi_d2uiz+0x1a>
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	41e00000 	.word	0x41e00000

08000328 <__udivmoddi4>:
 8000328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800032a:	464f      	mov	r7, r9
 800032c:	4646      	mov	r6, r8
 800032e:	46d6      	mov	lr, sl
 8000330:	b5c0      	push	{r6, r7, lr}
 8000332:	0004      	movs	r4, r0
 8000334:	b082      	sub	sp, #8
 8000336:	000d      	movs	r5, r1
 8000338:	4691      	mov	r9, r2
 800033a:	4698      	mov	r8, r3
 800033c:	428b      	cmp	r3, r1
 800033e:	d82f      	bhi.n	80003a0 <__udivmoddi4+0x78>
 8000340:	d02c      	beq.n	800039c <__udivmoddi4+0x74>
 8000342:	4641      	mov	r1, r8
 8000344:	4648      	mov	r0, r9
 8000346:	f001 fe51 	bl	8001fec <__clzdi2>
 800034a:	0029      	movs	r1, r5
 800034c:	0006      	movs	r6, r0
 800034e:	0020      	movs	r0, r4
 8000350:	f001 fe4c 	bl	8001fec <__clzdi2>
 8000354:	1a33      	subs	r3, r6, r0
 8000356:	469c      	mov	ip, r3
 8000358:	3b20      	subs	r3, #32
 800035a:	469a      	mov	sl, r3
 800035c:	d500      	bpl.n	8000360 <__udivmoddi4+0x38>
 800035e:	e076      	b.n	800044e <__udivmoddi4+0x126>
 8000360:	464b      	mov	r3, r9
 8000362:	4652      	mov	r2, sl
 8000364:	4093      	lsls	r3, r2
 8000366:	001f      	movs	r7, r3
 8000368:	464b      	mov	r3, r9
 800036a:	4662      	mov	r2, ip
 800036c:	4093      	lsls	r3, r2
 800036e:	001e      	movs	r6, r3
 8000370:	42af      	cmp	r7, r5
 8000372:	d828      	bhi.n	80003c6 <__udivmoddi4+0x9e>
 8000374:	d025      	beq.n	80003c2 <__udivmoddi4+0x9a>
 8000376:	4653      	mov	r3, sl
 8000378:	1ba4      	subs	r4, r4, r6
 800037a:	41bd      	sbcs	r5, r7
 800037c:	2b00      	cmp	r3, #0
 800037e:	da00      	bge.n	8000382 <__udivmoddi4+0x5a>
 8000380:	e07b      	b.n	800047a <__udivmoddi4+0x152>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2301      	movs	r3, #1
 800038c:	4652      	mov	r2, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	4662      	mov	r2, ip
 8000396:	4093      	lsls	r3, r2
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	e018      	b.n	80003ce <__udivmoddi4+0xa6>
 800039c:	4282      	cmp	r2, r0
 800039e:	d9d0      	bls.n	8000342 <__udivmoddi4+0x1a>
 80003a0:	2200      	movs	r2, #0
 80003a2:	2300      	movs	r3, #0
 80003a4:	9200      	str	r2, [sp, #0]
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <__udivmoddi4+0x8a>
 80003ae:	601c      	str	r4, [r3, #0]
 80003b0:	605d      	str	r5, [r3, #4]
 80003b2:	9800      	ldr	r0, [sp, #0]
 80003b4:	9901      	ldr	r1, [sp, #4]
 80003b6:	b002      	add	sp, #8
 80003b8:	bc1c      	pop	{r2, r3, r4}
 80003ba:	4690      	mov	r8, r2
 80003bc:	4699      	mov	r9, r3
 80003be:	46a2      	mov	sl, r4
 80003c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d9d7      	bls.n	8000376 <__udivmoddi4+0x4e>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2300      	movs	r3, #0
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	4663      	mov	r3, ip
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0e9      	beq.n	80003a8 <__udivmoddi4+0x80>
 80003d4:	07fb      	lsls	r3, r7, #31
 80003d6:	4698      	mov	r8, r3
 80003d8:	4641      	mov	r1, r8
 80003da:	0872      	lsrs	r2, r6, #1
 80003dc:	430a      	orrs	r2, r1
 80003de:	087b      	lsrs	r3, r7, #1
 80003e0:	4666      	mov	r6, ip
 80003e2:	e00e      	b.n	8000402 <__udivmoddi4+0xda>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d101      	bne.n	80003ec <__udivmoddi4+0xc4>
 80003e8:	42a2      	cmp	r2, r4
 80003ea:	d80c      	bhi.n	8000406 <__udivmoddi4+0xde>
 80003ec:	1aa4      	subs	r4, r4, r2
 80003ee:	419d      	sbcs	r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	1924      	adds	r4, r4, r4
 80003f4:	416d      	adcs	r5, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	3e01      	subs	r6, #1
 80003fa:	1824      	adds	r4, r4, r0
 80003fc:	414d      	adcs	r5, r1
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d006      	beq.n	8000410 <__udivmoddi4+0xe8>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d9ee      	bls.n	80003e4 <__udivmoddi4+0xbc>
 8000406:	3e01      	subs	r6, #1
 8000408:	1924      	adds	r4, r4, r4
 800040a:	416d      	adcs	r5, r5
 800040c:	2e00      	cmp	r6, #0
 800040e:	d1f8      	bne.n	8000402 <__udivmoddi4+0xda>
 8000410:	9800      	ldr	r0, [sp, #0]
 8000412:	9901      	ldr	r1, [sp, #4]
 8000414:	4653      	mov	r3, sl
 8000416:	1900      	adds	r0, r0, r4
 8000418:	4169      	adcs	r1, r5
 800041a:	2b00      	cmp	r3, #0
 800041c:	db23      	blt.n	8000466 <__udivmoddi4+0x13e>
 800041e:	002b      	movs	r3, r5
 8000420:	4652      	mov	r2, sl
 8000422:	40d3      	lsrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4664      	mov	r4, ip
 8000428:	40e2      	lsrs	r2, r4
 800042a:	001c      	movs	r4, r3
 800042c:	4653      	mov	r3, sl
 800042e:	0015      	movs	r5, r2
 8000430:	2b00      	cmp	r3, #0
 8000432:	db2d      	blt.n	8000490 <__udivmoddi4+0x168>
 8000434:	0026      	movs	r6, r4
 8000436:	4657      	mov	r7, sl
 8000438:	40be      	lsls	r6, r7
 800043a:	0033      	movs	r3, r6
 800043c:	0026      	movs	r6, r4
 800043e:	4667      	mov	r7, ip
 8000440:	40be      	lsls	r6, r7
 8000442:	0032      	movs	r2, r6
 8000444:	1a80      	subs	r0, r0, r2
 8000446:	4199      	sbcs	r1, r3
 8000448:	9000      	str	r0, [sp, #0]
 800044a:	9101      	str	r1, [sp, #4]
 800044c:	e7ac      	b.n	80003a8 <__udivmoddi4+0x80>
 800044e:	4662      	mov	r2, ip
 8000450:	2320      	movs	r3, #32
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	464a      	mov	r2, r9
 8000456:	40da      	lsrs	r2, r3
 8000458:	4661      	mov	r1, ip
 800045a:	0013      	movs	r3, r2
 800045c:	4642      	mov	r2, r8
 800045e:	408a      	lsls	r2, r1
 8000460:	0017      	movs	r7, r2
 8000462:	431f      	orrs	r7, r3
 8000464:	e780      	b.n	8000368 <__udivmoddi4+0x40>
 8000466:	4662      	mov	r2, ip
 8000468:	2320      	movs	r3, #32
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	002a      	movs	r2, r5
 800046e:	4666      	mov	r6, ip
 8000470:	409a      	lsls	r2, r3
 8000472:	0023      	movs	r3, r4
 8000474:	40f3      	lsrs	r3, r6
 8000476:	4313      	orrs	r3, r2
 8000478:	e7d4      	b.n	8000424 <__udivmoddi4+0xfc>
 800047a:	4662      	mov	r2, ip
 800047c:	2320      	movs	r3, #32
 800047e:	2100      	movs	r1, #0
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	2200      	movs	r2, #0
 8000484:	9100      	str	r1, [sp, #0]
 8000486:	9201      	str	r2, [sp, #4]
 8000488:	2201      	movs	r2, #1
 800048a:	40da      	lsrs	r2, r3
 800048c:	9201      	str	r2, [sp, #4]
 800048e:	e780      	b.n	8000392 <__udivmoddi4+0x6a>
 8000490:	2320      	movs	r3, #32
 8000492:	4662      	mov	r2, ip
 8000494:	0026      	movs	r6, r4
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	40de      	lsrs	r6, r3
 800049a:	002f      	movs	r7, r5
 800049c:	46b0      	mov	r8, r6
 800049e:	4666      	mov	r6, ip
 80004a0:	40b7      	lsls	r7, r6
 80004a2:	4646      	mov	r6, r8
 80004a4:	003b      	movs	r3, r7
 80004a6:	4333      	orrs	r3, r6
 80004a8:	e7c8      	b.n	800043c <__udivmoddi4+0x114>
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_dadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	464f      	mov	r7, r9
 80004b0:	4646      	mov	r6, r8
 80004b2:	46d6      	mov	lr, sl
 80004b4:	000c      	movs	r4, r1
 80004b6:	0309      	lsls	r1, r1, #12
 80004b8:	b5c0      	push	{r6, r7, lr}
 80004ba:	0a49      	lsrs	r1, r1, #9
 80004bc:	0f47      	lsrs	r7, r0, #29
 80004be:	005e      	lsls	r6, r3, #1
 80004c0:	4339      	orrs	r1, r7
 80004c2:	031f      	lsls	r7, r3, #12
 80004c4:	0fdb      	lsrs	r3, r3, #31
 80004c6:	469c      	mov	ip, r3
 80004c8:	0065      	lsls	r5, r4, #1
 80004ca:	0a7b      	lsrs	r3, r7, #9
 80004cc:	0f57      	lsrs	r7, r2, #29
 80004ce:	431f      	orrs	r7, r3
 80004d0:	0d6d      	lsrs	r5, r5, #21
 80004d2:	0fe4      	lsrs	r4, r4, #31
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	46a1      	mov	r9, r4
 80004d8:	00c0      	lsls	r0, r0, #3
 80004da:	46b8      	mov	r8, r7
 80004dc:	00d2      	lsls	r2, r2, #3
 80004de:	1bab      	subs	r3, r5, r6
 80004e0:	4564      	cmp	r4, ip
 80004e2:	d07b      	beq.n	80005dc <__aeabi_dadd+0x130>
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dd5f      	ble.n	80005a8 <__aeabi_dadd+0xfc>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d000      	beq.n	80004ee <__aeabi_dadd+0x42>
 80004ec:	e0a4      	b.n	8000638 <__aeabi_dadd+0x18c>
 80004ee:	003e      	movs	r6, r7
 80004f0:	4316      	orrs	r6, r2
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x4a>
 80004f4:	e112      	b.n	800071c <__aeabi_dadd+0x270>
 80004f6:	1e5e      	subs	r6, r3, #1
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d000      	beq.n	80004fe <__aeabi_dadd+0x52>
 80004fc:	e19e      	b.n	800083c <__aeabi_dadd+0x390>
 80004fe:	1a87      	subs	r7, r0, r2
 8000500:	4643      	mov	r3, r8
 8000502:	42b8      	cmp	r0, r7
 8000504:	4180      	sbcs	r0, r0
 8000506:	2501      	movs	r5, #1
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	4240      	negs	r0, r0
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	020b      	lsls	r3, r1, #8
 8000510:	d400      	bmi.n	8000514 <__aeabi_dadd+0x68>
 8000512:	e131      	b.n	8000778 <__aeabi_dadd+0x2cc>
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	0a4e      	lsrs	r6, r1, #9
 8000518:	2e00      	cmp	r6, #0
 800051a:	d100      	bne.n	800051e <__aeabi_dadd+0x72>
 800051c:	e16e      	b.n	80007fc <__aeabi_dadd+0x350>
 800051e:	0030      	movs	r0, r6
 8000520:	f001 fd46 	bl	8001fb0 <__clzsi2>
 8000524:	0003      	movs	r3, r0
 8000526:	3b08      	subs	r3, #8
 8000528:	2b1f      	cmp	r3, #31
 800052a:	dd00      	ble.n	800052e <__aeabi_dadd+0x82>
 800052c:	e161      	b.n	80007f2 <__aeabi_dadd+0x346>
 800052e:	2220      	movs	r2, #32
 8000530:	0039      	movs	r1, r7
 8000532:	1ad2      	subs	r2, r2, r3
 8000534:	409e      	lsls	r6, r3
 8000536:	40d1      	lsrs	r1, r2
 8000538:	409f      	lsls	r7, r3
 800053a:	430e      	orrs	r6, r1
 800053c:	429d      	cmp	r5, r3
 800053e:	dd00      	ble.n	8000542 <__aeabi_dadd+0x96>
 8000540:	e151      	b.n	80007e6 <__aeabi_dadd+0x33a>
 8000542:	1b5d      	subs	r5, r3, r5
 8000544:	1c6b      	adds	r3, r5, #1
 8000546:	2b1f      	cmp	r3, #31
 8000548:	dd00      	ble.n	800054c <__aeabi_dadd+0xa0>
 800054a:	e17c      	b.n	8000846 <__aeabi_dadd+0x39a>
 800054c:	2120      	movs	r1, #32
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	003d      	movs	r5, r7
 8000552:	0030      	movs	r0, r6
 8000554:	408f      	lsls	r7, r1
 8000556:	4088      	lsls	r0, r1
 8000558:	40dd      	lsrs	r5, r3
 800055a:	1e79      	subs	r1, r7, #1
 800055c:	418f      	sbcs	r7, r1
 800055e:	0031      	movs	r1, r6
 8000560:	2207      	movs	r2, #7
 8000562:	4328      	orrs	r0, r5
 8000564:	40d9      	lsrs	r1, r3
 8000566:	2500      	movs	r5, #0
 8000568:	4307      	orrs	r7, r0
 800056a:	403a      	ands	r2, r7
 800056c:	2a00      	cmp	r2, #0
 800056e:	d009      	beq.n	8000584 <__aeabi_dadd+0xd8>
 8000570:	230f      	movs	r3, #15
 8000572:	403b      	ands	r3, r7
 8000574:	2b04      	cmp	r3, #4
 8000576:	d005      	beq.n	8000584 <__aeabi_dadd+0xd8>
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	42bb      	cmp	r3, r7
 800057c:	41bf      	sbcs	r7, r7
 800057e:	427f      	negs	r7, r7
 8000580:	19c9      	adds	r1, r1, r7
 8000582:	001f      	movs	r7, r3
 8000584:	020b      	lsls	r3, r1, #8
 8000586:	d400      	bmi.n	800058a <__aeabi_dadd+0xde>
 8000588:	e226      	b.n	80009d8 <__aeabi_dadd+0x52c>
 800058a:	1c6a      	adds	r2, r5, #1
 800058c:	4bc6      	ldr	r3, [pc, #792]	; (80008a8 <__aeabi_dadd+0x3fc>)
 800058e:	0555      	lsls	r5, r2, #21
 8000590:	0d6d      	lsrs	r5, r5, #21
 8000592:	429a      	cmp	r2, r3
 8000594:	d100      	bne.n	8000598 <__aeabi_dadd+0xec>
 8000596:	e106      	b.n	80007a6 <__aeabi_dadd+0x2fa>
 8000598:	4ac4      	ldr	r2, [pc, #784]	; (80008ac <__aeabi_dadd+0x400>)
 800059a:	08ff      	lsrs	r7, r7, #3
 800059c:	400a      	ands	r2, r1
 800059e:	0753      	lsls	r3, r2, #29
 80005a0:	0252      	lsls	r2, r2, #9
 80005a2:	433b      	orrs	r3, r7
 80005a4:	0b12      	lsrs	r2, r2, #12
 80005a6:	e08e      	b.n	80006c6 <__aeabi_dadd+0x21a>
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x102>
 80005ac:	e0b8      	b.n	8000720 <__aeabi_dadd+0x274>
 80005ae:	1c6b      	adds	r3, r5, #1
 80005b0:	055b      	lsls	r3, r3, #21
 80005b2:	0d5b      	lsrs	r3, r3, #21
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	dc00      	bgt.n	80005ba <__aeabi_dadd+0x10e>
 80005b8:	e130      	b.n	800081c <__aeabi_dadd+0x370>
 80005ba:	1a87      	subs	r7, r0, r2
 80005bc:	4643      	mov	r3, r8
 80005be:	42b8      	cmp	r0, r7
 80005c0:	41b6      	sbcs	r6, r6
 80005c2:	1acb      	subs	r3, r1, r3
 80005c4:	4276      	negs	r6, r6
 80005c6:	1b9e      	subs	r6, r3, r6
 80005c8:	0233      	lsls	r3, r6, #8
 80005ca:	d500      	bpl.n	80005ce <__aeabi_dadd+0x122>
 80005cc:	e14c      	b.n	8000868 <__aeabi_dadd+0x3bc>
 80005ce:	003b      	movs	r3, r7
 80005d0:	4333      	orrs	r3, r6
 80005d2:	d1a1      	bne.n	8000518 <__aeabi_dadd+0x6c>
 80005d4:	2200      	movs	r2, #0
 80005d6:	2400      	movs	r4, #0
 80005d8:	2500      	movs	r5, #0
 80005da:	e070      	b.n	80006be <__aeabi_dadd+0x212>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	dc00      	bgt.n	80005e2 <__aeabi_dadd+0x136>
 80005e0:	e0e5      	b.n	80007ae <__aeabi_dadd+0x302>
 80005e2:	2e00      	cmp	r6, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_dadd+0x13c>
 80005e6:	e083      	b.n	80006f0 <__aeabi_dadd+0x244>
 80005e8:	4eaf      	ldr	r6, [pc, #700]	; (80008a8 <__aeabi_dadd+0x3fc>)
 80005ea:	42b5      	cmp	r5, r6
 80005ec:	d060      	beq.n	80006b0 <__aeabi_dadd+0x204>
 80005ee:	2680      	movs	r6, #128	; 0x80
 80005f0:	0436      	lsls	r6, r6, #16
 80005f2:	4337      	orrs	r7, r6
 80005f4:	46b8      	mov	r8, r7
 80005f6:	2b38      	cmp	r3, #56	; 0x38
 80005f8:	dc00      	bgt.n	80005fc <__aeabi_dadd+0x150>
 80005fa:	e13e      	b.n	800087a <__aeabi_dadd+0x3ce>
 80005fc:	4643      	mov	r3, r8
 80005fe:	4313      	orrs	r3, r2
 8000600:	001f      	movs	r7, r3
 8000602:	1e7a      	subs	r2, r7, #1
 8000604:	4197      	sbcs	r7, r2
 8000606:	183f      	adds	r7, r7, r0
 8000608:	4287      	cmp	r7, r0
 800060a:	4180      	sbcs	r0, r0
 800060c:	4240      	negs	r0, r0
 800060e:	1809      	adds	r1, r1, r0
 8000610:	020b      	lsls	r3, r1, #8
 8000612:	d400      	bmi.n	8000616 <__aeabi_dadd+0x16a>
 8000614:	e0b0      	b.n	8000778 <__aeabi_dadd+0x2cc>
 8000616:	4ba4      	ldr	r3, [pc, #656]	; (80008a8 <__aeabi_dadd+0x3fc>)
 8000618:	3501      	adds	r5, #1
 800061a:	429d      	cmp	r5, r3
 800061c:	d100      	bne.n	8000620 <__aeabi_dadd+0x174>
 800061e:	e0c3      	b.n	80007a8 <__aeabi_dadd+0x2fc>
 8000620:	4aa2      	ldr	r2, [pc, #648]	; (80008ac <__aeabi_dadd+0x400>)
 8000622:	087b      	lsrs	r3, r7, #1
 8000624:	400a      	ands	r2, r1
 8000626:	2101      	movs	r1, #1
 8000628:	400f      	ands	r7, r1
 800062a:	431f      	orrs	r7, r3
 800062c:	0851      	lsrs	r1, r2, #1
 800062e:	07d3      	lsls	r3, r2, #31
 8000630:	2207      	movs	r2, #7
 8000632:	431f      	orrs	r7, r3
 8000634:	403a      	ands	r2, r7
 8000636:	e799      	b.n	800056c <__aeabi_dadd+0xc0>
 8000638:	4e9b      	ldr	r6, [pc, #620]	; (80008a8 <__aeabi_dadd+0x3fc>)
 800063a:	42b5      	cmp	r5, r6
 800063c:	d038      	beq.n	80006b0 <__aeabi_dadd+0x204>
 800063e:	2680      	movs	r6, #128	; 0x80
 8000640:	0436      	lsls	r6, r6, #16
 8000642:	4337      	orrs	r7, r6
 8000644:	46b8      	mov	r8, r7
 8000646:	2b38      	cmp	r3, #56	; 0x38
 8000648:	dd00      	ble.n	800064c <__aeabi_dadd+0x1a0>
 800064a:	e0dc      	b.n	8000806 <__aeabi_dadd+0x35a>
 800064c:	2b1f      	cmp	r3, #31
 800064e:	dc00      	bgt.n	8000652 <__aeabi_dadd+0x1a6>
 8000650:	e130      	b.n	80008b4 <__aeabi_dadd+0x408>
 8000652:	001e      	movs	r6, r3
 8000654:	4647      	mov	r7, r8
 8000656:	3e20      	subs	r6, #32
 8000658:	40f7      	lsrs	r7, r6
 800065a:	46bc      	mov	ip, r7
 800065c:	2b20      	cmp	r3, #32
 800065e:	d004      	beq.n	800066a <__aeabi_dadd+0x1be>
 8000660:	2640      	movs	r6, #64	; 0x40
 8000662:	1af3      	subs	r3, r6, r3
 8000664:	4646      	mov	r6, r8
 8000666:	409e      	lsls	r6, r3
 8000668:	4332      	orrs	r2, r6
 800066a:	0017      	movs	r7, r2
 800066c:	4663      	mov	r3, ip
 800066e:	1e7a      	subs	r2, r7, #1
 8000670:	4197      	sbcs	r7, r2
 8000672:	431f      	orrs	r7, r3
 8000674:	e0cc      	b.n	8000810 <__aeabi_dadd+0x364>
 8000676:	2b00      	cmp	r3, #0
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x1d0>
 800067a:	e204      	b.n	8000a86 <__aeabi_dadd+0x5da>
 800067c:	4643      	mov	r3, r8
 800067e:	4313      	orrs	r3, r2
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x1d8>
 8000682:	e159      	b.n	8000938 <__aeabi_dadd+0x48c>
 8000684:	074b      	lsls	r3, r1, #29
 8000686:	08c0      	lsrs	r0, r0, #3
 8000688:	4318      	orrs	r0, r3
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	08c9      	lsrs	r1, r1, #3
 800068e:	031b      	lsls	r3, r3, #12
 8000690:	4219      	tst	r1, r3
 8000692:	d008      	beq.n	80006a6 <__aeabi_dadd+0x1fa>
 8000694:	4645      	mov	r5, r8
 8000696:	08ed      	lsrs	r5, r5, #3
 8000698:	421d      	tst	r5, r3
 800069a:	d104      	bne.n	80006a6 <__aeabi_dadd+0x1fa>
 800069c:	4643      	mov	r3, r8
 800069e:	08d0      	lsrs	r0, r2, #3
 80006a0:	0759      	lsls	r1, r3, #29
 80006a2:	4308      	orrs	r0, r1
 80006a4:	0029      	movs	r1, r5
 80006a6:	0f42      	lsrs	r2, r0, #29
 80006a8:	00c9      	lsls	r1, r1, #3
 80006aa:	4d7f      	ldr	r5, [pc, #508]	; (80008a8 <__aeabi_dadd+0x3fc>)
 80006ac:	4311      	orrs	r1, r2
 80006ae:	00c0      	lsls	r0, r0, #3
 80006b0:	074b      	lsls	r3, r1, #29
 80006b2:	08ca      	lsrs	r2, r1, #3
 80006b4:	497c      	ldr	r1, [pc, #496]	; (80008a8 <__aeabi_dadd+0x3fc>)
 80006b6:	08c0      	lsrs	r0, r0, #3
 80006b8:	4303      	orrs	r3, r0
 80006ba:	428d      	cmp	r5, r1
 80006bc:	d068      	beq.n	8000790 <__aeabi_dadd+0x2e4>
 80006be:	0312      	lsls	r2, r2, #12
 80006c0:	056d      	lsls	r5, r5, #21
 80006c2:	0b12      	lsrs	r2, r2, #12
 80006c4:	0d6d      	lsrs	r5, r5, #21
 80006c6:	2100      	movs	r1, #0
 80006c8:	0312      	lsls	r2, r2, #12
 80006ca:	0018      	movs	r0, r3
 80006cc:	0b13      	lsrs	r3, r2, #12
 80006ce:	0d0a      	lsrs	r2, r1, #20
 80006d0:	0512      	lsls	r2, r2, #20
 80006d2:	431a      	orrs	r2, r3
 80006d4:	4b76      	ldr	r3, [pc, #472]	; (80008b0 <__aeabi_dadd+0x404>)
 80006d6:	052d      	lsls	r5, r5, #20
 80006d8:	4013      	ands	r3, r2
 80006da:	432b      	orrs	r3, r5
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	07e4      	lsls	r4, r4, #31
 80006e0:	085b      	lsrs	r3, r3, #1
 80006e2:	4323      	orrs	r3, r4
 80006e4:	0019      	movs	r1, r3
 80006e6:	bc1c      	pop	{r2, r3, r4}
 80006e8:	4690      	mov	r8, r2
 80006ea:	4699      	mov	r9, r3
 80006ec:	46a2      	mov	sl, r4
 80006ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f0:	003e      	movs	r6, r7
 80006f2:	4316      	orrs	r6, r2
 80006f4:	d012      	beq.n	800071c <__aeabi_dadd+0x270>
 80006f6:	1e5e      	subs	r6, r3, #1
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d000      	beq.n	80006fe <__aeabi_dadd+0x252>
 80006fc:	e100      	b.n	8000900 <__aeabi_dadd+0x454>
 80006fe:	1887      	adds	r7, r0, r2
 8000700:	4287      	cmp	r7, r0
 8000702:	4180      	sbcs	r0, r0
 8000704:	4441      	add	r1, r8
 8000706:	4240      	negs	r0, r0
 8000708:	1809      	adds	r1, r1, r0
 800070a:	2501      	movs	r5, #1
 800070c:	020b      	lsls	r3, r1, #8
 800070e:	d533      	bpl.n	8000778 <__aeabi_dadd+0x2cc>
 8000710:	2502      	movs	r5, #2
 8000712:	e785      	b.n	8000620 <__aeabi_dadd+0x174>
 8000714:	4664      	mov	r4, ip
 8000716:	0033      	movs	r3, r6
 8000718:	4641      	mov	r1, r8
 800071a:	0010      	movs	r0, r2
 800071c:	001d      	movs	r5, r3
 800071e:	e7c7      	b.n	80006b0 <__aeabi_dadd+0x204>
 8000720:	2d00      	cmp	r5, #0
 8000722:	d000      	beq.n	8000726 <__aeabi_dadd+0x27a>
 8000724:	e0da      	b.n	80008dc <__aeabi_dadd+0x430>
 8000726:	000c      	movs	r4, r1
 8000728:	4304      	orrs	r4, r0
 800072a:	d0f3      	beq.n	8000714 <__aeabi_dadd+0x268>
 800072c:	1c5c      	adds	r4, r3, #1
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x286>
 8000730:	e19f      	b.n	8000a72 <__aeabi_dadd+0x5c6>
 8000732:	4c5d      	ldr	r4, [pc, #372]	; (80008a8 <__aeabi_dadd+0x3fc>)
 8000734:	42a6      	cmp	r6, r4
 8000736:	d100      	bne.n	800073a <__aeabi_dadd+0x28e>
 8000738:	e12f      	b.n	800099a <__aeabi_dadd+0x4ee>
 800073a:	43db      	mvns	r3, r3
 800073c:	2b38      	cmp	r3, #56	; 0x38
 800073e:	dd00      	ble.n	8000742 <__aeabi_dadd+0x296>
 8000740:	e166      	b.n	8000a10 <__aeabi_dadd+0x564>
 8000742:	2b1f      	cmp	r3, #31
 8000744:	dd00      	ble.n	8000748 <__aeabi_dadd+0x29c>
 8000746:	e183      	b.n	8000a50 <__aeabi_dadd+0x5a4>
 8000748:	2420      	movs	r4, #32
 800074a:	0005      	movs	r5, r0
 800074c:	1ae4      	subs	r4, r4, r3
 800074e:	000f      	movs	r7, r1
 8000750:	40dd      	lsrs	r5, r3
 8000752:	40d9      	lsrs	r1, r3
 8000754:	40a0      	lsls	r0, r4
 8000756:	4643      	mov	r3, r8
 8000758:	40a7      	lsls	r7, r4
 800075a:	1a5b      	subs	r3, r3, r1
 800075c:	1e44      	subs	r4, r0, #1
 800075e:	41a0      	sbcs	r0, r4
 8000760:	4698      	mov	r8, r3
 8000762:	432f      	orrs	r7, r5
 8000764:	4338      	orrs	r0, r7
 8000766:	1a17      	subs	r7, r2, r0
 8000768:	42ba      	cmp	r2, r7
 800076a:	4192      	sbcs	r2, r2
 800076c:	4643      	mov	r3, r8
 800076e:	4252      	negs	r2, r2
 8000770:	1a99      	subs	r1, r3, r2
 8000772:	4664      	mov	r4, ip
 8000774:	0035      	movs	r5, r6
 8000776:	e6ca      	b.n	800050e <__aeabi_dadd+0x62>
 8000778:	2207      	movs	r2, #7
 800077a:	403a      	ands	r2, r7
 800077c:	2a00      	cmp	r2, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x2d6>
 8000780:	e6f6      	b.n	8000570 <__aeabi_dadd+0xc4>
 8000782:	074b      	lsls	r3, r1, #29
 8000784:	08ca      	lsrs	r2, r1, #3
 8000786:	4948      	ldr	r1, [pc, #288]	; (80008a8 <__aeabi_dadd+0x3fc>)
 8000788:	08ff      	lsrs	r7, r7, #3
 800078a:	433b      	orrs	r3, r7
 800078c:	428d      	cmp	r5, r1
 800078e:	d196      	bne.n	80006be <__aeabi_dadd+0x212>
 8000790:	0019      	movs	r1, r3
 8000792:	4311      	orrs	r1, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x2ec>
 8000796:	e19e      	b.n	8000ad6 <__aeabi_dadd+0x62a>
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0309      	lsls	r1, r1, #12
 800079c:	430a      	orrs	r2, r1
 800079e:	0312      	lsls	r2, r2, #12
 80007a0:	0b12      	lsrs	r2, r2, #12
 80007a2:	4d41      	ldr	r5, [pc, #260]	; (80008a8 <__aeabi_dadd+0x3fc>)
 80007a4:	e78f      	b.n	80006c6 <__aeabi_dadd+0x21a>
 80007a6:	0015      	movs	r5, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	2300      	movs	r3, #0
 80007ac:	e78b      	b.n	80006c6 <__aeabi_dadd+0x21a>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_dadd+0x308>
 80007b2:	e0c7      	b.n	8000944 <__aeabi_dadd+0x498>
 80007b4:	1c6b      	adds	r3, r5, #1
 80007b6:	055f      	lsls	r7, r3, #21
 80007b8:	0d7f      	lsrs	r7, r7, #21
 80007ba:	2f01      	cmp	r7, #1
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dadd+0x314>
 80007be:	e0f1      	b.n	80009a4 <__aeabi_dadd+0x4f8>
 80007c0:	4d39      	ldr	r5, [pc, #228]	; (80008a8 <__aeabi_dadd+0x3fc>)
 80007c2:	42ab      	cmp	r3, r5
 80007c4:	d100      	bne.n	80007c8 <__aeabi_dadd+0x31c>
 80007c6:	e0b9      	b.n	800093c <__aeabi_dadd+0x490>
 80007c8:	1885      	adds	r5, r0, r2
 80007ca:	000a      	movs	r2, r1
 80007cc:	4285      	cmp	r5, r0
 80007ce:	4189      	sbcs	r1, r1
 80007d0:	4442      	add	r2, r8
 80007d2:	4249      	negs	r1, r1
 80007d4:	1851      	adds	r1, r2, r1
 80007d6:	2207      	movs	r2, #7
 80007d8:	07cf      	lsls	r7, r1, #31
 80007da:	086d      	lsrs	r5, r5, #1
 80007dc:	432f      	orrs	r7, r5
 80007de:	0849      	lsrs	r1, r1, #1
 80007e0:	403a      	ands	r2, r7
 80007e2:	001d      	movs	r5, r3
 80007e4:	e6c2      	b.n	800056c <__aeabi_dadd+0xc0>
 80007e6:	2207      	movs	r2, #7
 80007e8:	4930      	ldr	r1, [pc, #192]	; (80008ac <__aeabi_dadd+0x400>)
 80007ea:	1aed      	subs	r5, r5, r3
 80007ec:	4031      	ands	r1, r6
 80007ee:	403a      	ands	r2, r7
 80007f0:	e6bc      	b.n	800056c <__aeabi_dadd+0xc0>
 80007f2:	003e      	movs	r6, r7
 80007f4:	3828      	subs	r0, #40	; 0x28
 80007f6:	4086      	lsls	r6, r0
 80007f8:	2700      	movs	r7, #0
 80007fa:	e69f      	b.n	800053c <__aeabi_dadd+0x90>
 80007fc:	0038      	movs	r0, r7
 80007fe:	f001 fbd7 	bl	8001fb0 <__clzsi2>
 8000802:	3020      	adds	r0, #32
 8000804:	e68e      	b.n	8000524 <__aeabi_dadd+0x78>
 8000806:	4643      	mov	r3, r8
 8000808:	4313      	orrs	r3, r2
 800080a:	001f      	movs	r7, r3
 800080c:	1e7a      	subs	r2, r7, #1
 800080e:	4197      	sbcs	r7, r2
 8000810:	1bc7      	subs	r7, r0, r7
 8000812:	42b8      	cmp	r0, r7
 8000814:	4180      	sbcs	r0, r0
 8000816:	4240      	negs	r0, r0
 8000818:	1a09      	subs	r1, r1, r0
 800081a:	e678      	b.n	800050e <__aeabi_dadd+0x62>
 800081c:	000e      	movs	r6, r1
 800081e:	003b      	movs	r3, r7
 8000820:	4306      	orrs	r6, r0
 8000822:	4313      	orrs	r3, r2
 8000824:	2d00      	cmp	r5, #0
 8000826:	d161      	bne.n	80008ec <__aeabi_dadd+0x440>
 8000828:	2e00      	cmp	r6, #0
 800082a:	d000      	beq.n	800082e <__aeabi_dadd+0x382>
 800082c:	e0f4      	b.n	8000a18 <__aeabi_dadd+0x56c>
 800082e:	2b00      	cmp	r3, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x388>
 8000832:	e11b      	b.n	8000a6c <__aeabi_dadd+0x5c0>
 8000834:	4664      	mov	r4, ip
 8000836:	0039      	movs	r1, r7
 8000838:	0010      	movs	r0, r2
 800083a:	e739      	b.n	80006b0 <__aeabi_dadd+0x204>
 800083c:	4f1a      	ldr	r7, [pc, #104]	; (80008a8 <__aeabi_dadd+0x3fc>)
 800083e:	42bb      	cmp	r3, r7
 8000840:	d07a      	beq.n	8000938 <__aeabi_dadd+0x48c>
 8000842:	0033      	movs	r3, r6
 8000844:	e6ff      	b.n	8000646 <__aeabi_dadd+0x19a>
 8000846:	0030      	movs	r0, r6
 8000848:	3d1f      	subs	r5, #31
 800084a:	40e8      	lsrs	r0, r5
 800084c:	2b20      	cmp	r3, #32
 800084e:	d003      	beq.n	8000858 <__aeabi_dadd+0x3ac>
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	1acb      	subs	r3, r1, r3
 8000854:	409e      	lsls	r6, r3
 8000856:	4337      	orrs	r7, r6
 8000858:	1e7b      	subs	r3, r7, #1
 800085a:	419f      	sbcs	r7, r3
 800085c:	2207      	movs	r2, #7
 800085e:	4307      	orrs	r7, r0
 8000860:	403a      	ands	r2, r7
 8000862:	2100      	movs	r1, #0
 8000864:	2500      	movs	r5, #0
 8000866:	e789      	b.n	800077c <__aeabi_dadd+0x2d0>
 8000868:	1a17      	subs	r7, r2, r0
 800086a:	4643      	mov	r3, r8
 800086c:	42ba      	cmp	r2, r7
 800086e:	41b6      	sbcs	r6, r6
 8000870:	1a59      	subs	r1, r3, r1
 8000872:	4276      	negs	r6, r6
 8000874:	1b8e      	subs	r6, r1, r6
 8000876:	4664      	mov	r4, ip
 8000878:	e64e      	b.n	8000518 <__aeabi_dadd+0x6c>
 800087a:	2b1f      	cmp	r3, #31
 800087c:	dd00      	ble.n	8000880 <__aeabi_dadd+0x3d4>
 800087e:	e0ad      	b.n	80009dc <__aeabi_dadd+0x530>
 8000880:	2620      	movs	r6, #32
 8000882:	4647      	mov	r7, r8
 8000884:	1af6      	subs	r6, r6, r3
 8000886:	40b7      	lsls	r7, r6
 8000888:	46b9      	mov	r9, r7
 800088a:	0017      	movs	r7, r2
 800088c:	46b2      	mov	sl, r6
 800088e:	40df      	lsrs	r7, r3
 8000890:	464e      	mov	r6, r9
 8000892:	433e      	orrs	r6, r7
 8000894:	0037      	movs	r7, r6
 8000896:	4656      	mov	r6, sl
 8000898:	40b2      	lsls	r2, r6
 800089a:	1e56      	subs	r6, r2, #1
 800089c:	41b2      	sbcs	r2, r6
 800089e:	4317      	orrs	r7, r2
 80008a0:	4642      	mov	r2, r8
 80008a2:	40da      	lsrs	r2, r3
 80008a4:	1889      	adds	r1, r1, r2
 80008a6:	e6ae      	b.n	8000606 <__aeabi_dadd+0x15a>
 80008a8:	000007ff 	.word	0x000007ff
 80008ac:	ff7fffff 	.word	0xff7fffff
 80008b0:	800fffff 	.word	0x800fffff
 80008b4:	2620      	movs	r6, #32
 80008b6:	4647      	mov	r7, r8
 80008b8:	1af6      	subs	r6, r6, r3
 80008ba:	40b7      	lsls	r7, r6
 80008bc:	46b9      	mov	r9, r7
 80008be:	0017      	movs	r7, r2
 80008c0:	46b2      	mov	sl, r6
 80008c2:	40df      	lsrs	r7, r3
 80008c4:	464e      	mov	r6, r9
 80008c6:	433e      	orrs	r6, r7
 80008c8:	0037      	movs	r7, r6
 80008ca:	4656      	mov	r6, sl
 80008cc:	40b2      	lsls	r2, r6
 80008ce:	1e56      	subs	r6, r2, #1
 80008d0:	41b2      	sbcs	r2, r6
 80008d2:	4317      	orrs	r7, r2
 80008d4:	4642      	mov	r2, r8
 80008d6:	40da      	lsrs	r2, r3
 80008d8:	1a89      	subs	r1, r1, r2
 80008da:	e799      	b.n	8000810 <__aeabi_dadd+0x364>
 80008dc:	4c7f      	ldr	r4, [pc, #508]	; (8000adc <__aeabi_dadd+0x630>)
 80008de:	42a6      	cmp	r6, r4
 80008e0:	d05b      	beq.n	800099a <__aeabi_dadd+0x4ee>
 80008e2:	2480      	movs	r4, #128	; 0x80
 80008e4:	0424      	lsls	r4, r4, #16
 80008e6:	425b      	negs	r3, r3
 80008e8:	4321      	orrs	r1, r4
 80008ea:	e727      	b.n	800073c <__aeabi_dadd+0x290>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d10c      	bne.n	800090a <__aeabi_dadd+0x45e>
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x44a>
 80008f4:	e0cb      	b.n	8000a8e <__aeabi_dadd+0x5e2>
 80008f6:	4664      	mov	r4, ip
 80008f8:	0039      	movs	r1, r7
 80008fa:	0010      	movs	r0, r2
 80008fc:	4d77      	ldr	r5, [pc, #476]	; (8000adc <__aeabi_dadd+0x630>)
 80008fe:	e6d7      	b.n	80006b0 <__aeabi_dadd+0x204>
 8000900:	4f76      	ldr	r7, [pc, #472]	; (8000adc <__aeabi_dadd+0x630>)
 8000902:	42bb      	cmp	r3, r7
 8000904:	d018      	beq.n	8000938 <__aeabi_dadd+0x48c>
 8000906:	0033      	movs	r3, r6
 8000908:	e675      	b.n	80005f6 <__aeabi_dadd+0x14a>
 800090a:	2b00      	cmp	r3, #0
 800090c:	d014      	beq.n	8000938 <__aeabi_dadd+0x48c>
 800090e:	074b      	lsls	r3, r1, #29
 8000910:	08c0      	lsrs	r0, r0, #3
 8000912:	4318      	orrs	r0, r3
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	08c9      	lsrs	r1, r1, #3
 8000918:	031b      	lsls	r3, r3, #12
 800091a:	4219      	tst	r1, r3
 800091c:	d007      	beq.n	800092e <__aeabi_dadd+0x482>
 800091e:	08fc      	lsrs	r4, r7, #3
 8000920:	421c      	tst	r4, r3
 8000922:	d104      	bne.n	800092e <__aeabi_dadd+0x482>
 8000924:	0779      	lsls	r1, r7, #29
 8000926:	08d0      	lsrs	r0, r2, #3
 8000928:	4308      	orrs	r0, r1
 800092a:	46e1      	mov	r9, ip
 800092c:	0021      	movs	r1, r4
 800092e:	464c      	mov	r4, r9
 8000930:	0f42      	lsrs	r2, r0, #29
 8000932:	00c9      	lsls	r1, r1, #3
 8000934:	4311      	orrs	r1, r2
 8000936:	00c0      	lsls	r0, r0, #3
 8000938:	4d68      	ldr	r5, [pc, #416]	; (8000adc <__aeabi_dadd+0x630>)
 800093a:	e6b9      	b.n	80006b0 <__aeabi_dadd+0x204>
 800093c:	001d      	movs	r5, r3
 800093e:	2200      	movs	r2, #0
 8000940:	2300      	movs	r3, #0
 8000942:	e6c0      	b.n	80006c6 <__aeabi_dadd+0x21a>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d15b      	bne.n	8000a00 <__aeabi_dadd+0x554>
 8000948:	000d      	movs	r5, r1
 800094a:	4305      	orrs	r5, r0
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x4a4>
 800094e:	e6e2      	b.n	8000716 <__aeabi_dadd+0x26a>
 8000950:	1c5d      	adds	r5, r3, #1
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x4aa>
 8000954:	e0b0      	b.n	8000ab8 <__aeabi_dadd+0x60c>
 8000956:	4d61      	ldr	r5, [pc, #388]	; (8000adc <__aeabi_dadd+0x630>)
 8000958:	42ae      	cmp	r6, r5
 800095a:	d01f      	beq.n	800099c <__aeabi_dadd+0x4f0>
 800095c:	43db      	mvns	r3, r3
 800095e:	2b38      	cmp	r3, #56	; 0x38
 8000960:	dc71      	bgt.n	8000a46 <__aeabi_dadd+0x59a>
 8000962:	2b1f      	cmp	r3, #31
 8000964:	dd00      	ble.n	8000968 <__aeabi_dadd+0x4bc>
 8000966:	e096      	b.n	8000a96 <__aeabi_dadd+0x5ea>
 8000968:	2520      	movs	r5, #32
 800096a:	000f      	movs	r7, r1
 800096c:	1aed      	subs	r5, r5, r3
 800096e:	40af      	lsls	r7, r5
 8000970:	46b9      	mov	r9, r7
 8000972:	0007      	movs	r7, r0
 8000974:	46aa      	mov	sl, r5
 8000976:	40df      	lsrs	r7, r3
 8000978:	464d      	mov	r5, r9
 800097a:	433d      	orrs	r5, r7
 800097c:	002f      	movs	r7, r5
 800097e:	4655      	mov	r5, sl
 8000980:	40a8      	lsls	r0, r5
 8000982:	40d9      	lsrs	r1, r3
 8000984:	1e45      	subs	r5, r0, #1
 8000986:	41a8      	sbcs	r0, r5
 8000988:	4488      	add	r8, r1
 800098a:	4307      	orrs	r7, r0
 800098c:	18bf      	adds	r7, r7, r2
 800098e:	4297      	cmp	r7, r2
 8000990:	4192      	sbcs	r2, r2
 8000992:	4251      	negs	r1, r2
 8000994:	4441      	add	r1, r8
 8000996:	0035      	movs	r5, r6
 8000998:	e63a      	b.n	8000610 <__aeabi_dadd+0x164>
 800099a:	4664      	mov	r4, ip
 800099c:	0035      	movs	r5, r6
 800099e:	4641      	mov	r1, r8
 80009a0:	0010      	movs	r0, r2
 80009a2:	e685      	b.n	80006b0 <__aeabi_dadd+0x204>
 80009a4:	000b      	movs	r3, r1
 80009a6:	4303      	orrs	r3, r0
 80009a8:	2d00      	cmp	r5, #0
 80009aa:	d000      	beq.n	80009ae <__aeabi_dadd+0x502>
 80009ac:	e663      	b.n	8000676 <__aeabi_dadd+0x1ca>
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0f5      	beq.n	800099e <__aeabi_dadd+0x4f2>
 80009b2:	4643      	mov	r3, r8
 80009b4:	4313      	orrs	r3, r2
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x50e>
 80009b8:	e67a      	b.n	80006b0 <__aeabi_dadd+0x204>
 80009ba:	1887      	adds	r7, r0, r2
 80009bc:	4287      	cmp	r7, r0
 80009be:	4180      	sbcs	r0, r0
 80009c0:	2207      	movs	r2, #7
 80009c2:	4441      	add	r1, r8
 80009c4:	4240      	negs	r0, r0
 80009c6:	1809      	adds	r1, r1, r0
 80009c8:	403a      	ands	r2, r7
 80009ca:	020b      	lsls	r3, r1, #8
 80009cc:	d400      	bmi.n	80009d0 <__aeabi_dadd+0x524>
 80009ce:	e6d5      	b.n	800077c <__aeabi_dadd+0x2d0>
 80009d0:	4b43      	ldr	r3, [pc, #268]	; (8000ae0 <__aeabi_dadd+0x634>)
 80009d2:	3501      	adds	r5, #1
 80009d4:	4019      	ands	r1, r3
 80009d6:	e5c9      	b.n	800056c <__aeabi_dadd+0xc0>
 80009d8:	0038      	movs	r0, r7
 80009da:	e669      	b.n	80006b0 <__aeabi_dadd+0x204>
 80009dc:	001e      	movs	r6, r3
 80009de:	4647      	mov	r7, r8
 80009e0:	3e20      	subs	r6, #32
 80009e2:	40f7      	lsrs	r7, r6
 80009e4:	46bc      	mov	ip, r7
 80009e6:	2b20      	cmp	r3, #32
 80009e8:	d004      	beq.n	80009f4 <__aeabi_dadd+0x548>
 80009ea:	2640      	movs	r6, #64	; 0x40
 80009ec:	1af3      	subs	r3, r6, r3
 80009ee:	4646      	mov	r6, r8
 80009f0:	409e      	lsls	r6, r3
 80009f2:	4332      	orrs	r2, r6
 80009f4:	0017      	movs	r7, r2
 80009f6:	4663      	mov	r3, ip
 80009f8:	1e7a      	subs	r2, r7, #1
 80009fa:	4197      	sbcs	r7, r2
 80009fc:	431f      	orrs	r7, r3
 80009fe:	e602      	b.n	8000606 <__aeabi_dadd+0x15a>
 8000a00:	4d36      	ldr	r5, [pc, #216]	; (8000adc <__aeabi_dadd+0x630>)
 8000a02:	42ae      	cmp	r6, r5
 8000a04:	d0ca      	beq.n	800099c <__aeabi_dadd+0x4f0>
 8000a06:	2580      	movs	r5, #128	; 0x80
 8000a08:	042d      	lsls	r5, r5, #16
 8000a0a:	425b      	negs	r3, r3
 8000a0c:	4329      	orrs	r1, r5
 8000a0e:	e7a6      	b.n	800095e <__aeabi_dadd+0x4b2>
 8000a10:	4308      	orrs	r0, r1
 8000a12:	1e41      	subs	r1, r0, #1
 8000a14:	4188      	sbcs	r0, r1
 8000a16:	e6a6      	b.n	8000766 <__aeabi_dadd+0x2ba>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x572>
 8000a1c:	e648      	b.n	80006b0 <__aeabi_dadd+0x204>
 8000a1e:	1a87      	subs	r7, r0, r2
 8000a20:	4643      	mov	r3, r8
 8000a22:	42b8      	cmp	r0, r7
 8000a24:	41b6      	sbcs	r6, r6
 8000a26:	1acb      	subs	r3, r1, r3
 8000a28:	4276      	negs	r6, r6
 8000a2a:	1b9e      	subs	r6, r3, r6
 8000a2c:	0233      	lsls	r3, r6, #8
 8000a2e:	d54b      	bpl.n	8000ac8 <__aeabi_dadd+0x61c>
 8000a30:	1a17      	subs	r7, r2, r0
 8000a32:	4643      	mov	r3, r8
 8000a34:	42ba      	cmp	r2, r7
 8000a36:	4192      	sbcs	r2, r2
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	4252      	negs	r2, r2
 8000a3c:	1a89      	subs	r1, r1, r2
 8000a3e:	2207      	movs	r2, #7
 8000a40:	4664      	mov	r4, ip
 8000a42:	403a      	ands	r2, r7
 8000a44:	e592      	b.n	800056c <__aeabi_dadd+0xc0>
 8000a46:	4301      	orrs	r1, r0
 8000a48:	000f      	movs	r7, r1
 8000a4a:	1e79      	subs	r1, r7, #1
 8000a4c:	418f      	sbcs	r7, r1
 8000a4e:	e79d      	b.n	800098c <__aeabi_dadd+0x4e0>
 8000a50:	001c      	movs	r4, r3
 8000a52:	000f      	movs	r7, r1
 8000a54:	3c20      	subs	r4, #32
 8000a56:	40e7      	lsrs	r7, r4
 8000a58:	2b20      	cmp	r3, #32
 8000a5a:	d003      	beq.n	8000a64 <__aeabi_dadd+0x5b8>
 8000a5c:	2440      	movs	r4, #64	; 0x40
 8000a5e:	1ae3      	subs	r3, r4, r3
 8000a60:	4099      	lsls	r1, r3
 8000a62:	4308      	orrs	r0, r1
 8000a64:	1e41      	subs	r1, r0, #1
 8000a66:	4188      	sbcs	r0, r1
 8000a68:	4338      	orrs	r0, r7
 8000a6a:	e67c      	b.n	8000766 <__aeabi_dadd+0x2ba>
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2400      	movs	r4, #0
 8000a70:	e625      	b.n	80006be <__aeabi_dadd+0x212>
 8000a72:	1a17      	subs	r7, r2, r0
 8000a74:	4643      	mov	r3, r8
 8000a76:	42ba      	cmp	r2, r7
 8000a78:	4192      	sbcs	r2, r2
 8000a7a:	1a59      	subs	r1, r3, r1
 8000a7c:	4252      	negs	r2, r2
 8000a7e:	1a89      	subs	r1, r1, r2
 8000a80:	4664      	mov	r4, ip
 8000a82:	0035      	movs	r5, r6
 8000a84:	e543      	b.n	800050e <__aeabi_dadd+0x62>
 8000a86:	4641      	mov	r1, r8
 8000a88:	0010      	movs	r0, r2
 8000a8a:	4d14      	ldr	r5, [pc, #80]	; (8000adc <__aeabi_dadd+0x630>)
 8000a8c:	e610      	b.n	80006b0 <__aeabi_dadd+0x204>
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	2400      	movs	r4, #0
 8000a92:	0312      	lsls	r2, r2, #12
 8000a94:	e680      	b.n	8000798 <__aeabi_dadd+0x2ec>
 8000a96:	001d      	movs	r5, r3
 8000a98:	000f      	movs	r7, r1
 8000a9a:	3d20      	subs	r5, #32
 8000a9c:	40ef      	lsrs	r7, r5
 8000a9e:	46bc      	mov	ip, r7
 8000aa0:	2b20      	cmp	r3, #32
 8000aa2:	d003      	beq.n	8000aac <__aeabi_dadd+0x600>
 8000aa4:	2540      	movs	r5, #64	; 0x40
 8000aa6:	1aeb      	subs	r3, r5, r3
 8000aa8:	4099      	lsls	r1, r3
 8000aaa:	4308      	orrs	r0, r1
 8000aac:	0007      	movs	r7, r0
 8000aae:	4663      	mov	r3, ip
 8000ab0:	1e78      	subs	r0, r7, #1
 8000ab2:	4187      	sbcs	r7, r0
 8000ab4:	431f      	orrs	r7, r3
 8000ab6:	e769      	b.n	800098c <__aeabi_dadd+0x4e0>
 8000ab8:	1887      	adds	r7, r0, r2
 8000aba:	4297      	cmp	r7, r2
 8000abc:	419b      	sbcs	r3, r3
 8000abe:	4441      	add	r1, r8
 8000ac0:	425b      	negs	r3, r3
 8000ac2:	18c9      	adds	r1, r1, r3
 8000ac4:	0035      	movs	r5, r6
 8000ac6:	e5a3      	b.n	8000610 <__aeabi_dadd+0x164>
 8000ac8:	003b      	movs	r3, r7
 8000aca:	4333      	orrs	r3, r6
 8000acc:	d0ce      	beq.n	8000a6c <__aeabi_dadd+0x5c0>
 8000ace:	2207      	movs	r2, #7
 8000ad0:	0031      	movs	r1, r6
 8000ad2:	403a      	ands	r2, r7
 8000ad4:	e652      	b.n	800077c <__aeabi_dadd+0x2d0>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	001a      	movs	r2, r3
 8000ada:	e5f4      	b.n	80006c6 <__aeabi_dadd+0x21a>
 8000adc:	000007ff 	.word	0x000007ff
 8000ae0:	ff7fffff 	.word	0xff7fffff

08000ae4 <__aeabi_ddiv>:
 8000ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae6:	4657      	mov	r7, sl
 8000ae8:	46de      	mov	lr, fp
 8000aea:	464e      	mov	r6, r9
 8000aec:	4645      	mov	r5, r8
 8000aee:	b5e0      	push	{r5, r6, r7, lr}
 8000af0:	4683      	mov	fp, r0
 8000af2:	0007      	movs	r7, r0
 8000af4:	030e      	lsls	r6, r1, #12
 8000af6:	0048      	lsls	r0, r1, #1
 8000af8:	b085      	sub	sp, #20
 8000afa:	4692      	mov	sl, r2
 8000afc:	001c      	movs	r4, r3
 8000afe:	0b36      	lsrs	r6, r6, #12
 8000b00:	0d40      	lsrs	r0, r0, #21
 8000b02:	0fcd      	lsrs	r5, r1, #31
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_ddiv+0x26>
 8000b08:	e09d      	b.n	8000c46 <__aeabi_ddiv+0x162>
 8000b0a:	4b95      	ldr	r3, [pc, #596]	; (8000d60 <__aeabi_ddiv+0x27c>)
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	d039      	beq.n	8000b84 <__aeabi_ddiv+0xa0>
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	00f6      	lsls	r6, r6, #3
 8000b14:	041b      	lsls	r3, r3, #16
 8000b16:	431e      	orrs	r6, r3
 8000b18:	4a92      	ldr	r2, [pc, #584]	; (8000d64 <__aeabi_ddiv+0x280>)
 8000b1a:	0f7b      	lsrs	r3, r7, #29
 8000b1c:	4333      	orrs	r3, r6
 8000b1e:	4699      	mov	r9, r3
 8000b20:	4694      	mov	ip, r2
 8000b22:	0003      	movs	r3, r0
 8000b24:	4463      	add	r3, ip
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2600      	movs	r6, #0
 8000b2c:	00ff      	lsls	r7, r7, #3
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	0323      	lsls	r3, r4, #12
 8000b32:	0b1b      	lsrs	r3, r3, #12
 8000b34:	4698      	mov	r8, r3
 8000b36:	0063      	lsls	r3, r4, #1
 8000b38:	0fe4      	lsrs	r4, r4, #31
 8000b3a:	4652      	mov	r2, sl
 8000b3c:	0d5b      	lsrs	r3, r3, #21
 8000b3e:	9401      	str	r4, [sp, #4]
 8000b40:	d100      	bne.n	8000b44 <__aeabi_ddiv+0x60>
 8000b42:	e0b3      	b.n	8000cac <__aeabi_ddiv+0x1c8>
 8000b44:	4986      	ldr	r1, [pc, #536]	; (8000d60 <__aeabi_ddiv+0x27c>)
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d100      	bne.n	8000b4c <__aeabi_ddiv+0x68>
 8000b4a:	e09e      	b.n	8000c8a <__aeabi_ddiv+0x1a6>
 8000b4c:	4642      	mov	r2, r8
 8000b4e:	00d1      	lsls	r1, r2, #3
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	0412      	lsls	r2, r2, #16
 8000b54:	430a      	orrs	r2, r1
 8000b56:	4651      	mov	r1, sl
 8000b58:	0f49      	lsrs	r1, r1, #29
 8000b5a:	4311      	orrs	r1, r2
 8000b5c:	468b      	mov	fp, r1
 8000b5e:	4981      	ldr	r1, [pc, #516]	; (8000d64 <__aeabi_ddiv+0x280>)
 8000b60:	4652      	mov	r2, sl
 8000b62:	468c      	mov	ip, r1
 8000b64:	9900      	ldr	r1, [sp, #0]
 8000b66:	4463      	add	r3, ip
 8000b68:	1acb      	subs	r3, r1, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	00d2      	lsls	r2, r2, #3
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	002b      	movs	r3, r5
 8000b72:	4063      	eors	r3, r4
 8000b74:	469a      	mov	sl, r3
 8000b76:	2e0f      	cmp	r6, #15
 8000b78:	d900      	bls.n	8000b7c <__aeabi_ddiv+0x98>
 8000b7a:	e105      	b.n	8000d88 <__aeabi_ddiv+0x2a4>
 8000b7c:	4b7a      	ldr	r3, [pc, #488]	; (8000d68 <__aeabi_ddiv+0x284>)
 8000b7e:	00b6      	lsls	r6, r6, #2
 8000b80:	599b      	ldr	r3, [r3, r6]
 8000b82:	469f      	mov	pc, r3
 8000b84:	465b      	mov	r3, fp
 8000b86:	4333      	orrs	r3, r6
 8000b88:	4699      	mov	r9, r3
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_ddiv+0xaa>
 8000b8c:	e0b8      	b.n	8000d00 <__aeabi_ddiv+0x21c>
 8000b8e:	2302      	movs	r3, #2
 8000b90:	2608      	movs	r6, #8
 8000b92:	2700      	movs	r7, #0
 8000b94:	9000      	str	r0, [sp, #0]
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	e7ca      	b.n	8000b30 <__aeabi_ddiv+0x4c>
 8000b9a:	46cb      	mov	fp, r9
 8000b9c:	003a      	movs	r2, r7
 8000b9e:	9902      	ldr	r1, [sp, #8]
 8000ba0:	9501      	str	r5, [sp, #4]
 8000ba2:	9b01      	ldr	r3, [sp, #4]
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	2902      	cmp	r1, #2
 8000ba8:	d027      	beq.n	8000bfa <__aeabi_ddiv+0x116>
 8000baa:	2903      	cmp	r1, #3
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_ddiv+0xcc>
 8000bae:	e280      	b.n	80010b2 <__aeabi_ddiv+0x5ce>
 8000bb0:	2901      	cmp	r1, #1
 8000bb2:	d044      	beq.n	8000c3e <__aeabi_ddiv+0x15a>
 8000bb4:	496d      	ldr	r1, [pc, #436]	; (8000d6c <__aeabi_ddiv+0x288>)
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	468c      	mov	ip, r1
 8000bba:	4463      	add	r3, ip
 8000bbc:	001c      	movs	r4, r3
 8000bbe:	2c00      	cmp	r4, #0
 8000bc0:	dd38      	ble.n	8000c34 <__aeabi_ddiv+0x150>
 8000bc2:	0753      	lsls	r3, r2, #29
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_ddiv+0xe4>
 8000bc6:	e213      	b.n	8000ff0 <__aeabi_ddiv+0x50c>
 8000bc8:	08d2      	lsrs	r2, r2, #3
 8000bca:	465b      	mov	r3, fp
 8000bcc:	01db      	lsls	r3, r3, #7
 8000bce:	d509      	bpl.n	8000be4 <__aeabi_ddiv+0x100>
 8000bd0:	4659      	mov	r1, fp
 8000bd2:	4b67      	ldr	r3, [pc, #412]	; (8000d70 <__aeabi_ddiv+0x28c>)
 8000bd4:	4019      	ands	r1, r3
 8000bd6:	468b      	mov	fp, r1
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	00c9      	lsls	r1, r1, #3
 8000bdc:	468c      	mov	ip, r1
 8000bde:	9b00      	ldr	r3, [sp, #0]
 8000be0:	4463      	add	r3, ip
 8000be2:	001c      	movs	r4, r3
 8000be4:	4b63      	ldr	r3, [pc, #396]	; (8000d74 <__aeabi_ddiv+0x290>)
 8000be6:	429c      	cmp	r4, r3
 8000be8:	dc07      	bgt.n	8000bfa <__aeabi_ddiv+0x116>
 8000bea:	465b      	mov	r3, fp
 8000bec:	0564      	lsls	r4, r4, #21
 8000bee:	075f      	lsls	r7, r3, #29
 8000bf0:	025b      	lsls	r3, r3, #9
 8000bf2:	4317      	orrs	r7, r2
 8000bf4:	0b1b      	lsrs	r3, r3, #12
 8000bf6:	0d62      	lsrs	r2, r4, #21
 8000bf8:	e002      	b.n	8000c00 <__aeabi_ddiv+0x11c>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	4a58      	ldr	r2, [pc, #352]	; (8000d60 <__aeabi_ddiv+0x27c>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	031b      	lsls	r3, r3, #12
 8000c04:	0b1c      	lsrs	r4, r3, #12
 8000c06:	0d0b      	lsrs	r3, r1, #20
 8000c08:	051b      	lsls	r3, r3, #20
 8000c0a:	4323      	orrs	r3, r4
 8000c0c:	0514      	lsls	r4, r2, #20
 8000c0e:	4a5a      	ldr	r2, [pc, #360]	; (8000d78 <__aeabi_ddiv+0x294>)
 8000c10:	0038      	movs	r0, r7
 8000c12:	4013      	ands	r3, r2
 8000c14:	431c      	orrs	r4, r3
 8000c16:	4653      	mov	r3, sl
 8000c18:	0064      	lsls	r4, r4, #1
 8000c1a:	07db      	lsls	r3, r3, #31
 8000c1c:	0864      	lsrs	r4, r4, #1
 8000c1e:	431c      	orrs	r4, r3
 8000c20:	0021      	movs	r1, r4
 8000c22:	b005      	add	sp, #20
 8000c24:	bc3c      	pop	{r2, r3, r4, r5}
 8000c26:	4690      	mov	r8, r2
 8000c28:	4699      	mov	r9, r3
 8000c2a:	46a2      	mov	sl, r4
 8000c2c:	46ab      	mov	fp, r5
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c30:	2201      	movs	r2, #1
 8000c32:	4252      	negs	r2, r2
 8000c34:	2301      	movs	r3, #1
 8000c36:	1b1b      	subs	r3, r3, r4
 8000c38:	2b38      	cmp	r3, #56	; 0x38
 8000c3a:	dc00      	bgt.n	8000c3e <__aeabi_ddiv+0x15a>
 8000c3c:	e1ad      	b.n	8000f9a <__aeabi_ddiv+0x4b6>
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	2700      	movs	r7, #0
 8000c44:	e7dc      	b.n	8000c00 <__aeabi_ddiv+0x11c>
 8000c46:	465b      	mov	r3, fp
 8000c48:	4333      	orrs	r3, r6
 8000c4a:	4699      	mov	r9, r3
 8000c4c:	d05e      	beq.n	8000d0c <__aeabi_ddiv+0x228>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d100      	bne.n	8000c54 <__aeabi_ddiv+0x170>
 8000c52:	e18a      	b.n	8000f6a <__aeabi_ddiv+0x486>
 8000c54:	0030      	movs	r0, r6
 8000c56:	f001 f9ab 	bl	8001fb0 <__clzsi2>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	3b0b      	subs	r3, #11
 8000c5e:	2b1c      	cmp	r3, #28
 8000c60:	dd00      	ble.n	8000c64 <__aeabi_ddiv+0x180>
 8000c62:	e17b      	b.n	8000f5c <__aeabi_ddiv+0x478>
 8000c64:	221d      	movs	r2, #29
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	465a      	mov	r2, fp
 8000c6a:	0001      	movs	r1, r0
 8000c6c:	40da      	lsrs	r2, r3
 8000c6e:	3908      	subs	r1, #8
 8000c70:	408e      	lsls	r6, r1
 8000c72:	0013      	movs	r3, r2
 8000c74:	465f      	mov	r7, fp
 8000c76:	4333      	orrs	r3, r6
 8000c78:	4699      	mov	r9, r3
 8000c7a:	408f      	lsls	r7, r1
 8000c7c:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <__aeabi_ddiv+0x298>)
 8000c7e:	2600      	movs	r6, #0
 8000c80:	1a1b      	subs	r3, r3, r0
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	2300      	movs	r3, #0
 8000c86:	9302      	str	r3, [sp, #8]
 8000c88:	e752      	b.n	8000b30 <__aeabi_ddiv+0x4c>
 8000c8a:	4641      	mov	r1, r8
 8000c8c:	4653      	mov	r3, sl
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	493b      	ldr	r1, [pc, #236]	; (8000d80 <__aeabi_ddiv+0x29c>)
 8000c92:	469b      	mov	fp, r3
 8000c94:	468c      	mov	ip, r1
 8000c96:	9b00      	ldr	r3, [sp, #0]
 8000c98:	4463      	add	r3, ip
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	465b      	mov	r3, fp
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d13b      	bne.n	8000d1a <__aeabi_ddiv+0x236>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	431e      	orrs	r6, r3
 8000ca8:	2102      	movs	r1, #2
 8000caa:	e761      	b.n	8000b70 <__aeabi_ddiv+0x8c>
 8000cac:	4643      	mov	r3, r8
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	469b      	mov	fp, r3
 8000cb2:	d037      	beq.n	8000d24 <__aeabi_ddiv+0x240>
 8000cb4:	4643      	mov	r3, r8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_ddiv+0x1d8>
 8000cba:	e162      	b.n	8000f82 <__aeabi_ddiv+0x49e>
 8000cbc:	4640      	mov	r0, r8
 8000cbe:	f001 f977 	bl	8001fb0 <__clzsi2>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	3b0b      	subs	r3, #11
 8000cc6:	2b1c      	cmp	r3, #28
 8000cc8:	dd00      	ble.n	8000ccc <__aeabi_ddiv+0x1e8>
 8000cca:	e153      	b.n	8000f74 <__aeabi_ddiv+0x490>
 8000ccc:	0002      	movs	r2, r0
 8000cce:	4641      	mov	r1, r8
 8000cd0:	3a08      	subs	r2, #8
 8000cd2:	4091      	lsls	r1, r2
 8000cd4:	4688      	mov	r8, r1
 8000cd6:	211d      	movs	r1, #29
 8000cd8:	1acb      	subs	r3, r1, r3
 8000cda:	4651      	mov	r1, sl
 8000cdc:	40d9      	lsrs	r1, r3
 8000cde:	000b      	movs	r3, r1
 8000ce0:	4641      	mov	r1, r8
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	469b      	mov	fp, r3
 8000ce6:	4653      	mov	r3, sl
 8000ce8:	4093      	lsls	r3, r2
 8000cea:	001a      	movs	r2, r3
 8000cec:	9b00      	ldr	r3, [sp, #0]
 8000cee:	4925      	ldr	r1, [pc, #148]	; (8000d84 <__aeabi_ddiv+0x2a0>)
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	4460      	add	r0, ip
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	468c      	mov	ip, r1
 8000cf8:	4463      	add	r3, ip
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e737      	b.n	8000b70 <__aeabi_ddiv+0x8c>
 8000d00:	2303      	movs	r3, #3
 8000d02:	46b1      	mov	r9, r6
 8000d04:	9000      	str	r0, [sp, #0]
 8000d06:	260c      	movs	r6, #12
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	e711      	b.n	8000b30 <__aeabi_ddiv+0x4c>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	2604      	movs	r6, #4
 8000d14:	2700      	movs	r7, #0
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	e70a      	b.n	8000b30 <__aeabi_ddiv+0x4c>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	46c3      	mov	fp, r8
 8000d1e:	431e      	orrs	r6, r3
 8000d20:	2103      	movs	r1, #3
 8000d22:	e725      	b.n	8000b70 <__aeabi_ddiv+0x8c>
 8000d24:	3301      	adds	r3, #1
 8000d26:	431e      	orrs	r6, r3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	e720      	b.n	8000b70 <__aeabi_ddiv+0x8c>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	469a      	mov	sl, r3
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	2700      	movs	r7, #0
 8000d36:	031b      	lsls	r3, r3, #12
 8000d38:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <__aeabi_ddiv+0x27c>)
 8000d3a:	e761      	b.n	8000c00 <__aeabi_ddiv+0x11c>
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	4649      	mov	r1, r9
 8000d40:	031b      	lsls	r3, r3, #12
 8000d42:	4219      	tst	r1, r3
 8000d44:	d100      	bne.n	8000d48 <__aeabi_ddiv+0x264>
 8000d46:	e0e2      	b.n	8000f0e <__aeabi_ddiv+0x42a>
 8000d48:	4659      	mov	r1, fp
 8000d4a:	4219      	tst	r1, r3
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_ddiv+0x26c>
 8000d4e:	e0de      	b.n	8000f0e <__aeabi_ddiv+0x42a>
 8000d50:	430b      	orrs	r3, r1
 8000d52:	031b      	lsls	r3, r3, #12
 8000d54:	0017      	movs	r7, r2
 8000d56:	0b1b      	lsrs	r3, r3, #12
 8000d58:	46a2      	mov	sl, r4
 8000d5a:	4a01      	ldr	r2, [pc, #4]	; (8000d60 <__aeabi_ddiv+0x27c>)
 8000d5c:	e750      	b.n	8000c00 <__aeabi_ddiv+0x11c>
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	000007ff 	.word	0x000007ff
 8000d64:	fffffc01 	.word	0xfffffc01
 8000d68:	080093e0 	.word	0x080093e0
 8000d6c:	000003ff 	.word	0x000003ff
 8000d70:	feffffff 	.word	0xfeffffff
 8000d74:	000007fe 	.word	0x000007fe
 8000d78:	800fffff 	.word	0x800fffff
 8000d7c:	fffffc0d 	.word	0xfffffc0d
 8000d80:	fffff801 	.word	0xfffff801
 8000d84:	000003f3 	.word	0x000003f3
 8000d88:	45d9      	cmp	r9, fp
 8000d8a:	d900      	bls.n	8000d8e <__aeabi_ddiv+0x2aa>
 8000d8c:	e0cb      	b.n	8000f26 <__aeabi_ddiv+0x442>
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_ddiv+0x2ae>
 8000d90:	e0c6      	b.n	8000f20 <__aeabi_ddiv+0x43c>
 8000d92:	003c      	movs	r4, r7
 8000d94:	4648      	mov	r0, r9
 8000d96:	2700      	movs	r7, #0
 8000d98:	9b00      	ldr	r3, [sp, #0]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	465b      	mov	r3, fp
 8000da0:	0e16      	lsrs	r6, r2, #24
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	431e      	orrs	r6, r3
 8000da6:	0213      	lsls	r3, r2, #8
 8000da8:	4698      	mov	r8, r3
 8000daa:	0433      	lsls	r3, r6, #16
 8000dac:	0c1b      	lsrs	r3, r3, #16
 8000dae:	4699      	mov	r9, r3
 8000db0:	0c31      	lsrs	r1, r6, #16
 8000db2:	9101      	str	r1, [sp, #4]
 8000db4:	f7ff fa36 	bl	8000224 <__aeabi_uidivmod>
 8000db8:	464a      	mov	r2, r9
 8000dba:	4342      	muls	r2, r0
 8000dbc:	040b      	lsls	r3, r1, #16
 8000dbe:	0c21      	lsrs	r1, r4, #16
 8000dc0:	0005      	movs	r5, r0
 8000dc2:	4319      	orrs	r1, r3
 8000dc4:	428a      	cmp	r2, r1
 8000dc6:	d907      	bls.n	8000dd8 <__aeabi_ddiv+0x2f4>
 8000dc8:	1989      	adds	r1, r1, r6
 8000dca:	3d01      	subs	r5, #1
 8000dcc:	428e      	cmp	r6, r1
 8000dce:	d803      	bhi.n	8000dd8 <__aeabi_ddiv+0x2f4>
 8000dd0:	428a      	cmp	r2, r1
 8000dd2:	d901      	bls.n	8000dd8 <__aeabi_ddiv+0x2f4>
 8000dd4:	1e85      	subs	r5, r0, #2
 8000dd6:	1989      	adds	r1, r1, r6
 8000dd8:	1a88      	subs	r0, r1, r2
 8000dda:	9901      	ldr	r1, [sp, #4]
 8000ddc:	f7ff fa22 	bl	8000224 <__aeabi_uidivmod>
 8000de0:	0409      	lsls	r1, r1, #16
 8000de2:	468c      	mov	ip, r1
 8000de4:	464a      	mov	r2, r9
 8000de6:	0421      	lsls	r1, r4, #16
 8000de8:	4664      	mov	r4, ip
 8000dea:	4342      	muls	r2, r0
 8000dec:	0c09      	lsrs	r1, r1, #16
 8000dee:	0003      	movs	r3, r0
 8000df0:	4321      	orrs	r1, r4
 8000df2:	428a      	cmp	r2, r1
 8000df4:	d904      	bls.n	8000e00 <__aeabi_ddiv+0x31c>
 8000df6:	1989      	adds	r1, r1, r6
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	428e      	cmp	r6, r1
 8000dfc:	d800      	bhi.n	8000e00 <__aeabi_ddiv+0x31c>
 8000dfe:	e0f1      	b.n	8000fe4 <__aeabi_ddiv+0x500>
 8000e00:	042d      	lsls	r5, r5, #16
 8000e02:	431d      	orrs	r5, r3
 8000e04:	46ab      	mov	fp, r5
 8000e06:	4643      	mov	r3, r8
 8000e08:	1a89      	subs	r1, r1, r2
 8000e0a:	4642      	mov	r2, r8
 8000e0c:	0c28      	lsrs	r0, r5, #16
 8000e0e:	0412      	lsls	r2, r2, #16
 8000e10:	0c1d      	lsrs	r5, r3, #16
 8000e12:	465b      	mov	r3, fp
 8000e14:	0c14      	lsrs	r4, r2, #16
 8000e16:	0022      	movs	r2, r4
 8000e18:	041b      	lsls	r3, r3, #16
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	435a      	muls	r2, r3
 8000e1e:	9403      	str	r4, [sp, #12]
 8000e20:	436b      	muls	r3, r5
 8000e22:	4344      	muls	r4, r0
 8000e24:	9502      	str	r5, [sp, #8]
 8000e26:	4368      	muls	r0, r5
 8000e28:	191b      	adds	r3, r3, r4
 8000e2a:	0c15      	lsrs	r5, r2, #16
 8000e2c:	18eb      	adds	r3, r5, r3
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	d903      	bls.n	8000e3a <__aeabi_ddiv+0x356>
 8000e32:	2480      	movs	r4, #128	; 0x80
 8000e34:	0264      	lsls	r4, r4, #9
 8000e36:	46a4      	mov	ip, r4
 8000e38:	4460      	add	r0, ip
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	0415      	lsls	r5, r2, #16
 8000e3e:	041b      	lsls	r3, r3, #16
 8000e40:	0c2d      	lsrs	r5, r5, #16
 8000e42:	1820      	adds	r0, r4, r0
 8000e44:	195d      	adds	r5, r3, r5
 8000e46:	4281      	cmp	r1, r0
 8000e48:	d377      	bcc.n	8000f3a <__aeabi_ddiv+0x456>
 8000e4a:	d073      	beq.n	8000f34 <__aeabi_ddiv+0x450>
 8000e4c:	1a0c      	subs	r4, r1, r0
 8000e4e:	4aa2      	ldr	r2, [pc, #648]	; (80010d8 <__aeabi_ddiv+0x5f4>)
 8000e50:	1b7d      	subs	r5, r7, r5
 8000e52:	42af      	cmp	r7, r5
 8000e54:	41bf      	sbcs	r7, r7
 8000e56:	4694      	mov	ip, r2
 8000e58:	9b00      	ldr	r3, [sp, #0]
 8000e5a:	427f      	negs	r7, r7
 8000e5c:	4463      	add	r3, ip
 8000e5e:	1be0      	subs	r0, r4, r7
 8000e60:	001c      	movs	r4, r3
 8000e62:	4286      	cmp	r6, r0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_ddiv+0x384>
 8000e66:	e0db      	b.n	8001020 <__aeabi_ddiv+0x53c>
 8000e68:	9901      	ldr	r1, [sp, #4]
 8000e6a:	f7ff f9db 	bl	8000224 <__aeabi_uidivmod>
 8000e6e:	464a      	mov	r2, r9
 8000e70:	4342      	muls	r2, r0
 8000e72:	040b      	lsls	r3, r1, #16
 8000e74:	0c29      	lsrs	r1, r5, #16
 8000e76:	0007      	movs	r7, r0
 8000e78:	4319      	orrs	r1, r3
 8000e7a:	428a      	cmp	r2, r1
 8000e7c:	d907      	bls.n	8000e8e <__aeabi_ddiv+0x3aa>
 8000e7e:	1989      	adds	r1, r1, r6
 8000e80:	3f01      	subs	r7, #1
 8000e82:	428e      	cmp	r6, r1
 8000e84:	d803      	bhi.n	8000e8e <__aeabi_ddiv+0x3aa>
 8000e86:	428a      	cmp	r2, r1
 8000e88:	d901      	bls.n	8000e8e <__aeabi_ddiv+0x3aa>
 8000e8a:	1e87      	subs	r7, r0, #2
 8000e8c:	1989      	adds	r1, r1, r6
 8000e8e:	1a88      	subs	r0, r1, r2
 8000e90:	9901      	ldr	r1, [sp, #4]
 8000e92:	f7ff f9c7 	bl	8000224 <__aeabi_uidivmod>
 8000e96:	0409      	lsls	r1, r1, #16
 8000e98:	464a      	mov	r2, r9
 8000e9a:	4689      	mov	r9, r1
 8000e9c:	0429      	lsls	r1, r5, #16
 8000e9e:	464d      	mov	r5, r9
 8000ea0:	4342      	muls	r2, r0
 8000ea2:	0c09      	lsrs	r1, r1, #16
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	4329      	orrs	r1, r5
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d907      	bls.n	8000ebc <__aeabi_ddiv+0x3d8>
 8000eac:	1989      	adds	r1, r1, r6
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	428e      	cmp	r6, r1
 8000eb2:	d803      	bhi.n	8000ebc <__aeabi_ddiv+0x3d8>
 8000eb4:	428a      	cmp	r2, r1
 8000eb6:	d901      	bls.n	8000ebc <__aeabi_ddiv+0x3d8>
 8000eb8:	1e83      	subs	r3, r0, #2
 8000eba:	1989      	adds	r1, r1, r6
 8000ebc:	043f      	lsls	r7, r7, #16
 8000ebe:	1a89      	subs	r1, r1, r2
 8000ec0:	003a      	movs	r2, r7
 8000ec2:	9f03      	ldr	r7, [sp, #12]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	0038      	movs	r0, r7
 8000ec8:	0413      	lsls	r3, r2, #16
 8000eca:	0c1b      	lsrs	r3, r3, #16
 8000ecc:	4358      	muls	r0, r3
 8000ece:	4681      	mov	r9, r0
 8000ed0:	9802      	ldr	r0, [sp, #8]
 8000ed2:	0c15      	lsrs	r5, r2, #16
 8000ed4:	436f      	muls	r7, r5
 8000ed6:	4343      	muls	r3, r0
 8000ed8:	4345      	muls	r5, r0
 8000eda:	4648      	mov	r0, r9
 8000edc:	0c00      	lsrs	r0, r0, #16
 8000ede:	4684      	mov	ip, r0
 8000ee0:	19db      	adds	r3, r3, r7
 8000ee2:	4463      	add	r3, ip
 8000ee4:	429f      	cmp	r7, r3
 8000ee6:	d903      	bls.n	8000ef0 <__aeabi_ddiv+0x40c>
 8000ee8:	2080      	movs	r0, #128	; 0x80
 8000eea:	0240      	lsls	r0, r0, #9
 8000eec:	4684      	mov	ip, r0
 8000eee:	4465      	add	r5, ip
 8000ef0:	4648      	mov	r0, r9
 8000ef2:	0c1f      	lsrs	r7, r3, #16
 8000ef4:	0400      	lsls	r0, r0, #16
 8000ef6:	041b      	lsls	r3, r3, #16
 8000ef8:	0c00      	lsrs	r0, r0, #16
 8000efa:	197d      	adds	r5, r7, r5
 8000efc:	1818      	adds	r0, r3, r0
 8000efe:	42a9      	cmp	r1, r5
 8000f00:	d200      	bcs.n	8000f04 <__aeabi_ddiv+0x420>
 8000f02:	e084      	b.n	800100e <__aeabi_ddiv+0x52a>
 8000f04:	d100      	bne.n	8000f08 <__aeabi_ddiv+0x424>
 8000f06:	e07f      	b.n	8001008 <__aeabi_ddiv+0x524>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	e657      	b.n	8000bbe <__aeabi_ddiv+0xda>
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	464a      	mov	r2, r9
 8000f12:	031b      	lsls	r3, r3, #12
 8000f14:	4313      	orrs	r3, r2
 8000f16:	031b      	lsls	r3, r3, #12
 8000f18:	0b1b      	lsrs	r3, r3, #12
 8000f1a:	46aa      	mov	sl, r5
 8000f1c:	4a6f      	ldr	r2, [pc, #444]	; (80010dc <__aeabi_ddiv+0x5f8>)
 8000f1e:	e66f      	b.n	8000c00 <__aeabi_ddiv+0x11c>
 8000f20:	42ba      	cmp	r2, r7
 8000f22:	d900      	bls.n	8000f26 <__aeabi_ddiv+0x442>
 8000f24:	e735      	b.n	8000d92 <__aeabi_ddiv+0x2ae>
 8000f26:	464b      	mov	r3, r9
 8000f28:	07dc      	lsls	r4, r3, #31
 8000f2a:	0858      	lsrs	r0, r3, #1
 8000f2c:	087b      	lsrs	r3, r7, #1
 8000f2e:	431c      	orrs	r4, r3
 8000f30:	07ff      	lsls	r7, r7, #31
 8000f32:	e734      	b.n	8000d9e <__aeabi_ddiv+0x2ba>
 8000f34:	2400      	movs	r4, #0
 8000f36:	42af      	cmp	r7, r5
 8000f38:	d289      	bcs.n	8000e4e <__aeabi_ddiv+0x36a>
 8000f3a:	4447      	add	r7, r8
 8000f3c:	4547      	cmp	r7, r8
 8000f3e:	41a4      	sbcs	r4, r4
 8000f40:	465b      	mov	r3, fp
 8000f42:	4264      	negs	r4, r4
 8000f44:	19a4      	adds	r4, r4, r6
 8000f46:	1864      	adds	r4, r4, r1
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	42a6      	cmp	r6, r4
 8000f4c:	d21e      	bcs.n	8000f8c <__aeabi_ddiv+0x4a8>
 8000f4e:	42a0      	cmp	r0, r4
 8000f50:	d86d      	bhi.n	800102e <__aeabi_ddiv+0x54a>
 8000f52:	d100      	bne.n	8000f56 <__aeabi_ddiv+0x472>
 8000f54:	e0b6      	b.n	80010c4 <__aeabi_ddiv+0x5e0>
 8000f56:	1a24      	subs	r4, r4, r0
 8000f58:	469b      	mov	fp, r3
 8000f5a:	e778      	b.n	8000e4e <__aeabi_ddiv+0x36a>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	465a      	mov	r2, fp
 8000f60:	3b28      	subs	r3, #40	; 0x28
 8000f62:	409a      	lsls	r2, r3
 8000f64:	2700      	movs	r7, #0
 8000f66:	4691      	mov	r9, r2
 8000f68:	e688      	b.n	8000c7c <__aeabi_ddiv+0x198>
 8000f6a:	4658      	mov	r0, fp
 8000f6c:	f001 f820 	bl	8001fb0 <__clzsi2>
 8000f70:	3020      	adds	r0, #32
 8000f72:	e672      	b.n	8000c5a <__aeabi_ddiv+0x176>
 8000f74:	0003      	movs	r3, r0
 8000f76:	4652      	mov	r2, sl
 8000f78:	3b28      	subs	r3, #40	; 0x28
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	4693      	mov	fp, r2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	e6b4      	b.n	8000cec <__aeabi_ddiv+0x208>
 8000f82:	4650      	mov	r0, sl
 8000f84:	f001 f814 	bl	8001fb0 <__clzsi2>
 8000f88:	3020      	adds	r0, #32
 8000f8a:	e69a      	b.n	8000cc2 <__aeabi_ddiv+0x1de>
 8000f8c:	42a6      	cmp	r6, r4
 8000f8e:	d1e2      	bne.n	8000f56 <__aeabi_ddiv+0x472>
 8000f90:	45b8      	cmp	r8, r7
 8000f92:	d9dc      	bls.n	8000f4e <__aeabi_ddiv+0x46a>
 8000f94:	1a34      	subs	r4, r6, r0
 8000f96:	469b      	mov	fp, r3
 8000f98:	e759      	b.n	8000e4e <__aeabi_ddiv+0x36a>
 8000f9a:	2b1f      	cmp	r3, #31
 8000f9c:	dc65      	bgt.n	800106a <__aeabi_ddiv+0x586>
 8000f9e:	4c50      	ldr	r4, [pc, #320]	; (80010e0 <__aeabi_ddiv+0x5fc>)
 8000fa0:	9900      	ldr	r1, [sp, #0]
 8000fa2:	46a4      	mov	ip, r4
 8000fa4:	465c      	mov	r4, fp
 8000fa6:	4461      	add	r1, ip
 8000fa8:	0008      	movs	r0, r1
 8000faa:	408c      	lsls	r4, r1
 8000fac:	0011      	movs	r1, r2
 8000fae:	4082      	lsls	r2, r0
 8000fb0:	40d9      	lsrs	r1, r3
 8000fb2:	1e50      	subs	r0, r2, #1
 8000fb4:	4182      	sbcs	r2, r0
 8000fb6:	430c      	orrs	r4, r1
 8000fb8:	4314      	orrs	r4, r2
 8000fba:	465a      	mov	r2, fp
 8000fbc:	40da      	lsrs	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	0762      	lsls	r2, r4, #29
 8000fc2:	d009      	beq.n	8000fd8 <__aeabi_ddiv+0x4f4>
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	4022      	ands	r2, r4
 8000fc8:	2a04      	cmp	r2, #4
 8000fca:	d005      	beq.n	8000fd8 <__aeabi_ddiv+0x4f4>
 8000fcc:	0022      	movs	r2, r4
 8000fce:	1d14      	adds	r4, r2, #4
 8000fd0:	4294      	cmp	r4, r2
 8000fd2:	4189      	sbcs	r1, r1
 8000fd4:	4249      	negs	r1, r1
 8000fd6:	185b      	adds	r3, r3, r1
 8000fd8:	021a      	lsls	r2, r3, #8
 8000fda:	d562      	bpl.n	80010a2 <__aeabi_ddiv+0x5be>
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2700      	movs	r7, #0
 8000fe2:	e60d      	b.n	8000c00 <__aeabi_ddiv+0x11c>
 8000fe4:	428a      	cmp	r2, r1
 8000fe6:	d800      	bhi.n	8000fea <__aeabi_ddiv+0x506>
 8000fe8:	e70a      	b.n	8000e00 <__aeabi_ddiv+0x31c>
 8000fea:	1e83      	subs	r3, r0, #2
 8000fec:	1989      	adds	r1, r1, r6
 8000fee:	e707      	b.n	8000e00 <__aeabi_ddiv+0x31c>
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0x516>
 8000ff8:	e5e6      	b.n	8000bc8 <__aeabi_ddiv+0xe4>
 8000ffa:	1d17      	adds	r7, r2, #4
 8000ffc:	4297      	cmp	r7, r2
 8000ffe:	4192      	sbcs	r2, r2
 8001000:	4253      	negs	r3, r2
 8001002:	449b      	add	fp, r3
 8001004:	08fa      	lsrs	r2, r7, #3
 8001006:	e5e0      	b.n	8000bca <__aeabi_ddiv+0xe6>
 8001008:	2800      	cmp	r0, #0
 800100a:	d100      	bne.n	800100e <__aeabi_ddiv+0x52a>
 800100c:	e5d7      	b.n	8000bbe <__aeabi_ddiv+0xda>
 800100e:	1871      	adds	r1, r6, r1
 8001010:	1e53      	subs	r3, r2, #1
 8001012:	42b1      	cmp	r1, r6
 8001014:	d327      	bcc.n	8001066 <__aeabi_ddiv+0x582>
 8001016:	42a9      	cmp	r1, r5
 8001018:	d315      	bcc.n	8001046 <__aeabi_ddiv+0x562>
 800101a:	d058      	beq.n	80010ce <__aeabi_ddiv+0x5ea>
 800101c:	001a      	movs	r2, r3
 800101e:	e773      	b.n	8000f08 <__aeabi_ddiv+0x424>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dc00      	bgt.n	8001026 <__aeabi_ddiv+0x542>
 8001024:	e604      	b.n	8000c30 <__aeabi_ddiv+0x14c>
 8001026:	2301      	movs	r3, #1
 8001028:	2200      	movs	r2, #0
 800102a:	449b      	add	fp, r3
 800102c:	e5cd      	b.n	8000bca <__aeabi_ddiv+0xe6>
 800102e:	2302      	movs	r3, #2
 8001030:	4447      	add	r7, r8
 8001032:	4547      	cmp	r7, r8
 8001034:	4189      	sbcs	r1, r1
 8001036:	425b      	negs	r3, r3
 8001038:	469c      	mov	ip, r3
 800103a:	4249      	negs	r1, r1
 800103c:	1989      	adds	r1, r1, r6
 800103e:	190c      	adds	r4, r1, r4
 8001040:	44e3      	add	fp, ip
 8001042:	1a24      	subs	r4, r4, r0
 8001044:	e703      	b.n	8000e4e <__aeabi_ddiv+0x36a>
 8001046:	4643      	mov	r3, r8
 8001048:	005f      	lsls	r7, r3, #1
 800104a:	4547      	cmp	r7, r8
 800104c:	419b      	sbcs	r3, r3
 800104e:	46b8      	mov	r8, r7
 8001050:	425b      	negs	r3, r3
 8001052:	199e      	adds	r6, r3, r6
 8001054:	3a02      	subs	r2, #2
 8001056:	1989      	adds	r1, r1, r6
 8001058:	42a9      	cmp	r1, r5
 800105a:	d000      	beq.n	800105e <__aeabi_ddiv+0x57a>
 800105c:	e754      	b.n	8000f08 <__aeabi_ddiv+0x424>
 800105e:	4540      	cmp	r0, r8
 8001060:	d000      	beq.n	8001064 <__aeabi_ddiv+0x580>
 8001062:	e751      	b.n	8000f08 <__aeabi_ddiv+0x424>
 8001064:	e5ab      	b.n	8000bbe <__aeabi_ddiv+0xda>
 8001066:	001a      	movs	r2, r3
 8001068:	e7f6      	b.n	8001058 <__aeabi_ddiv+0x574>
 800106a:	211f      	movs	r1, #31
 800106c:	465f      	mov	r7, fp
 800106e:	4249      	negs	r1, r1
 8001070:	1b0c      	subs	r4, r1, r4
 8001072:	40e7      	lsrs	r7, r4
 8001074:	2b20      	cmp	r3, #32
 8001076:	d007      	beq.n	8001088 <__aeabi_ddiv+0x5a4>
 8001078:	491a      	ldr	r1, [pc, #104]	; (80010e4 <__aeabi_ddiv+0x600>)
 800107a:	9b00      	ldr	r3, [sp, #0]
 800107c:	468c      	mov	ip, r1
 800107e:	4463      	add	r3, ip
 8001080:	0018      	movs	r0, r3
 8001082:	465b      	mov	r3, fp
 8001084:	4083      	lsls	r3, r0
 8001086:	431a      	orrs	r2, r3
 8001088:	1e50      	subs	r0, r2, #1
 800108a:	4182      	sbcs	r2, r0
 800108c:	433a      	orrs	r2, r7
 800108e:	2707      	movs	r7, #7
 8001090:	2300      	movs	r3, #0
 8001092:	4017      	ands	r7, r2
 8001094:	d009      	beq.n	80010aa <__aeabi_ddiv+0x5c6>
 8001096:	210f      	movs	r1, #15
 8001098:	2300      	movs	r3, #0
 800109a:	4011      	ands	r1, r2
 800109c:	0014      	movs	r4, r2
 800109e:	2904      	cmp	r1, #4
 80010a0:	d195      	bne.n	8000fce <__aeabi_ddiv+0x4ea>
 80010a2:	0022      	movs	r2, r4
 80010a4:	075f      	lsls	r7, r3, #29
 80010a6:	025b      	lsls	r3, r3, #9
 80010a8:	0b1b      	lsrs	r3, r3, #12
 80010aa:	08d2      	lsrs	r2, r2, #3
 80010ac:	4317      	orrs	r7, r2
 80010ae:	2200      	movs	r2, #0
 80010b0:	e5a6      	b.n	8000c00 <__aeabi_ddiv+0x11c>
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	4659      	mov	r1, fp
 80010b6:	031b      	lsls	r3, r3, #12
 80010b8:	430b      	orrs	r3, r1
 80010ba:	031b      	lsls	r3, r3, #12
 80010bc:	0017      	movs	r7, r2
 80010be:	0b1b      	lsrs	r3, r3, #12
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <__aeabi_ddiv+0x5f8>)
 80010c2:	e59d      	b.n	8000c00 <__aeabi_ddiv+0x11c>
 80010c4:	42bd      	cmp	r5, r7
 80010c6:	d8b2      	bhi.n	800102e <__aeabi_ddiv+0x54a>
 80010c8:	469b      	mov	fp, r3
 80010ca:	2400      	movs	r4, #0
 80010cc:	e6bf      	b.n	8000e4e <__aeabi_ddiv+0x36a>
 80010ce:	4580      	cmp	r8, r0
 80010d0:	d3b9      	bcc.n	8001046 <__aeabi_ddiv+0x562>
 80010d2:	001a      	movs	r2, r3
 80010d4:	e7c3      	b.n	800105e <__aeabi_ddiv+0x57a>
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	000007ff 	.word	0x000007ff
 80010e0:	0000041e 	.word	0x0000041e
 80010e4:	0000043e 	.word	0x0000043e

080010e8 <__eqdf2>:
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	464f      	mov	r7, r9
 80010ec:	4646      	mov	r6, r8
 80010ee:	46d6      	mov	lr, sl
 80010f0:	4684      	mov	ip, r0
 80010f2:	b5c0      	push	{r6, r7, lr}
 80010f4:	4680      	mov	r8, r0
 80010f6:	4e19      	ldr	r6, [pc, #100]	; (800115c <__eqdf2+0x74>)
 80010f8:	0318      	lsls	r0, r3, #12
 80010fa:	030f      	lsls	r7, r1, #12
 80010fc:	004d      	lsls	r5, r1, #1
 80010fe:	0b00      	lsrs	r0, r0, #12
 8001100:	005c      	lsls	r4, r3, #1
 8001102:	4682      	mov	sl, r0
 8001104:	0b3f      	lsrs	r7, r7, #12
 8001106:	0d6d      	lsrs	r5, r5, #21
 8001108:	0fc9      	lsrs	r1, r1, #31
 800110a:	4691      	mov	r9, r2
 800110c:	0d64      	lsrs	r4, r4, #21
 800110e:	0fdb      	lsrs	r3, r3, #31
 8001110:	2001      	movs	r0, #1
 8001112:	42b5      	cmp	r5, r6
 8001114:	d00a      	beq.n	800112c <__eqdf2+0x44>
 8001116:	42b4      	cmp	r4, r6
 8001118:	d003      	beq.n	8001122 <__eqdf2+0x3a>
 800111a:	42a5      	cmp	r5, r4
 800111c:	d101      	bne.n	8001122 <__eqdf2+0x3a>
 800111e:	4557      	cmp	r7, sl
 8001120:	d00c      	beq.n	800113c <__eqdf2+0x54>
 8001122:	bc1c      	pop	{r2, r3, r4}
 8001124:	4690      	mov	r8, r2
 8001126:	4699      	mov	r9, r3
 8001128:	46a2      	mov	sl, r4
 800112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112c:	4666      	mov	r6, ip
 800112e:	433e      	orrs	r6, r7
 8001130:	d1f7      	bne.n	8001122 <__eqdf2+0x3a>
 8001132:	42ac      	cmp	r4, r5
 8001134:	d1f5      	bne.n	8001122 <__eqdf2+0x3a>
 8001136:	4654      	mov	r4, sl
 8001138:	4314      	orrs	r4, r2
 800113a:	d1f2      	bne.n	8001122 <__eqdf2+0x3a>
 800113c:	2001      	movs	r0, #1
 800113e:	45c8      	cmp	r8, r9
 8001140:	d1ef      	bne.n	8001122 <__eqdf2+0x3a>
 8001142:	4299      	cmp	r1, r3
 8001144:	d007      	beq.n	8001156 <__eqdf2+0x6e>
 8001146:	2d00      	cmp	r5, #0
 8001148:	d1eb      	bne.n	8001122 <__eqdf2+0x3a>
 800114a:	4663      	mov	r3, ip
 800114c:	431f      	orrs	r7, r3
 800114e:	0038      	movs	r0, r7
 8001150:	1e47      	subs	r7, r0, #1
 8001152:	41b8      	sbcs	r0, r7
 8001154:	e7e5      	b.n	8001122 <__eqdf2+0x3a>
 8001156:	2000      	movs	r0, #0
 8001158:	e7e3      	b.n	8001122 <__eqdf2+0x3a>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	000007ff 	.word	0x000007ff

08001160 <__gedf2>:
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	464f      	mov	r7, r9
 8001164:	4646      	mov	r6, r8
 8001166:	46d6      	mov	lr, sl
 8001168:	004d      	lsls	r5, r1, #1
 800116a:	b5c0      	push	{r6, r7, lr}
 800116c:	030e      	lsls	r6, r1, #12
 800116e:	0fc9      	lsrs	r1, r1, #31
 8001170:	468a      	mov	sl, r1
 8001172:	492c      	ldr	r1, [pc, #176]	; (8001224 <__gedf2+0xc4>)
 8001174:	031f      	lsls	r7, r3, #12
 8001176:	005c      	lsls	r4, r3, #1
 8001178:	4680      	mov	r8, r0
 800117a:	0b36      	lsrs	r6, r6, #12
 800117c:	0d6d      	lsrs	r5, r5, #21
 800117e:	4691      	mov	r9, r2
 8001180:	0b3f      	lsrs	r7, r7, #12
 8001182:	0d64      	lsrs	r4, r4, #21
 8001184:	0fdb      	lsrs	r3, r3, #31
 8001186:	428d      	cmp	r5, r1
 8001188:	d01e      	beq.n	80011c8 <__gedf2+0x68>
 800118a:	428c      	cmp	r4, r1
 800118c:	d016      	beq.n	80011bc <__gedf2+0x5c>
 800118e:	2d00      	cmp	r5, #0
 8001190:	d11e      	bne.n	80011d0 <__gedf2+0x70>
 8001192:	4330      	orrs	r0, r6
 8001194:	4684      	mov	ip, r0
 8001196:	2c00      	cmp	r4, #0
 8001198:	d101      	bne.n	800119e <__gedf2+0x3e>
 800119a:	433a      	orrs	r2, r7
 800119c:	d023      	beq.n	80011e6 <__gedf2+0x86>
 800119e:	4662      	mov	r2, ip
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d01a      	beq.n	80011da <__gedf2+0x7a>
 80011a4:	459a      	cmp	sl, r3
 80011a6:	d029      	beq.n	80011fc <__gedf2+0x9c>
 80011a8:	4651      	mov	r1, sl
 80011aa:	2002      	movs	r0, #2
 80011ac:	3901      	subs	r1, #1
 80011ae:	4008      	ands	r0, r1
 80011b0:	3801      	subs	r0, #1
 80011b2:	bc1c      	pop	{r2, r3, r4}
 80011b4:	4690      	mov	r8, r2
 80011b6:	4699      	mov	r9, r3
 80011b8:	46a2      	mov	sl, r4
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011bc:	0039      	movs	r1, r7
 80011be:	4311      	orrs	r1, r2
 80011c0:	d0e5      	beq.n	800118e <__gedf2+0x2e>
 80011c2:	2002      	movs	r0, #2
 80011c4:	4240      	negs	r0, r0
 80011c6:	e7f4      	b.n	80011b2 <__gedf2+0x52>
 80011c8:	4330      	orrs	r0, r6
 80011ca:	d1fa      	bne.n	80011c2 <__gedf2+0x62>
 80011cc:	42ac      	cmp	r4, r5
 80011ce:	d00f      	beq.n	80011f0 <__gedf2+0x90>
 80011d0:	2c00      	cmp	r4, #0
 80011d2:	d10f      	bne.n	80011f4 <__gedf2+0x94>
 80011d4:	433a      	orrs	r2, r7
 80011d6:	d0e7      	beq.n	80011a8 <__gedf2+0x48>
 80011d8:	e00c      	b.n	80011f4 <__gedf2+0x94>
 80011da:	2201      	movs	r2, #1
 80011dc:	3b01      	subs	r3, #1
 80011de:	4393      	bics	r3, r2
 80011e0:	0018      	movs	r0, r3
 80011e2:	3001      	adds	r0, #1
 80011e4:	e7e5      	b.n	80011b2 <__gedf2+0x52>
 80011e6:	4663      	mov	r3, ip
 80011e8:	2000      	movs	r0, #0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0e1      	beq.n	80011b2 <__gedf2+0x52>
 80011ee:	e7db      	b.n	80011a8 <__gedf2+0x48>
 80011f0:	433a      	orrs	r2, r7
 80011f2:	d1e6      	bne.n	80011c2 <__gedf2+0x62>
 80011f4:	459a      	cmp	sl, r3
 80011f6:	d1d7      	bne.n	80011a8 <__gedf2+0x48>
 80011f8:	42a5      	cmp	r5, r4
 80011fa:	dcd5      	bgt.n	80011a8 <__gedf2+0x48>
 80011fc:	42a5      	cmp	r5, r4
 80011fe:	db05      	blt.n	800120c <__gedf2+0xac>
 8001200:	42be      	cmp	r6, r7
 8001202:	d8d1      	bhi.n	80011a8 <__gedf2+0x48>
 8001204:	d008      	beq.n	8001218 <__gedf2+0xb8>
 8001206:	2000      	movs	r0, #0
 8001208:	42be      	cmp	r6, r7
 800120a:	d2d2      	bcs.n	80011b2 <__gedf2+0x52>
 800120c:	4650      	mov	r0, sl
 800120e:	2301      	movs	r3, #1
 8001210:	3801      	subs	r0, #1
 8001212:	4398      	bics	r0, r3
 8001214:	3001      	adds	r0, #1
 8001216:	e7cc      	b.n	80011b2 <__gedf2+0x52>
 8001218:	45c8      	cmp	r8, r9
 800121a:	d8c5      	bhi.n	80011a8 <__gedf2+0x48>
 800121c:	2000      	movs	r0, #0
 800121e:	45c8      	cmp	r8, r9
 8001220:	d3f4      	bcc.n	800120c <__gedf2+0xac>
 8001222:	e7c6      	b.n	80011b2 <__gedf2+0x52>
 8001224:	000007ff 	.word	0x000007ff

08001228 <__ledf2>:
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	464f      	mov	r7, r9
 800122c:	4646      	mov	r6, r8
 800122e:	46d6      	mov	lr, sl
 8001230:	004d      	lsls	r5, r1, #1
 8001232:	b5c0      	push	{r6, r7, lr}
 8001234:	030e      	lsls	r6, r1, #12
 8001236:	0fc9      	lsrs	r1, r1, #31
 8001238:	468a      	mov	sl, r1
 800123a:	492e      	ldr	r1, [pc, #184]	; (80012f4 <__ledf2+0xcc>)
 800123c:	031f      	lsls	r7, r3, #12
 800123e:	005c      	lsls	r4, r3, #1
 8001240:	4680      	mov	r8, r0
 8001242:	0b36      	lsrs	r6, r6, #12
 8001244:	0d6d      	lsrs	r5, r5, #21
 8001246:	4691      	mov	r9, r2
 8001248:	0b3f      	lsrs	r7, r7, #12
 800124a:	0d64      	lsrs	r4, r4, #21
 800124c:	0fdb      	lsrs	r3, r3, #31
 800124e:	428d      	cmp	r5, r1
 8001250:	d018      	beq.n	8001284 <__ledf2+0x5c>
 8001252:	428c      	cmp	r4, r1
 8001254:	d011      	beq.n	800127a <__ledf2+0x52>
 8001256:	2d00      	cmp	r5, #0
 8001258:	d118      	bne.n	800128c <__ledf2+0x64>
 800125a:	4330      	orrs	r0, r6
 800125c:	4684      	mov	ip, r0
 800125e:	2c00      	cmp	r4, #0
 8001260:	d11e      	bne.n	80012a0 <__ledf2+0x78>
 8001262:	433a      	orrs	r2, r7
 8001264:	d11c      	bne.n	80012a0 <__ledf2+0x78>
 8001266:	4663      	mov	r3, ip
 8001268:	2000      	movs	r0, #0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d030      	beq.n	80012d0 <__ledf2+0xa8>
 800126e:	4651      	mov	r1, sl
 8001270:	2002      	movs	r0, #2
 8001272:	3901      	subs	r1, #1
 8001274:	4008      	ands	r0, r1
 8001276:	3801      	subs	r0, #1
 8001278:	e02a      	b.n	80012d0 <__ledf2+0xa8>
 800127a:	0039      	movs	r1, r7
 800127c:	4311      	orrs	r1, r2
 800127e:	d0ea      	beq.n	8001256 <__ledf2+0x2e>
 8001280:	2002      	movs	r0, #2
 8001282:	e025      	b.n	80012d0 <__ledf2+0xa8>
 8001284:	4330      	orrs	r0, r6
 8001286:	d1fb      	bne.n	8001280 <__ledf2+0x58>
 8001288:	42ac      	cmp	r4, r5
 800128a:	d026      	beq.n	80012da <__ledf2+0xb2>
 800128c:	2c00      	cmp	r4, #0
 800128e:	d126      	bne.n	80012de <__ledf2+0xb6>
 8001290:	433a      	orrs	r2, r7
 8001292:	d124      	bne.n	80012de <__ledf2+0xb6>
 8001294:	4651      	mov	r1, sl
 8001296:	2002      	movs	r0, #2
 8001298:	3901      	subs	r1, #1
 800129a:	4008      	ands	r0, r1
 800129c:	3801      	subs	r0, #1
 800129e:	e017      	b.n	80012d0 <__ledf2+0xa8>
 80012a0:	4662      	mov	r2, ip
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d00f      	beq.n	80012c6 <__ledf2+0x9e>
 80012a6:	459a      	cmp	sl, r3
 80012a8:	d1e1      	bne.n	800126e <__ledf2+0x46>
 80012aa:	42a5      	cmp	r5, r4
 80012ac:	db05      	blt.n	80012ba <__ledf2+0x92>
 80012ae:	42be      	cmp	r6, r7
 80012b0:	d8dd      	bhi.n	800126e <__ledf2+0x46>
 80012b2:	d019      	beq.n	80012e8 <__ledf2+0xc0>
 80012b4:	2000      	movs	r0, #0
 80012b6:	42be      	cmp	r6, r7
 80012b8:	d20a      	bcs.n	80012d0 <__ledf2+0xa8>
 80012ba:	4650      	mov	r0, sl
 80012bc:	2301      	movs	r3, #1
 80012be:	3801      	subs	r0, #1
 80012c0:	4398      	bics	r0, r3
 80012c2:	3001      	adds	r0, #1
 80012c4:	e004      	b.n	80012d0 <__ledf2+0xa8>
 80012c6:	2201      	movs	r2, #1
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4393      	bics	r3, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	3001      	adds	r0, #1
 80012d0:	bc1c      	pop	{r2, r3, r4}
 80012d2:	4690      	mov	r8, r2
 80012d4:	4699      	mov	r9, r3
 80012d6:	46a2      	mov	sl, r4
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	433a      	orrs	r2, r7
 80012dc:	d1d0      	bne.n	8001280 <__ledf2+0x58>
 80012de:	459a      	cmp	sl, r3
 80012e0:	d1c5      	bne.n	800126e <__ledf2+0x46>
 80012e2:	42a5      	cmp	r5, r4
 80012e4:	dcc3      	bgt.n	800126e <__ledf2+0x46>
 80012e6:	e7e0      	b.n	80012aa <__ledf2+0x82>
 80012e8:	45c8      	cmp	r8, r9
 80012ea:	d8c0      	bhi.n	800126e <__ledf2+0x46>
 80012ec:	2000      	movs	r0, #0
 80012ee:	45c8      	cmp	r8, r9
 80012f0:	d3e3      	bcc.n	80012ba <__ledf2+0x92>
 80012f2:	e7ed      	b.n	80012d0 <__ledf2+0xa8>
 80012f4:	000007ff 	.word	0x000007ff

080012f8 <__aeabi_dmul>:
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	4657      	mov	r7, sl
 80012fc:	46de      	mov	lr, fp
 80012fe:	464e      	mov	r6, r9
 8001300:	4645      	mov	r5, r8
 8001302:	b5e0      	push	{r5, r6, r7, lr}
 8001304:	4683      	mov	fp, r0
 8001306:	0006      	movs	r6, r0
 8001308:	030f      	lsls	r7, r1, #12
 800130a:	0048      	lsls	r0, r1, #1
 800130c:	b087      	sub	sp, #28
 800130e:	4692      	mov	sl, r2
 8001310:	001d      	movs	r5, r3
 8001312:	0b3f      	lsrs	r7, r7, #12
 8001314:	0d40      	lsrs	r0, r0, #21
 8001316:	0fcc      	lsrs	r4, r1, #31
 8001318:	2800      	cmp	r0, #0
 800131a:	d100      	bne.n	800131e <__aeabi_dmul+0x26>
 800131c:	e06f      	b.n	80013fe <__aeabi_dmul+0x106>
 800131e:	4bde      	ldr	r3, [pc, #888]	; (8001698 <__aeabi_dmul+0x3a0>)
 8001320:	4298      	cmp	r0, r3
 8001322:	d038      	beq.n	8001396 <__aeabi_dmul+0x9e>
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	00ff      	lsls	r7, r7, #3
 8001328:	041b      	lsls	r3, r3, #16
 800132a:	431f      	orrs	r7, r3
 800132c:	0f73      	lsrs	r3, r6, #29
 800132e:	433b      	orrs	r3, r7
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	4bda      	ldr	r3, [pc, #872]	; (800169c <__aeabi_dmul+0x3a4>)
 8001334:	2700      	movs	r7, #0
 8001336:	4699      	mov	r9, r3
 8001338:	2300      	movs	r3, #0
 800133a:	469b      	mov	fp, r3
 800133c:	00f6      	lsls	r6, r6, #3
 800133e:	4481      	add	r9, r0
 8001340:	032b      	lsls	r3, r5, #12
 8001342:	0069      	lsls	r1, r5, #1
 8001344:	0b1b      	lsrs	r3, r3, #12
 8001346:	4652      	mov	r2, sl
 8001348:	4698      	mov	r8, r3
 800134a:	0d49      	lsrs	r1, r1, #21
 800134c:	0fed      	lsrs	r5, r5, #31
 800134e:	2900      	cmp	r1, #0
 8001350:	d100      	bne.n	8001354 <__aeabi_dmul+0x5c>
 8001352:	e085      	b.n	8001460 <__aeabi_dmul+0x168>
 8001354:	4bd0      	ldr	r3, [pc, #832]	; (8001698 <__aeabi_dmul+0x3a0>)
 8001356:	4299      	cmp	r1, r3
 8001358:	d100      	bne.n	800135c <__aeabi_dmul+0x64>
 800135a:	e073      	b.n	8001444 <__aeabi_dmul+0x14c>
 800135c:	4643      	mov	r3, r8
 800135e:	00da      	lsls	r2, r3, #3
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	041b      	lsls	r3, r3, #16
 8001364:	4313      	orrs	r3, r2
 8001366:	4652      	mov	r2, sl
 8001368:	48cc      	ldr	r0, [pc, #816]	; (800169c <__aeabi_dmul+0x3a4>)
 800136a:	0f52      	lsrs	r2, r2, #29
 800136c:	4684      	mov	ip, r0
 800136e:	4313      	orrs	r3, r2
 8001370:	4652      	mov	r2, sl
 8001372:	2000      	movs	r0, #0
 8001374:	4461      	add	r1, ip
 8001376:	00d2      	lsls	r2, r2, #3
 8001378:	4489      	add	r9, r1
 800137a:	0021      	movs	r1, r4
 800137c:	4069      	eors	r1, r5
 800137e:	9100      	str	r1, [sp, #0]
 8001380:	468c      	mov	ip, r1
 8001382:	2101      	movs	r1, #1
 8001384:	4449      	add	r1, r9
 8001386:	468a      	mov	sl, r1
 8001388:	2f0f      	cmp	r7, #15
 800138a:	d900      	bls.n	800138e <__aeabi_dmul+0x96>
 800138c:	e090      	b.n	80014b0 <__aeabi_dmul+0x1b8>
 800138e:	49c4      	ldr	r1, [pc, #784]	; (80016a0 <__aeabi_dmul+0x3a8>)
 8001390:	00bf      	lsls	r7, r7, #2
 8001392:	59cf      	ldr	r7, [r1, r7]
 8001394:	46bf      	mov	pc, r7
 8001396:	465b      	mov	r3, fp
 8001398:	433b      	orrs	r3, r7
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	d000      	beq.n	80013a0 <__aeabi_dmul+0xa8>
 800139e:	e16a      	b.n	8001676 <__aeabi_dmul+0x37e>
 80013a0:	2302      	movs	r3, #2
 80013a2:	2708      	movs	r7, #8
 80013a4:	2600      	movs	r6, #0
 80013a6:	4681      	mov	r9, r0
 80013a8:	469b      	mov	fp, r3
 80013aa:	e7c9      	b.n	8001340 <__aeabi_dmul+0x48>
 80013ac:	0032      	movs	r2, r6
 80013ae:	4658      	mov	r0, fp
 80013b0:	9b01      	ldr	r3, [sp, #4]
 80013b2:	4661      	mov	r1, ip
 80013b4:	9100      	str	r1, [sp, #0]
 80013b6:	2802      	cmp	r0, #2
 80013b8:	d100      	bne.n	80013bc <__aeabi_dmul+0xc4>
 80013ba:	e075      	b.n	80014a8 <__aeabi_dmul+0x1b0>
 80013bc:	2803      	cmp	r0, #3
 80013be:	d100      	bne.n	80013c2 <__aeabi_dmul+0xca>
 80013c0:	e1fe      	b.n	80017c0 <__aeabi_dmul+0x4c8>
 80013c2:	2801      	cmp	r0, #1
 80013c4:	d000      	beq.n	80013c8 <__aeabi_dmul+0xd0>
 80013c6:	e12c      	b.n	8001622 <__aeabi_dmul+0x32a>
 80013c8:	2300      	movs	r3, #0
 80013ca:	2700      	movs	r7, #0
 80013cc:	2600      	movs	r6, #0
 80013ce:	2500      	movs	r5, #0
 80013d0:	033f      	lsls	r7, r7, #12
 80013d2:	0d2a      	lsrs	r2, r5, #20
 80013d4:	0b3f      	lsrs	r7, r7, #12
 80013d6:	48b3      	ldr	r0, [pc, #716]	; (80016a4 <__aeabi_dmul+0x3ac>)
 80013d8:	0512      	lsls	r2, r2, #20
 80013da:	433a      	orrs	r2, r7
 80013dc:	4002      	ands	r2, r0
 80013de:	051b      	lsls	r3, r3, #20
 80013e0:	4313      	orrs	r3, r2
 80013e2:	9a00      	ldr	r2, [sp, #0]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	07d1      	lsls	r1, r2, #31
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	430b      	orrs	r3, r1
 80013ec:	0030      	movs	r0, r6
 80013ee:	0019      	movs	r1, r3
 80013f0:	b007      	add	sp, #28
 80013f2:	bc3c      	pop	{r2, r3, r4, r5}
 80013f4:	4690      	mov	r8, r2
 80013f6:	4699      	mov	r9, r3
 80013f8:	46a2      	mov	sl, r4
 80013fa:	46ab      	mov	fp, r5
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fe:	465b      	mov	r3, fp
 8001400:	433b      	orrs	r3, r7
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	d100      	bne.n	8001408 <__aeabi_dmul+0x110>
 8001406:	e12f      	b.n	8001668 <__aeabi_dmul+0x370>
 8001408:	2f00      	cmp	r7, #0
 800140a:	d100      	bne.n	800140e <__aeabi_dmul+0x116>
 800140c:	e1a5      	b.n	800175a <__aeabi_dmul+0x462>
 800140e:	0038      	movs	r0, r7
 8001410:	f000 fdce 	bl	8001fb0 <__clzsi2>
 8001414:	0003      	movs	r3, r0
 8001416:	3b0b      	subs	r3, #11
 8001418:	2b1c      	cmp	r3, #28
 800141a:	dd00      	ble.n	800141e <__aeabi_dmul+0x126>
 800141c:	e196      	b.n	800174c <__aeabi_dmul+0x454>
 800141e:	221d      	movs	r2, #29
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	465a      	mov	r2, fp
 8001424:	0001      	movs	r1, r0
 8001426:	40da      	lsrs	r2, r3
 8001428:	465e      	mov	r6, fp
 800142a:	3908      	subs	r1, #8
 800142c:	408f      	lsls	r7, r1
 800142e:	0013      	movs	r3, r2
 8001430:	408e      	lsls	r6, r1
 8001432:	433b      	orrs	r3, r7
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	4b9c      	ldr	r3, [pc, #624]	; (80016a8 <__aeabi_dmul+0x3b0>)
 8001438:	2700      	movs	r7, #0
 800143a:	1a1b      	subs	r3, r3, r0
 800143c:	4699      	mov	r9, r3
 800143e:	2300      	movs	r3, #0
 8001440:	469b      	mov	fp, r3
 8001442:	e77d      	b.n	8001340 <__aeabi_dmul+0x48>
 8001444:	4641      	mov	r1, r8
 8001446:	4653      	mov	r3, sl
 8001448:	430b      	orrs	r3, r1
 800144a:	4993      	ldr	r1, [pc, #588]	; (8001698 <__aeabi_dmul+0x3a0>)
 800144c:	468c      	mov	ip, r1
 800144e:	44e1      	add	r9, ip
 8001450:	2b00      	cmp	r3, #0
 8001452:	d000      	beq.n	8001456 <__aeabi_dmul+0x15e>
 8001454:	e11a      	b.n	800168c <__aeabi_dmul+0x394>
 8001456:	2202      	movs	r2, #2
 8001458:	2002      	movs	r0, #2
 800145a:	4317      	orrs	r7, r2
 800145c:	2200      	movs	r2, #0
 800145e:	e78c      	b.n	800137a <__aeabi_dmul+0x82>
 8001460:	4313      	orrs	r3, r2
 8001462:	d100      	bne.n	8001466 <__aeabi_dmul+0x16e>
 8001464:	e10d      	b.n	8001682 <__aeabi_dmul+0x38a>
 8001466:	4643      	mov	r3, r8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d100      	bne.n	800146e <__aeabi_dmul+0x176>
 800146c:	e181      	b.n	8001772 <__aeabi_dmul+0x47a>
 800146e:	4640      	mov	r0, r8
 8001470:	f000 fd9e 	bl	8001fb0 <__clzsi2>
 8001474:	0002      	movs	r2, r0
 8001476:	3a0b      	subs	r2, #11
 8001478:	2a1c      	cmp	r2, #28
 800147a:	dd00      	ble.n	800147e <__aeabi_dmul+0x186>
 800147c:	e172      	b.n	8001764 <__aeabi_dmul+0x46c>
 800147e:	0001      	movs	r1, r0
 8001480:	4643      	mov	r3, r8
 8001482:	3908      	subs	r1, #8
 8001484:	408b      	lsls	r3, r1
 8001486:	4698      	mov	r8, r3
 8001488:	231d      	movs	r3, #29
 800148a:	1a9a      	subs	r2, r3, r2
 800148c:	4653      	mov	r3, sl
 800148e:	40d3      	lsrs	r3, r2
 8001490:	001a      	movs	r2, r3
 8001492:	4643      	mov	r3, r8
 8001494:	4313      	orrs	r3, r2
 8001496:	4652      	mov	r2, sl
 8001498:	408a      	lsls	r2, r1
 800149a:	4649      	mov	r1, r9
 800149c:	1a08      	subs	r0, r1, r0
 800149e:	4982      	ldr	r1, [pc, #520]	; (80016a8 <__aeabi_dmul+0x3b0>)
 80014a0:	4689      	mov	r9, r1
 80014a2:	4481      	add	r9, r0
 80014a4:	2000      	movs	r0, #0
 80014a6:	e768      	b.n	800137a <__aeabi_dmul+0x82>
 80014a8:	4b7b      	ldr	r3, [pc, #492]	; (8001698 <__aeabi_dmul+0x3a0>)
 80014aa:	2700      	movs	r7, #0
 80014ac:	2600      	movs	r6, #0
 80014ae:	e78e      	b.n	80013ce <__aeabi_dmul+0xd6>
 80014b0:	0c14      	lsrs	r4, r2, #16
 80014b2:	0412      	lsls	r2, r2, #16
 80014b4:	0c12      	lsrs	r2, r2, #16
 80014b6:	0011      	movs	r1, r2
 80014b8:	0c37      	lsrs	r7, r6, #16
 80014ba:	0436      	lsls	r6, r6, #16
 80014bc:	0c35      	lsrs	r5, r6, #16
 80014be:	4379      	muls	r1, r7
 80014c0:	0028      	movs	r0, r5
 80014c2:	468c      	mov	ip, r1
 80014c4:	002e      	movs	r6, r5
 80014c6:	4360      	muls	r0, r4
 80014c8:	4460      	add	r0, ip
 80014ca:	4683      	mov	fp, r0
 80014cc:	4356      	muls	r6, r2
 80014ce:	0021      	movs	r1, r4
 80014d0:	0c30      	lsrs	r0, r6, #16
 80014d2:	4680      	mov	r8, r0
 80014d4:	4658      	mov	r0, fp
 80014d6:	4379      	muls	r1, r7
 80014d8:	4440      	add	r0, r8
 80014da:	9102      	str	r1, [sp, #8]
 80014dc:	4584      	cmp	ip, r0
 80014de:	d906      	bls.n	80014ee <__aeabi_dmul+0x1f6>
 80014e0:	4688      	mov	r8, r1
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	0249      	lsls	r1, r1, #9
 80014e6:	468c      	mov	ip, r1
 80014e8:	44e0      	add	r8, ip
 80014ea:	4641      	mov	r1, r8
 80014ec:	9102      	str	r1, [sp, #8]
 80014ee:	0436      	lsls	r6, r6, #16
 80014f0:	0c01      	lsrs	r1, r0, #16
 80014f2:	0c36      	lsrs	r6, r6, #16
 80014f4:	0400      	lsls	r0, r0, #16
 80014f6:	468b      	mov	fp, r1
 80014f8:	1981      	adds	r1, r0, r6
 80014fa:	0c1e      	lsrs	r6, r3, #16
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	0c1b      	lsrs	r3, r3, #16
 8001500:	9103      	str	r1, [sp, #12]
 8001502:	0019      	movs	r1, r3
 8001504:	4379      	muls	r1, r7
 8001506:	468c      	mov	ip, r1
 8001508:	0028      	movs	r0, r5
 800150a:	4375      	muls	r5, r6
 800150c:	4465      	add	r5, ip
 800150e:	46a8      	mov	r8, r5
 8001510:	4358      	muls	r0, r3
 8001512:	0c05      	lsrs	r5, r0, #16
 8001514:	4445      	add	r5, r8
 8001516:	4377      	muls	r7, r6
 8001518:	42a9      	cmp	r1, r5
 800151a:	d903      	bls.n	8001524 <__aeabi_dmul+0x22c>
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	0249      	lsls	r1, r1, #9
 8001520:	468c      	mov	ip, r1
 8001522:	4467      	add	r7, ip
 8001524:	0c29      	lsrs	r1, r5, #16
 8001526:	468c      	mov	ip, r1
 8001528:	0039      	movs	r1, r7
 800152a:	0400      	lsls	r0, r0, #16
 800152c:	0c00      	lsrs	r0, r0, #16
 800152e:	042d      	lsls	r5, r5, #16
 8001530:	182d      	adds	r5, r5, r0
 8001532:	4461      	add	r1, ip
 8001534:	44ab      	add	fp, r5
 8001536:	9105      	str	r1, [sp, #20]
 8001538:	4659      	mov	r1, fp
 800153a:	9104      	str	r1, [sp, #16]
 800153c:	9901      	ldr	r1, [sp, #4]
 800153e:	040f      	lsls	r7, r1, #16
 8001540:	0c3f      	lsrs	r7, r7, #16
 8001542:	0c08      	lsrs	r0, r1, #16
 8001544:	0039      	movs	r1, r7
 8001546:	4351      	muls	r1, r2
 8001548:	4342      	muls	r2, r0
 800154a:	4690      	mov	r8, r2
 800154c:	0002      	movs	r2, r0
 800154e:	468c      	mov	ip, r1
 8001550:	0c09      	lsrs	r1, r1, #16
 8001552:	468b      	mov	fp, r1
 8001554:	4362      	muls	r2, r4
 8001556:	437c      	muls	r4, r7
 8001558:	4444      	add	r4, r8
 800155a:	445c      	add	r4, fp
 800155c:	45a0      	cmp	r8, r4
 800155e:	d903      	bls.n	8001568 <__aeabi_dmul+0x270>
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	0249      	lsls	r1, r1, #9
 8001564:	4688      	mov	r8, r1
 8001566:	4442      	add	r2, r8
 8001568:	0c21      	lsrs	r1, r4, #16
 800156a:	4688      	mov	r8, r1
 800156c:	4661      	mov	r1, ip
 800156e:	0409      	lsls	r1, r1, #16
 8001570:	0c09      	lsrs	r1, r1, #16
 8001572:	468c      	mov	ip, r1
 8001574:	0039      	movs	r1, r7
 8001576:	4359      	muls	r1, r3
 8001578:	4343      	muls	r3, r0
 800157a:	4370      	muls	r0, r6
 800157c:	437e      	muls	r6, r7
 800157e:	0c0f      	lsrs	r7, r1, #16
 8001580:	18f6      	adds	r6, r6, r3
 8001582:	0424      	lsls	r4, r4, #16
 8001584:	19be      	adds	r6, r7, r6
 8001586:	4464      	add	r4, ip
 8001588:	4442      	add	r2, r8
 800158a:	468c      	mov	ip, r1
 800158c:	42b3      	cmp	r3, r6
 800158e:	d903      	bls.n	8001598 <__aeabi_dmul+0x2a0>
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	4698      	mov	r8, r3
 8001596:	4440      	add	r0, r8
 8001598:	9b02      	ldr	r3, [sp, #8]
 800159a:	4661      	mov	r1, ip
 800159c:	4698      	mov	r8, r3
 800159e:	9b04      	ldr	r3, [sp, #16]
 80015a0:	0437      	lsls	r7, r6, #16
 80015a2:	4443      	add	r3, r8
 80015a4:	469b      	mov	fp, r3
 80015a6:	45ab      	cmp	fp, r5
 80015a8:	41ad      	sbcs	r5, r5
 80015aa:	426b      	negs	r3, r5
 80015ac:	040d      	lsls	r5, r1, #16
 80015ae:	9905      	ldr	r1, [sp, #20]
 80015b0:	0c2d      	lsrs	r5, r5, #16
 80015b2:	468c      	mov	ip, r1
 80015b4:	197f      	adds	r7, r7, r5
 80015b6:	4467      	add	r7, ip
 80015b8:	18fd      	adds	r5, r7, r3
 80015ba:	46a8      	mov	r8, r5
 80015bc:	465d      	mov	r5, fp
 80015be:	192d      	adds	r5, r5, r4
 80015c0:	42a5      	cmp	r5, r4
 80015c2:	41a4      	sbcs	r4, r4
 80015c4:	4693      	mov	fp, r2
 80015c6:	4264      	negs	r4, r4
 80015c8:	46a4      	mov	ip, r4
 80015ca:	44c3      	add	fp, r8
 80015cc:	44dc      	add	ip, fp
 80015ce:	428f      	cmp	r7, r1
 80015d0:	41bf      	sbcs	r7, r7
 80015d2:	4598      	cmp	r8, r3
 80015d4:	419b      	sbcs	r3, r3
 80015d6:	4593      	cmp	fp, r2
 80015d8:	4192      	sbcs	r2, r2
 80015da:	45a4      	cmp	ip, r4
 80015dc:	41a4      	sbcs	r4, r4
 80015de:	425b      	negs	r3, r3
 80015e0:	427f      	negs	r7, r7
 80015e2:	431f      	orrs	r7, r3
 80015e4:	0c36      	lsrs	r6, r6, #16
 80015e6:	4252      	negs	r2, r2
 80015e8:	4264      	negs	r4, r4
 80015ea:	19bf      	adds	r7, r7, r6
 80015ec:	4322      	orrs	r2, r4
 80015ee:	18bf      	adds	r7, r7, r2
 80015f0:	4662      	mov	r2, ip
 80015f2:	1838      	adds	r0, r7, r0
 80015f4:	0243      	lsls	r3, r0, #9
 80015f6:	0dd2      	lsrs	r2, r2, #23
 80015f8:	9903      	ldr	r1, [sp, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	026a      	lsls	r2, r5, #9
 80015fe:	430a      	orrs	r2, r1
 8001600:	1e50      	subs	r0, r2, #1
 8001602:	4182      	sbcs	r2, r0
 8001604:	4661      	mov	r1, ip
 8001606:	0ded      	lsrs	r5, r5, #23
 8001608:	432a      	orrs	r2, r5
 800160a:	024e      	lsls	r6, r1, #9
 800160c:	4332      	orrs	r2, r6
 800160e:	01d9      	lsls	r1, r3, #7
 8001610:	d400      	bmi.n	8001614 <__aeabi_dmul+0x31c>
 8001612:	e0b3      	b.n	800177c <__aeabi_dmul+0x484>
 8001614:	2601      	movs	r6, #1
 8001616:	0850      	lsrs	r0, r2, #1
 8001618:	4032      	ands	r2, r6
 800161a:	4302      	orrs	r2, r0
 800161c:	07de      	lsls	r6, r3, #31
 800161e:	4332      	orrs	r2, r6
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	4c22      	ldr	r4, [pc, #136]	; (80016ac <__aeabi_dmul+0x3b4>)
 8001624:	4454      	add	r4, sl
 8001626:	2c00      	cmp	r4, #0
 8001628:	dd62      	ble.n	80016f0 <__aeabi_dmul+0x3f8>
 800162a:	0751      	lsls	r1, r2, #29
 800162c:	d009      	beq.n	8001642 <__aeabi_dmul+0x34a>
 800162e:	200f      	movs	r0, #15
 8001630:	4010      	ands	r0, r2
 8001632:	2804      	cmp	r0, #4
 8001634:	d005      	beq.n	8001642 <__aeabi_dmul+0x34a>
 8001636:	1d10      	adds	r0, r2, #4
 8001638:	4290      	cmp	r0, r2
 800163a:	4192      	sbcs	r2, r2
 800163c:	4252      	negs	r2, r2
 800163e:	189b      	adds	r3, r3, r2
 8001640:	0002      	movs	r2, r0
 8001642:	01d9      	lsls	r1, r3, #7
 8001644:	d504      	bpl.n	8001650 <__aeabi_dmul+0x358>
 8001646:	2480      	movs	r4, #128	; 0x80
 8001648:	4819      	ldr	r0, [pc, #100]	; (80016b0 <__aeabi_dmul+0x3b8>)
 800164a:	00e4      	lsls	r4, r4, #3
 800164c:	4003      	ands	r3, r0
 800164e:	4454      	add	r4, sl
 8001650:	4818      	ldr	r0, [pc, #96]	; (80016b4 <__aeabi_dmul+0x3bc>)
 8001652:	4284      	cmp	r4, r0
 8001654:	dd00      	ble.n	8001658 <__aeabi_dmul+0x360>
 8001656:	e727      	b.n	80014a8 <__aeabi_dmul+0x1b0>
 8001658:	075e      	lsls	r6, r3, #29
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	08d2      	lsrs	r2, r2, #3
 800165e:	0b1f      	lsrs	r7, r3, #12
 8001660:	0563      	lsls	r3, r4, #21
 8001662:	4316      	orrs	r6, r2
 8001664:	0d5b      	lsrs	r3, r3, #21
 8001666:	e6b2      	b.n	80013ce <__aeabi_dmul+0xd6>
 8001668:	2300      	movs	r3, #0
 800166a:	4699      	mov	r9, r3
 800166c:	3301      	adds	r3, #1
 800166e:	2704      	movs	r7, #4
 8001670:	2600      	movs	r6, #0
 8001672:	469b      	mov	fp, r3
 8001674:	e664      	b.n	8001340 <__aeabi_dmul+0x48>
 8001676:	2303      	movs	r3, #3
 8001678:	9701      	str	r7, [sp, #4]
 800167a:	4681      	mov	r9, r0
 800167c:	270c      	movs	r7, #12
 800167e:	469b      	mov	fp, r3
 8001680:	e65e      	b.n	8001340 <__aeabi_dmul+0x48>
 8001682:	2201      	movs	r2, #1
 8001684:	2001      	movs	r0, #1
 8001686:	4317      	orrs	r7, r2
 8001688:	2200      	movs	r2, #0
 800168a:	e676      	b.n	800137a <__aeabi_dmul+0x82>
 800168c:	2303      	movs	r3, #3
 800168e:	2003      	movs	r0, #3
 8001690:	431f      	orrs	r7, r3
 8001692:	4643      	mov	r3, r8
 8001694:	e671      	b.n	800137a <__aeabi_dmul+0x82>
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	000007ff 	.word	0x000007ff
 800169c:	fffffc01 	.word	0xfffffc01
 80016a0:	08009420 	.word	0x08009420
 80016a4:	800fffff 	.word	0x800fffff
 80016a8:	fffffc0d 	.word	0xfffffc0d
 80016ac:	000003ff 	.word	0x000003ff
 80016b0:	feffffff 	.word	0xfeffffff
 80016b4:	000007fe 	.word	0x000007fe
 80016b8:	2300      	movs	r3, #0
 80016ba:	2780      	movs	r7, #128	; 0x80
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	033f      	lsls	r7, r7, #12
 80016c0:	2600      	movs	r6, #0
 80016c2:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <__aeabi_dmul+0x4d8>)
 80016c4:	e683      	b.n	80013ce <__aeabi_dmul+0xd6>
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	0032      	movs	r2, r6
 80016ca:	46a4      	mov	ip, r4
 80016cc:	4658      	mov	r0, fp
 80016ce:	e670      	b.n	80013b2 <__aeabi_dmul+0xba>
 80016d0:	46ac      	mov	ip, r5
 80016d2:	e66e      	b.n	80013b2 <__aeabi_dmul+0xba>
 80016d4:	2780      	movs	r7, #128	; 0x80
 80016d6:	9901      	ldr	r1, [sp, #4]
 80016d8:	033f      	lsls	r7, r7, #12
 80016da:	4239      	tst	r1, r7
 80016dc:	d02d      	beq.n	800173a <__aeabi_dmul+0x442>
 80016de:	423b      	tst	r3, r7
 80016e0:	d12b      	bne.n	800173a <__aeabi_dmul+0x442>
 80016e2:	431f      	orrs	r7, r3
 80016e4:	033f      	lsls	r7, r7, #12
 80016e6:	0b3f      	lsrs	r7, r7, #12
 80016e8:	9500      	str	r5, [sp, #0]
 80016ea:	0016      	movs	r6, r2
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <__aeabi_dmul+0x4d8>)
 80016ee:	e66e      	b.n	80013ce <__aeabi_dmul+0xd6>
 80016f0:	2501      	movs	r5, #1
 80016f2:	1b2d      	subs	r5, r5, r4
 80016f4:	2d38      	cmp	r5, #56	; 0x38
 80016f6:	dd00      	ble.n	80016fa <__aeabi_dmul+0x402>
 80016f8:	e666      	b.n	80013c8 <__aeabi_dmul+0xd0>
 80016fa:	2d1f      	cmp	r5, #31
 80016fc:	dc40      	bgt.n	8001780 <__aeabi_dmul+0x488>
 80016fe:	4835      	ldr	r0, [pc, #212]	; (80017d4 <__aeabi_dmul+0x4dc>)
 8001700:	001c      	movs	r4, r3
 8001702:	4450      	add	r0, sl
 8001704:	0016      	movs	r6, r2
 8001706:	4082      	lsls	r2, r0
 8001708:	4084      	lsls	r4, r0
 800170a:	40ee      	lsrs	r6, r5
 800170c:	1e50      	subs	r0, r2, #1
 800170e:	4182      	sbcs	r2, r0
 8001710:	4334      	orrs	r4, r6
 8001712:	4314      	orrs	r4, r2
 8001714:	40eb      	lsrs	r3, r5
 8001716:	0762      	lsls	r2, r4, #29
 8001718:	d009      	beq.n	800172e <__aeabi_dmul+0x436>
 800171a:	220f      	movs	r2, #15
 800171c:	4022      	ands	r2, r4
 800171e:	2a04      	cmp	r2, #4
 8001720:	d005      	beq.n	800172e <__aeabi_dmul+0x436>
 8001722:	0022      	movs	r2, r4
 8001724:	1d14      	adds	r4, r2, #4
 8001726:	4294      	cmp	r4, r2
 8001728:	4180      	sbcs	r0, r0
 800172a:	4240      	negs	r0, r0
 800172c:	181b      	adds	r3, r3, r0
 800172e:	021a      	lsls	r2, r3, #8
 8001730:	d53e      	bpl.n	80017b0 <__aeabi_dmul+0x4b8>
 8001732:	2301      	movs	r3, #1
 8001734:	2700      	movs	r7, #0
 8001736:	2600      	movs	r6, #0
 8001738:	e649      	b.n	80013ce <__aeabi_dmul+0xd6>
 800173a:	2780      	movs	r7, #128	; 0x80
 800173c:	9b01      	ldr	r3, [sp, #4]
 800173e:	033f      	lsls	r7, r7, #12
 8001740:	431f      	orrs	r7, r3
 8001742:	033f      	lsls	r7, r7, #12
 8001744:	0b3f      	lsrs	r7, r7, #12
 8001746:	9400      	str	r4, [sp, #0]
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <__aeabi_dmul+0x4d8>)
 800174a:	e640      	b.n	80013ce <__aeabi_dmul+0xd6>
 800174c:	0003      	movs	r3, r0
 800174e:	465a      	mov	r2, fp
 8001750:	3b28      	subs	r3, #40	; 0x28
 8001752:	409a      	lsls	r2, r3
 8001754:	2600      	movs	r6, #0
 8001756:	9201      	str	r2, [sp, #4]
 8001758:	e66d      	b.n	8001436 <__aeabi_dmul+0x13e>
 800175a:	4658      	mov	r0, fp
 800175c:	f000 fc28 	bl	8001fb0 <__clzsi2>
 8001760:	3020      	adds	r0, #32
 8001762:	e657      	b.n	8001414 <__aeabi_dmul+0x11c>
 8001764:	0003      	movs	r3, r0
 8001766:	4652      	mov	r2, sl
 8001768:	3b28      	subs	r3, #40	; 0x28
 800176a:	409a      	lsls	r2, r3
 800176c:	0013      	movs	r3, r2
 800176e:	2200      	movs	r2, #0
 8001770:	e693      	b.n	800149a <__aeabi_dmul+0x1a2>
 8001772:	4650      	mov	r0, sl
 8001774:	f000 fc1c 	bl	8001fb0 <__clzsi2>
 8001778:	3020      	adds	r0, #32
 800177a:	e67b      	b.n	8001474 <__aeabi_dmul+0x17c>
 800177c:	46ca      	mov	sl, r9
 800177e:	e750      	b.n	8001622 <__aeabi_dmul+0x32a>
 8001780:	201f      	movs	r0, #31
 8001782:	001e      	movs	r6, r3
 8001784:	4240      	negs	r0, r0
 8001786:	1b04      	subs	r4, r0, r4
 8001788:	40e6      	lsrs	r6, r4
 800178a:	2d20      	cmp	r5, #32
 800178c:	d003      	beq.n	8001796 <__aeabi_dmul+0x49e>
 800178e:	4c12      	ldr	r4, [pc, #72]	; (80017d8 <__aeabi_dmul+0x4e0>)
 8001790:	4454      	add	r4, sl
 8001792:	40a3      	lsls	r3, r4
 8001794:	431a      	orrs	r2, r3
 8001796:	1e50      	subs	r0, r2, #1
 8001798:	4182      	sbcs	r2, r0
 800179a:	4332      	orrs	r2, r6
 800179c:	2607      	movs	r6, #7
 800179e:	2700      	movs	r7, #0
 80017a0:	4016      	ands	r6, r2
 80017a2:	d009      	beq.n	80017b8 <__aeabi_dmul+0x4c0>
 80017a4:	200f      	movs	r0, #15
 80017a6:	2300      	movs	r3, #0
 80017a8:	4010      	ands	r0, r2
 80017aa:	0014      	movs	r4, r2
 80017ac:	2804      	cmp	r0, #4
 80017ae:	d1b9      	bne.n	8001724 <__aeabi_dmul+0x42c>
 80017b0:	0022      	movs	r2, r4
 80017b2:	075e      	lsls	r6, r3, #29
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	0b1f      	lsrs	r7, r3, #12
 80017b8:	08d2      	lsrs	r2, r2, #3
 80017ba:	4316      	orrs	r6, r2
 80017bc:	2300      	movs	r3, #0
 80017be:	e606      	b.n	80013ce <__aeabi_dmul+0xd6>
 80017c0:	2780      	movs	r7, #128	; 0x80
 80017c2:	033f      	lsls	r7, r7, #12
 80017c4:	431f      	orrs	r7, r3
 80017c6:	033f      	lsls	r7, r7, #12
 80017c8:	0b3f      	lsrs	r7, r7, #12
 80017ca:	0016      	movs	r6, r2
 80017cc:	4b00      	ldr	r3, [pc, #0]	; (80017d0 <__aeabi_dmul+0x4d8>)
 80017ce:	e5fe      	b.n	80013ce <__aeabi_dmul+0xd6>
 80017d0:	000007ff 	.word	0x000007ff
 80017d4:	0000041e 	.word	0x0000041e
 80017d8:	0000043e 	.word	0x0000043e

080017dc <__aeabi_dsub>:
 80017dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017de:	4657      	mov	r7, sl
 80017e0:	464e      	mov	r6, r9
 80017e2:	4645      	mov	r5, r8
 80017e4:	46de      	mov	lr, fp
 80017e6:	000c      	movs	r4, r1
 80017e8:	0309      	lsls	r1, r1, #12
 80017ea:	b5e0      	push	{r5, r6, r7, lr}
 80017ec:	0a49      	lsrs	r1, r1, #9
 80017ee:	0f46      	lsrs	r6, r0, #29
 80017f0:	005f      	lsls	r7, r3, #1
 80017f2:	4331      	orrs	r1, r6
 80017f4:	031e      	lsls	r6, r3, #12
 80017f6:	0fdb      	lsrs	r3, r3, #31
 80017f8:	0a76      	lsrs	r6, r6, #9
 80017fa:	469b      	mov	fp, r3
 80017fc:	0f53      	lsrs	r3, r2, #29
 80017fe:	4333      	orrs	r3, r6
 8001800:	4ec8      	ldr	r6, [pc, #800]	; (8001b24 <__aeabi_dsub+0x348>)
 8001802:	0065      	lsls	r5, r4, #1
 8001804:	00c0      	lsls	r0, r0, #3
 8001806:	0fe4      	lsrs	r4, r4, #31
 8001808:	00d2      	lsls	r2, r2, #3
 800180a:	0d6d      	lsrs	r5, r5, #21
 800180c:	46a2      	mov	sl, r4
 800180e:	4681      	mov	r9, r0
 8001810:	0d7f      	lsrs	r7, r7, #21
 8001812:	469c      	mov	ip, r3
 8001814:	4690      	mov	r8, r2
 8001816:	42b7      	cmp	r7, r6
 8001818:	d100      	bne.n	800181c <__aeabi_dsub+0x40>
 800181a:	e0b9      	b.n	8001990 <__aeabi_dsub+0x1b4>
 800181c:	465b      	mov	r3, fp
 800181e:	2601      	movs	r6, #1
 8001820:	4073      	eors	r3, r6
 8001822:	469b      	mov	fp, r3
 8001824:	1bee      	subs	r6, r5, r7
 8001826:	45a3      	cmp	fp, r4
 8001828:	d100      	bne.n	800182c <__aeabi_dsub+0x50>
 800182a:	e083      	b.n	8001934 <__aeabi_dsub+0x158>
 800182c:	2e00      	cmp	r6, #0
 800182e:	dd63      	ble.n	80018f8 <__aeabi_dsub+0x11c>
 8001830:	2f00      	cmp	r7, #0
 8001832:	d000      	beq.n	8001836 <__aeabi_dsub+0x5a>
 8001834:	e0b1      	b.n	800199a <__aeabi_dsub+0x1be>
 8001836:	4663      	mov	r3, ip
 8001838:	4313      	orrs	r3, r2
 800183a:	d100      	bne.n	800183e <__aeabi_dsub+0x62>
 800183c:	e123      	b.n	8001a86 <__aeabi_dsub+0x2aa>
 800183e:	1e73      	subs	r3, r6, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dsub+0x6a>
 8001844:	e1ba      	b.n	8001bbc <__aeabi_dsub+0x3e0>
 8001846:	1a86      	subs	r6, r0, r2
 8001848:	4663      	mov	r3, ip
 800184a:	42b0      	cmp	r0, r6
 800184c:	4180      	sbcs	r0, r0
 800184e:	2501      	movs	r5, #1
 8001850:	1ac9      	subs	r1, r1, r3
 8001852:	4240      	negs	r0, r0
 8001854:	1a09      	subs	r1, r1, r0
 8001856:	020b      	lsls	r3, r1, #8
 8001858:	d400      	bmi.n	800185c <__aeabi_dsub+0x80>
 800185a:	e147      	b.n	8001aec <__aeabi_dsub+0x310>
 800185c:	0249      	lsls	r1, r1, #9
 800185e:	0a4b      	lsrs	r3, r1, #9
 8001860:	4698      	mov	r8, r3
 8001862:	4643      	mov	r3, r8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dsub+0x8e>
 8001868:	e189      	b.n	8001b7e <__aeabi_dsub+0x3a2>
 800186a:	4640      	mov	r0, r8
 800186c:	f000 fba0 	bl	8001fb0 <__clzsi2>
 8001870:	0003      	movs	r3, r0
 8001872:	3b08      	subs	r3, #8
 8001874:	2b1f      	cmp	r3, #31
 8001876:	dd00      	ble.n	800187a <__aeabi_dsub+0x9e>
 8001878:	e17c      	b.n	8001b74 <__aeabi_dsub+0x398>
 800187a:	2220      	movs	r2, #32
 800187c:	0030      	movs	r0, r6
 800187e:	1ad2      	subs	r2, r2, r3
 8001880:	4641      	mov	r1, r8
 8001882:	40d0      	lsrs	r0, r2
 8001884:	4099      	lsls	r1, r3
 8001886:	0002      	movs	r2, r0
 8001888:	409e      	lsls	r6, r3
 800188a:	430a      	orrs	r2, r1
 800188c:	429d      	cmp	r5, r3
 800188e:	dd00      	ble.n	8001892 <__aeabi_dsub+0xb6>
 8001890:	e16a      	b.n	8001b68 <__aeabi_dsub+0x38c>
 8001892:	1b5d      	subs	r5, r3, r5
 8001894:	1c6b      	adds	r3, r5, #1
 8001896:	2b1f      	cmp	r3, #31
 8001898:	dd00      	ble.n	800189c <__aeabi_dsub+0xc0>
 800189a:	e194      	b.n	8001bc6 <__aeabi_dsub+0x3ea>
 800189c:	2120      	movs	r1, #32
 800189e:	0010      	movs	r0, r2
 80018a0:	0035      	movs	r5, r6
 80018a2:	1ac9      	subs	r1, r1, r3
 80018a4:	408e      	lsls	r6, r1
 80018a6:	40da      	lsrs	r2, r3
 80018a8:	4088      	lsls	r0, r1
 80018aa:	40dd      	lsrs	r5, r3
 80018ac:	1e71      	subs	r1, r6, #1
 80018ae:	418e      	sbcs	r6, r1
 80018b0:	0011      	movs	r1, r2
 80018b2:	2207      	movs	r2, #7
 80018b4:	4328      	orrs	r0, r5
 80018b6:	2500      	movs	r5, #0
 80018b8:	4306      	orrs	r6, r0
 80018ba:	4032      	ands	r2, r6
 80018bc:	2a00      	cmp	r2, #0
 80018be:	d009      	beq.n	80018d4 <__aeabi_dsub+0xf8>
 80018c0:	230f      	movs	r3, #15
 80018c2:	4033      	ands	r3, r6
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d005      	beq.n	80018d4 <__aeabi_dsub+0xf8>
 80018c8:	1d33      	adds	r3, r6, #4
 80018ca:	42b3      	cmp	r3, r6
 80018cc:	41b6      	sbcs	r6, r6
 80018ce:	4276      	negs	r6, r6
 80018d0:	1989      	adds	r1, r1, r6
 80018d2:	001e      	movs	r6, r3
 80018d4:	020b      	lsls	r3, r1, #8
 80018d6:	d400      	bmi.n	80018da <__aeabi_dsub+0xfe>
 80018d8:	e23d      	b.n	8001d56 <__aeabi_dsub+0x57a>
 80018da:	1c6a      	adds	r2, r5, #1
 80018dc:	4b91      	ldr	r3, [pc, #580]	; (8001b24 <__aeabi_dsub+0x348>)
 80018de:	0555      	lsls	r5, r2, #21
 80018e0:	0d6d      	lsrs	r5, r5, #21
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dsub+0x10c>
 80018e6:	e119      	b.n	8001b1c <__aeabi_dsub+0x340>
 80018e8:	4a8f      	ldr	r2, [pc, #572]	; (8001b28 <__aeabi_dsub+0x34c>)
 80018ea:	08f6      	lsrs	r6, r6, #3
 80018ec:	400a      	ands	r2, r1
 80018ee:	0757      	lsls	r7, r2, #29
 80018f0:	0252      	lsls	r2, r2, #9
 80018f2:	4337      	orrs	r7, r6
 80018f4:	0b12      	lsrs	r2, r2, #12
 80018f6:	e09b      	b.n	8001a30 <__aeabi_dsub+0x254>
 80018f8:	2e00      	cmp	r6, #0
 80018fa:	d000      	beq.n	80018fe <__aeabi_dsub+0x122>
 80018fc:	e0c5      	b.n	8001a8a <__aeabi_dsub+0x2ae>
 80018fe:	1c6e      	adds	r6, r5, #1
 8001900:	0576      	lsls	r6, r6, #21
 8001902:	0d76      	lsrs	r6, r6, #21
 8001904:	2e01      	cmp	r6, #1
 8001906:	dc00      	bgt.n	800190a <__aeabi_dsub+0x12e>
 8001908:	e148      	b.n	8001b9c <__aeabi_dsub+0x3c0>
 800190a:	4667      	mov	r7, ip
 800190c:	1a86      	subs	r6, r0, r2
 800190e:	1bcb      	subs	r3, r1, r7
 8001910:	42b0      	cmp	r0, r6
 8001912:	41bf      	sbcs	r7, r7
 8001914:	427f      	negs	r7, r7
 8001916:	46b8      	mov	r8, r7
 8001918:	001f      	movs	r7, r3
 800191a:	4643      	mov	r3, r8
 800191c:	1aff      	subs	r7, r7, r3
 800191e:	003b      	movs	r3, r7
 8001920:	46b8      	mov	r8, r7
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	d500      	bpl.n	8001928 <__aeabi_dsub+0x14c>
 8001926:	e15f      	b.n	8001be8 <__aeabi_dsub+0x40c>
 8001928:	4337      	orrs	r7, r6
 800192a:	d19a      	bne.n	8001862 <__aeabi_dsub+0x86>
 800192c:	2200      	movs	r2, #0
 800192e:	2400      	movs	r4, #0
 8001930:	2500      	movs	r5, #0
 8001932:	e079      	b.n	8001a28 <__aeabi_dsub+0x24c>
 8001934:	2e00      	cmp	r6, #0
 8001936:	dc00      	bgt.n	800193a <__aeabi_dsub+0x15e>
 8001938:	e0fa      	b.n	8001b30 <__aeabi_dsub+0x354>
 800193a:	2f00      	cmp	r7, #0
 800193c:	d100      	bne.n	8001940 <__aeabi_dsub+0x164>
 800193e:	e08d      	b.n	8001a5c <__aeabi_dsub+0x280>
 8001940:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <__aeabi_dsub+0x348>)
 8001942:	429d      	cmp	r5, r3
 8001944:	d067      	beq.n	8001a16 <__aeabi_dsub+0x23a>
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	4667      	mov	r7, ip
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	431f      	orrs	r7, r3
 800194e:	46bc      	mov	ip, r7
 8001950:	2e38      	cmp	r6, #56	; 0x38
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dsub+0x17a>
 8001954:	e152      	b.n	8001bfc <__aeabi_dsub+0x420>
 8001956:	4663      	mov	r3, ip
 8001958:	4313      	orrs	r3, r2
 800195a:	1e5a      	subs	r2, r3, #1
 800195c:	4193      	sbcs	r3, r2
 800195e:	181e      	adds	r6, r3, r0
 8001960:	4286      	cmp	r6, r0
 8001962:	4180      	sbcs	r0, r0
 8001964:	4240      	negs	r0, r0
 8001966:	1809      	adds	r1, r1, r0
 8001968:	020b      	lsls	r3, r1, #8
 800196a:	d400      	bmi.n	800196e <__aeabi_dsub+0x192>
 800196c:	e0be      	b.n	8001aec <__aeabi_dsub+0x310>
 800196e:	4b6d      	ldr	r3, [pc, #436]	; (8001b24 <__aeabi_dsub+0x348>)
 8001970:	3501      	adds	r5, #1
 8001972:	429d      	cmp	r5, r3
 8001974:	d100      	bne.n	8001978 <__aeabi_dsub+0x19c>
 8001976:	e0d2      	b.n	8001b1e <__aeabi_dsub+0x342>
 8001978:	4a6b      	ldr	r2, [pc, #428]	; (8001b28 <__aeabi_dsub+0x34c>)
 800197a:	0873      	lsrs	r3, r6, #1
 800197c:	400a      	ands	r2, r1
 800197e:	2101      	movs	r1, #1
 8001980:	400e      	ands	r6, r1
 8001982:	431e      	orrs	r6, r3
 8001984:	0851      	lsrs	r1, r2, #1
 8001986:	07d3      	lsls	r3, r2, #31
 8001988:	2207      	movs	r2, #7
 800198a:	431e      	orrs	r6, r3
 800198c:	4032      	ands	r2, r6
 800198e:	e795      	b.n	80018bc <__aeabi_dsub+0xe0>
 8001990:	001e      	movs	r6, r3
 8001992:	4316      	orrs	r6, r2
 8001994:	d000      	beq.n	8001998 <__aeabi_dsub+0x1bc>
 8001996:	e745      	b.n	8001824 <__aeabi_dsub+0x48>
 8001998:	e740      	b.n	800181c <__aeabi_dsub+0x40>
 800199a:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <__aeabi_dsub+0x348>)
 800199c:	429d      	cmp	r5, r3
 800199e:	d03a      	beq.n	8001a16 <__aeabi_dsub+0x23a>
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	4667      	mov	r7, ip
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	431f      	orrs	r7, r3
 80019a8:	46bc      	mov	ip, r7
 80019aa:	2e38      	cmp	r6, #56	; 0x38
 80019ac:	dd00      	ble.n	80019b0 <__aeabi_dsub+0x1d4>
 80019ae:	e0eb      	b.n	8001b88 <__aeabi_dsub+0x3ac>
 80019b0:	2e1f      	cmp	r6, #31
 80019b2:	dc00      	bgt.n	80019b6 <__aeabi_dsub+0x1da>
 80019b4:	e13a      	b.n	8001c2c <__aeabi_dsub+0x450>
 80019b6:	0033      	movs	r3, r6
 80019b8:	4667      	mov	r7, ip
 80019ba:	3b20      	subs	r3, #32
 80019bc:	40df      	lsrs	r7, r3
 80019be:	003b      	movs	r3, r7
 80019c0:	2e20      	cmp	r6, #32
 80019c2:	d005      	beq.n	80019d0 <__aeabi_dsub+0x1f4>
 80019c4:	2740      	movs	r7, #64	; 0x40
 80019c6:	1bbf      	subs	r7, r7, r6
 80019c8:	4666      	mov	r6, ip
 80019ca:	40be      	lsls	r6, r7
 80019cc:	4332      	orrs	r2, r6
 80019ce:	4690      	mov	r8, r2
 80019d0:	4646      	mov	r6, r8
 80019d2:	1e72      	subs	r2, r6, #1
 80019d4:	4196      	sbcs	r6, r2
 80019d6:	4333      	orrs	r3, r6
 80019d8:	e0da      	b.n	8001b90 <__aeabi_dsub+0x3b4>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x204>
 80019de:	e214      	b.n	8001e0a <__aeabi_dsub+0x62e>
 80019e0:	4663      	mov	r3, ip
 80019e2:	4313      	orrs	r3, r2
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dsub+0x20c>
 80019e6:	e168      	b.n	8001cba <__aeabi_dsub+0x4de>
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	074e      	lsls	r6, r1, #29
 80019ec:	08c0      	lsrs	r0, r0, #3
 80019ee:	08c9      	lsrs	r1, r1, #3
 80019f0:	031b      	lsls	r3, r3, #12
 80019f2:	4306      	orrs	r6, r0
 80019f4:	4219      	tst	r1, r3
 80019f6:	d008      	beq.n	8001a0a <__aeabi_dsub+0x22e>
 80019f8:	4660      	mov	r0, ip
 80019fa:	08c0      	lsrs	r0, r0, #3
 80019fc:	4218      	tst	r0, r3
 80019fe:	d104      	bne.n	8001a0a <__aeabi_dsub+0x22e>
 8001a00:	4663      	mov	r3, ip
 8001a02:	0001      	movs	r1, r0
 8001a04:	08d2      	lsrs	r2, r2, #3
 8001a06:	075e      	lsls	r6, r3, #29
 8001a08:	4316      	orrs	r6, r2
 8001a0a:	00f3      	lsls	r3, r6, #3
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	00c9      	lsls	r1, r1, #3
 8001a10:	0f72      	lsrs	r2, r6, #29
 8001a12:	4d44      	ldr	r5, [pc, #272]	; (8001b24 <__aeabi_dsub+0x348>)
 8001a14:	4311      	orrs	r1, r2
 8001a16:	464b      	mov	r3, r9
 8001a18:	08de      	lsrs	r6, r3, #3
 8001a1a:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <__aeabi_dsub+0x348>)
 8001a1c:	074f      	lsls	r7, r1, #29
 8001a1e:	4337      	orrs	r7, r6
 8001a20:	08ca      	lsrs	r2, r1, #3
 8001a22:	429d      	cmp	r5, r3
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dsub+0x24c>
 8001a26:	e06e      	b.n	8001b06 <__aeabi_dsub+0x32a>
 8001a28:	0312      	lsls	r2, r2, #12
 8001a2a:	056d      	lsls	r5, r5, #21
 8001a2c:	0b12      	lsrs	r2, r2, #12
 8001a2e:	0d6d      	lsrs	r5, r5, #21
 8001a30:	2100      	movs	r1, #0
 8001a32:	0312      	lsls	r2, r2, #12
 8001a34:	0b13      	lsrs	r3, r2, #12
 8001a36:	0d0a      	lsrs	r2, r1, #20
 8001a38:	0512      	lsls	r2, r2, #20
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <__aeabi_dsub+0x350>)
 8001a3e:	052d      	lsls	r5, r5, #20
 8001a40:	4013      	ands	r3, r2
 8001a42:	432b      	orrs	r3, r5
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	07e4      	lsls	r4, r4, #31
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	4323      	orrs	r3, r4
 8001a4c:	0038      	movs	r0, r7
 8001a4e:	0019      	movs	r1, r3
 8001a50:	bc3c      	pop	{r2, r3, r4, r5}
 8001a52:	4690      	mov	r8, r2
 8001a54:	4699      	mov	r9, r3
 8001a56:	46a2      	mov	sl, r4
 8001a58:	46ab      	mov	fp, r5
 8001a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a5c:	4663      	mov	r3, ip
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	d011      	beq.n	8001a86 <__aeabi_dsub+0x2aa>
 8001a62:	1e73      	subs	r3, r6, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d000      	beq.n	8001a6a <__aeabi_dsub+0x28e>
 8001a68:	e107      	b.n	8001c7a <__aeabi_dsub+0x49e>
 8001a6a:	1886      	adds	r6, r0, r2
 8001a6c:	4286      	cmp	r6, r0
 8001a6e:	4180      	sbcs	r0, r0
 8001a70:	4461      	add	r1, ip
 8001a72:	4240      	negs	r0, r0
 8001a74:	1809      	adds	r1, r1, r0
 8001a76:	2501      	movs	r5, #1
 8001a78:	020b      	lsls	r3, r1, #8
 8001a7a:	d537      	bpl.n	8001aec <__aeabi_dsub+0x310>
 8001a7c:	2502      	movs	r5, #2
 8001a7e:	e77b      	b.n	8001978 <__aeabi_dsub+0x19c>
 8001a80:	003e      	movs	r6, r7
 8001a82:	4661      	mov	r1, ip
 8001a84:	4691      	mov	r9, r2
 8001a86:	0035      	movs	r5, r6
 8001a88:	e7c5      	b.n	8001a16 <__aeabi_dsub+0x23a>
 8001a8a:	465c      	mov	r4, fp
 8001a8c:	2d00      	cmp	r5, #0
 8001a8e:	d000      	beq.n	8001a92 <__aeabi_dsub+0x2b6>
 8001a90:	e0e1      	b.n	8001c56 <__aeabi_dsub+0x47a>
 8001a92:	000b      	movs	r3, r1
 8001a94:	4303      	orrs	r3, r0
 8001a96:	d0f3      	beq.n	8001a80 <__aeabi_dsub+0x2a4>
 8001a98:	1c73      	adds	r3, r6, #1
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dsub+0x2c2>
 8001a9c:	e1ac      	b.n	8001df8 <__aeabi_dsub+0x61c>
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <__aeabi_dsub+0x348>)
 8001aa0:	429f      	cmp	r7, r3
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dsub+0x2ca>
 8001aa4:	e13a      	b.n	8001d1c <__aeabi_dsub+0x540>
 8001aa6:	43f3      	mvns	r3, r6
 8001aa8:	2b38      	cmp	r3, #56	; 0x38
 8001aaa:	dd00      	ble.n	8001aae <__aeabi_dsub+0x2d2>
 8001aac:	e16f      	b.n	8001d8e <__aeabi_dsub+0x5b2>
 8001aae:	2b1f      	cmp	r3, #31
 8001ab0:	dd00      	ble.n	8001ab4 <__aeabi_dsub+0x2d8>
 8001ab2:	e18c      	b.n	8001dce <__aeabi_dsub+0x5f2>
 8001ab4:	2520      	movs	r5, #32
 8001ab6:	000e      	movs	r6, r1
 8001ab8:	1aed      	subs	r5, r5, r3
 8001aba:	40ae      	lsls	r6, r5
 8001abc:	46b0      	mov	r8, r6
 8001abe:	0006      	movs	r6, r0
 8001ac0:	46aa      	mov	sl, r5
 8001ac2:	40de      	lsrs	r6, r3
 8001ac4:	4645      	mov	r5, r8
 8001ac6:	4335      	orrs	r5, r6
 8001ac8:	002e      	movs	r6, r5
 8001aca:	4655      	mov	r5, sl
 8001acc:	40d9      	lsrs	r1, r3
 8001ace:	40a8      	lsls	r0, r5
 8001ad0:	4663      	mov	r3, ip
 8001ad2:	1e45      	subs	r5, r0, #1
 8001ad4:	41a8      	sbcs	r0, r5
 8001ad6:	1a5b      	subs	r3, r3, r1
 8001ad8:	469c      	mov	ip, r3
 8001ada:	4330      	orrs	r0, r6
 8001adc:	1a16      	subs	r6, r2, r0
 8001ade:	42b2      	cmp	r2, r6
 8001ae0:	4192      	sbcs	r2, r2
 8001ae2:	4663      	mov	r3, ip
 8001ae4:	4252      	negs	r2, r2
 8001ae6:	1a99      	subs	r1, r3, r2
 8001ae8:	003d      	movs	r5, r7
 8001aea:	e6b4      	b.n	8001856 <__aeabi_dsub+0x7a>
 8001aec:	2207      	movs	r2, #7
 8001aee:	4032      	ands	r2, r6
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d000      	beq.n	8001af6 <__aeabi_dsub+0x31a>
 8001af4:	e6e4      	b.n	80018c0 <__aeabi_dsub+0xe4>
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <__aeabi_dsub+0x348>)
 8001af8:	08f6      	lsrs	r6, r6, #3
 8001afa:	074f      	lsls	r7, r1, #29
 8001afc:	4337      	orrs	r7, r6
 8001afe:	08ca      	lsrs	r2, r1, #3
 8001b00:	429d      	cmp	r5, r3
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dsub+0x32a>
 8001b04:	e790      	b.n	8001a28 <__aeabi_dsub+0x24c>
 8001b06:	003b      	movs	r3, r7
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0x332>
 8001b0c:	e1a6      	b.n	8001e5c <__aeabi_dsub+0x680>
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	031b      	lsls	r3, r3, #12
 8001b12:	431a      	orrs	r2, r3
 8001b14:	0312      	lsls	r2, r2, #12
 8001b16:	0b12      	lsrs	r2, r2, #12
 8001b18:	4d02      	ldr	r5, [pc, #8]	; (8001b24 <__aeabi_dsub+0x348>)
 8001b1a:	e789      	b.n	8001a30 <__aeabi_dsub+0x254>
 8001b1c:	0015      	movs	r5, r2
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2700      	movs	r7, #0
 8001b22:	e785      	b.n	8001a30 <__aeabi_dsub+0x254>
 8001b24:	000007ff 	.word	0x000007ff
 8001b28:	ff7fffff 	.word	0xff7fffff
 8001b2c:	800fffff 	.word	0x800fffff
 8001b30:	2e00      	cmp	r6, #0
 8001b32:	d000      	beq.n	8001b36 <__aeabi_dsub+0x35a>
 8001b34:	e0c7      	b.n	8001cc6 <__aeabi_dsub+0x4ea>
 8001b36:	1c6b      	adds	r3, r5, #1
 8001b38:	055e      	lsls	r6, r3, #21
 8001b3a:	0d76      	lsrs	r6, r6, #21
 8001b3c:	2e01      	cmp	r6, #1
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_dsub+0x366>
 8001b40:	e0f0      	b.n	8001d24 <__aeabi_dsub+0x548>
 8001b42:	4dc8      	ldr	r5, [pc, #800]	; (8001e64 <__aeabi_dsub+0x688>)
 8001b44:	42ab      	cmp	r3, r5
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dsub+0x36e>
 8001b48:	e0b9      	b.n	8001cbe <__aeabi_dsub+0x4e2>
 8001b4a:	1885      	adds	r5, r0, r2
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	4285      	cmp	r5, r0
 8001b50:	4189      	sbcs	r1, r1
 8001b52:	4462      	add	r2, ip
 8001b54:	4249      	negs	r1, r1
 8001b56:	1851      	adds	r1, r2, r1
 8001b58:	2207      	movs	r2, #7
 8001b5a:	07ce      	lsls	r6, r1, #31
 8001b5c:	086d      	lsrs	r5, r5, #1
 8001b5e:	432e      	orrs	r6, r5
 8001b60:	0849      	lsrs	r1, r1, #1
 8001b62:	4032      	ands	r2, r6
 8001b64:	001d      	movs	r5, r3
 8001b66:	e6a9      	b.n	80018bc <__aeabi_dsub+0xe0>
 8001b68:	49bf      	ldr	r1, [pc, #764]	; (8001e68 <__aeabi_dsub+0x68c>)
 8001b6a:	1aed      	subs	r5, r5, r3
 8001b6c:	4011      	ands	r1, r2
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4032      	ands	r2, r6
 8001b72:	e6a3      	b.n	80018bc <__aeabi_dsub+0xe0>
 8001b74:	0032      	movs	r2, r6
 8001b76:	3828      	subs	r0, #40	; 0x28
 8001b78:	4082      	lsls	r2, r0
 8001b7a:	2600      	movs	r6, #0
 8001b7c:	e686      	b.n	800188c <__aeabi_dsub+0xb0>
 8001b7e:	0030      	movs	r0, r6
 8001b80:	f000 fa16 	bl	8001fb0 <__clzsi2>
 8001b84:	3020      	adds	r0, #32
 8001b86:	e673      	b.n	8001870 <__aeabi_dsub+0x94>
 8001b88:	4663      	mov	r3, ip
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	1e5a      	subs	r2, r3, #1
 8001b8e:	4193      	sbcs	r3, r2
 8001b90:	1ac6      	subs	r6, r0, r3
 8001b92:	42b0      	cmp	r0, r6
 8001b94:	4180      	sbcs	r0, r0
 8001b96:	4240      	negs	r0, r0
 8001b98:	1a09      	subs	r1, r1, r0
 8001b9a:	e65c      	b.n	8001856 <__aeabi_dsub+0x7a>
 8001b9c:	000e      	movs	r6, r1
 8001b9e:	4667      	mov	r7, ip
 8001ba0:	4306      	orrs	r6, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2d00      	cmp	r5, #0
 8001ba6:	d15e      	bne.n	8001c66 <__aeabi_dsub+0x48a>
 8001ba8:	2e00      	cmp	r6, #0
 8001baa:	d000      	beq.n	8001bae <__aeabi_dsub+0x3d2>
 8001bac:	e0f3      	b.n	8001d96 <__aeabi_dsub+0x5ba>
 8001bae:	2f00      	cmp	r7, #0
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x3d8>
 8001bb2:	e11e      	b.n	8001df2 <__aeabi_dsub+0x616>
 8001bb4:	465c      	mov	r4, fp
 8001bb6:	4661      	mov	r1, ip
 8001bb8:	4691      	mov	r9, r2
 8001bba:	e72c      	b.n	8001a16 <__aeabi_dsub+0x23a>
 8001bbc:	4fa9      	ldr	r7, [pc, #676]	; (8001e64 <__aeabi_dsub+0x688>)
 8001bbe:	42be      	cmp	r6, r7
 8001bc0:	d07b      	beq.n	8001cba <__aeabi_dsub+0x4de>
 8001bc2:	001e      	movs	r6, r3
 8001bc4:	e6f1      	b.n	80019aa <__aeabi_dsub+0x1ce>
 8001bc6:	0010      	movs	r0, r2
 8001bc8:	3d1f      	subs	r5, #31
 8001bca:	40e8      	lsrs	r0, r5
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d003      	beq.n	8001bd8 <__aeabi_dsub+0x3fc>
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	1acb      	subs	r3, r1, r3
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	4316      	orrs	r6, r2
 8001bd8:	1e73      	subs	r3, r6, #1
 8001bda:	419e      	sbcs	r6, r3
 8001bdc:	2207      	movs	r2, #7
 8001bde:	4306      	orrs	r6, r0
 8001be0:	4032      	ands	r2, r6
 8001be2:	2100      	movs	r1, #0
 8001be4:	2500      	movs	r5, #0
 8001be6:	e783      	b.n	8001af0 <__aeabi_dsub+0x314>
 8001be8:	1a16      	subs	r6, r2, r0
 8001bea:	4663      	mov	r3, ip
 8001bec:	42b2      	cmp	r2, r6
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	1a59      	subs	r1, r3, r1
 8001bf2:	4240      	negs	r0, r0
 8001bf4:	1a0b      	subs	r3, r1, r0
 8001bf6:	4698      	mov	r8, r3
 8001bf8:	465c      	mov	r4, fp
 8001bfa:	e632      	b.n	8001862 <__aeabi_dsub+0x86>
 8001bfc:	2e1f      	cmp	r6, #31
 8001bfe:	dd00      	ble.n	8001c02 <__aeabi_dsub+0x426>
 8001c00:	e0ab      	b.n	8001d5a <__aeabi_dsub+0x57e>
 8001c02:	2720      	movs	r7, #32
 8001c04:	1bbb      	subs	r3, r7, r6
 8001c06:	469a      	mov	sl, r3
 8001c08:	4663      	mov	r3, ip
 8001c0a:	4657      	mov	r7, sl
 8001c0c:	40bb      	lsls	r3, r7
 8001c0e:	4699      	mov	r9, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	464f      	mov	r7, r9
 8001c14:	40f3      	lsrs	r3, r6
 8001c16:	431f      	orrs	r7, r3
 8001c18:	003b      	movs	r3, r7
 8001c1a:	4657      	mov	r7, sl
 8001c1c:	40ba      	lsls	r2, r7
 8001c1e:	1e57      	subs	r7, r2, #1
 8001c20:	41ba      	sbcs	r2, r7
 8001c22:	4313      	orrs	r3, r2
 8001c24:	4662      	mov	r2, ip
 8001c26:	40f2      	lsrs	r2, r6
 8001c28:	1889      	adds	r1, r1, r2
 8001c2a:	e698      	b.n	800195e <__aeabi_dsub+0x182>
 8001c2c:	2720      	movs	r7, #32
 8001c2e:	1bbb      	subs	r3, r7, r6
 8001c30:	469a      	mov	sl, r3
 8001c32:	4663      	mov	r3, ip
 8001c34:	4657      	mov	r7, sl
 8001c36:	40bb      	lsls	r3, r7
 8001c38:	4699      	mov	r9, r3
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	464f      	mov	r7, r9
 8001c3e:	40f3      	lsrs	r3, r6
 8001c40:	431f      	orrs	r7, r3
 8001c42:	003b      	movs	r3, r7
 8001c44:	4657      	mov	r7, sl
 8001c46:	40ba      	lsls	r2, r7
 8001c48:	1e57      	subs	r7, r2, #1
 8001c4a:	41ba      	sbcs	r2, r7
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	4662      	mov	r2, ip
 8001c50:	40f2      	lsrs	r2, r6
 8001c52:	1a89      	subs	r1, r1, r2
 8001c54:	e79c      	b.n	8001b90 <__aeabi_dsub+0x3b4>
 8001c56:	4b83      	ldr	r3, [pc, #524]	; (8001e64 <__aeabi_dsub+0x688>)
 8001c58:	429f      	cmp	r7, r3
 8001c5a:	d05f      	beq.n	8001d1c <__aeabi_dsub+0x540>
 8001c5c:	2580      	movs	r5, #128	; 0x80
 8001c5e:	042d      	lsls	r5, r5, #16
 8001c60:	4273      	negs	r3, r6
 8001c62:	4329      	orrs	r1, r5
 8001c64:	e720      	b.n	8001aa8 <__aeabi_dsub+0x2cc>
 8001c66:	2e00      	cmp	r6, #0
 8001c68:	d10c      	bne.n	8001c84 <__aeabi_dsub+0x4a8>
 8001c6a:	2f00      	cmp	r7, #0
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x494>
 8001c6e:	e0d0      	b.n	8001e12 <__aeabi_dsub+0x636>
 8001c70:	465c      	mov	r4, fp
 8001c72:	4661      	mov	r1, ip
 8001c74:	4691      	mov	r9, r2
 8001c76:	4d7b      	ldr	r5, [pc, #492]	; (8001e64 <__aeabi_dsub+0x688>)
 8001c78:	e6cd      	b.n	8001a16 <__aeabi_dsub+0x23a>
 8001c7a:	4f7a      	ldr	r7, [pc, #488]	; (8001e64 <__aeabi_dsub+0x688>)
 8001c7c:	42be      	cmp	r6, r7
 8001c7e:	d01c      	beq.n	8001cba <__aeabi_dsub+0x4de>
 8001c80:	001e      	movs	r6, r3
 8001c82:	e665      	b.n	8001950 <__aeabi_dsub+0x174>
 8001c84:	2f00      	cmp	r7, #0
 8001c86:	d018      	beq.n	8001cba <__aeabi_dsub+0x4de>
 8001c88:	08c0      	lsrs	r0, r0, #3
 8001c8a:	074e      	lsls	r6, r1, #29
 8001c8c:	4306      	orrs	r6, r0
 8001c8e:	2080      	movs	r0, #128	; 0x80
 8001c90:	08c9      	lsrs	r1, r1, #3
 8001c92:	0300      	lsls	r0, r0, #12
 8001c94:	4201      	tst	r1, r0
 8001c96:	d008      	beq.n	8001caa <__aeabi_dsub+0x4ce>
 8001c98:	4663      	mov	r3, ip
 8001c9a:	08dc      	lsrs	r4, r3, #3
 8001c9c:	4204      	tst	r4, r0
 8001c9e:	d104      	bne.n	8001caa <__aeabi_dsub+0x4ce>
 8001ca0:	0021      	movs	r1, r4
 8001ca2:	46da      	mov	sl, fp
 8001ca4:	08d2      	lsrs	r2, r2, #3
 8001ca6:	075e      	lsls	r6, r3, #29
 8001ca8:	4316      	orrs	r6, r2
 8001caa:	00f3      	lsls	r3, r6, #3
 8001cac:	4699      	mov	r9, r3
 8001cae:	2401      	movs	r4, #1
 8001cb0:	4653      	mov	r3, sl
 8001cb2:	00c9      	lsls	r1, r1, #3
 8001cb4:	0f72      	lsrs	r2, r6, #29
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	401c      	ands	r4, r3
 8001cba:	4d6a      	ldr	r5, [pc, #424]	; (8001e64 <__aeabi_dsub+0x688>)
 8001cbc:	e6ab      	b.n	8001a16 <__aeabi_dsub+0x23a>
 8001cbe:	001d      	movs	r5, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2700      	movs	r7, #0
 8001cc4:	e6b4      	b.n	8001a30 <__aeabi_dsub+0x254>
 8001cc6:	2d00      	cmp	r5, #0
 8001cc8:	d159      	bne.n	8001d7e <__aeabi_dsub+0x5a2>
 8001cca:	000b      	movs	r3, r1
 8001ccc:	4303      	orrs	r3, r0
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x4f6>
 8001cd0:	e6d6      	b.n	8001a80 <__aeabi_dsub+0x2a4>
 8001cd2:	1c73      	adds	r3, r6, #1
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x4fc>
 8001cd6:	e0b2      	b.n	8001e3e <__aeabi_dsub+0x662>
 8001cd8:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <__aeabi_dsub+0x688>)
 8001cda:	429f      	cmp	r7, r3
 8001cdc:	d01e      	beq.n	8001d1c <__aeabi_dsub+0x540>
 8001cde:	43f3      	mvns	r3, r6
 8001ce0:	2b38      	cmp	r3, #56	; 0x38
 8001ce2:	dc6f      	bgt.n	8001dc4 <__aeabi_dsub+0x5e8>
 8001ce4:	2b1f      	cmp	r3, #31
 8001ce6:	dd00      	ble.n	8001cea <__aeabi_dsub+0x50e>
 8001ce8:	e097      	b.n	8001e1a <__aeabi_dsub+0x63e>
 8001cea:	2520      	movs	r5, #32
 8001cec:	000e      	movs	r6, r1
 8001cee:	1aed      	subs	r5, r5, r3
 8001cf0:	40ae      	lsls	r6, r5
 8001cf2:	46b0      	mov	r8, r6
 8001cf4:	0006      	movs	r6, r0
 8001cf6:	46aa      	mov	sl, r5
 8001cf8:	40de      	lsrs	r6, r3
 8001cfa:	4645      	mov	r5, r8
 8001cfc:	4335      	orrs	r5, r6
 8001cfe:	002e      	movs	r6, r5
 8001d00:	4655      	mov	r5, sl
 8001d02:	40a8      	lsls	r0, r5
 8001d04:	40d9      	lsrs	r1, r3
 8001d06:	1e45      	subs	r5, r0, #1
 8001d08:	41a8      	sbcs	r0, r5
 8001d0a:	448c      	add	ip, r1
 8001d0c:	4306      	orrs	r6, r0
 8001d0e:	18b6      	adds	r6, r6, r2
 8001d10:	4296      	cmp	r6, r2
 8001d12:	4192      	sbcs	r2, r2
 8001d14:	4251      	negs	r1, r2
 8001d16:	4461      	add	r1, ip
 8001d18:	003d      	movs	r5, r7
 8001d1a:	e625      	b.n	8001968 <__aeabi_dsub+0x18c>
 8001d1c:	003d      	movs	r5, r7
 8001d1e:	4661      	mov	r1, ip
 8001d20:	4691      	mov	r9, r2
 8001d22:	e678      	b.n	8001a16 <__aeabi_dsub+0x23a>
 8001d24:	000b      	movs	r3, r1
 8001d26:	4303      	orrs	r3, r0
 8001d28:	2d00      	cmp	r5, #0
 8001d2a:	d000      	beq.n	8001d2e <__aeabi_dsub+0x552>
 8001d2c:	e655      	b.n	80019da <__aeabi_dsub+0x1fe>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f5      	beq.n	8001d1e <__aeabi_dsub+0x542>
 8001d32:	4663      	mov	r3, ip
 8001d34:	4313      	orrs	r3, r2
 8001d36:	d100      	bne.n	8001d3a <__aeabi_dsub+0x55e>
 8001d38:	e66d      	b.n	8001a16 <__aeabi_dsub+0x23a>
 8001d3a:	1886      	adds	r6, r0, r2
 8001d3c:	4286      	cmp	r6, r0
 8001d3e:	4180      	sbcs	r0, r0
 8001d40:	4461      	add	r1, ip
 8001d42:	4240      	negs	r0, r0
 8001d44:	1809      	adds	r1, r1, r0
 8001d46:	2200      	movs	r2, #0
 8001d48:	020b      	lsls	r3, r1, #8
 8001d4a:	d400      	bmi.n	8001d4e <__aeabi_dsub+0x572>
 8001d4c:	e6d0      	b.n	8001af0 <__aeabi_dsub+0x314>
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <__aeabi_dsub+0x68c>)
 8001d50:	3501      	adds	r5, #1
 8001d52:	4019      	ands	r1, r3
 8001d54:	e5b2      	b.n	80018bc <__aeabi_dsub+0xe0>
 8001d56:	46b1      	mov	r9, r6
 8001d58:	e65d      	b.n	8001a16 <__aeabi_dsub+0x23a>
 8001d5a:	0033      	movs	r3, r6
 8001d5c:	4667      	mov	r7, ip
 8001d5e:	3b20      	subs	r3, #32
 8001d60:	40df      	lsrs	r7, r3
 8001d62:	003b      	movs	r3, r7
 8001d64:	2e20      	cmp	r6, #32
 8001d66:	d005      	beq.n	8001d74 <__aeabi_dsub+0x598>
 8001d68:	2740      	movs	r7, #64	; 0x40
 8001d6a:	1bbf      	subs	r7, r7, r6
 8001d6c:	4666      	mov	r6, ip
 8001d6e:	40be      	lsls	r6, r7
 8001d70:	4332      	orrs	r2, r6
 8001d72:	4690      	mov	r8, r2
 8001d74:	4646      	mov	r6, r8
 8001d76:	1e72      	subs	r2, r6, #1
 8001d78:	4196      	sbcs	r6, r2
 8001d7a:	4333      	orrs	r3, r6
 8001d7c:	e5ef      	b.n	800195e <__aeabi_dsub+0x182>
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <__aeabi_dsub+0x688>)
 8001d80:	429f      	cmp	r7, r3
 8001d82:	d0cb      	beq.n	8001d1c <__aeabi_dsub+0x540>
 8001d84:	2580      	movs	r5, #128	; 0x80
 8001d86:	042d      	lsls	r5, r5, #16
 8001d88:	4273      	negs	r3, r6
 8001d8a:	4329      	orrs	r1, r5
 8001d8c:	e7a8      	b.n	8001ce0 <__aeabi_dsub+0x504>
 8001d8e:	4308      	orrs	r0, r1
 8001d90:	1e41      	subs	r1, r0, #1
 8001d92:	4188      	sbcs	r0, r1
 8001d94:	e6a2      	b.n	8001adc <__aeabi_dsub+0x300>
 8001d96:	2f00      	cmp	r7, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x5c0>
 8001d9a:	e63c      	b.n	8001a16 <__aeabi_dsub+0x23a>
 8001d9c:	4663      	mov	r3, ip
 8001d9e:	1a86      	subs	r6, r0, r2
 8001da0:	1acf      	subs	r7, r1, r3
 8001da2:	42b0      	cmp	r0, r6
 8001da4:	419b      	sbcs	r3, r3
 8001da6:	425b      	negs	r3, r3
 8001da8:	1afb      	subs	r3, r7, r3
 8001daa:	4698      	mov	r8, r3
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	d54e      	bpl.n	8001e4e <__aeabi_dsub+0x672>
 8001db0:	1a16      	subs	r6, r2, r0
 8001db2:	4663      	mov	r3, ip
 8001db4:	42b2      	cmp	r2, r6
 8001db6:	4192      	sbcs	r2, r2
 8001db8:	1a59      	subs	r1, r3, r1
 8001dba:	4252      	negs	r2, r2
 8001dbc:	1a89      	subs	r1, r1, r2
 8001dbe:	465c      	mov	r4, fp
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	e57b      	b.n	80018bc <__aeabi_dsub+0xe0>
 8001dc4:	4301      	orrs	r1, r0
 8001dc6:	000e      	movs	r6, r1
 8001dc8:	1e71      	subs	r1, r6, #1
 8001dca:	418e      	sbcs	r6, r1
 8001dcc:	e79f      	b.n	8001d0e <__aeabi_dsub+0x532>
 8001dce:	001d      	movs	r5, r3
 8001dd0:	000e      	movs	r6, r1
 8001dd2:	3d20      	subs	r5, #32
 8001dd4:	40ee      	lsrs	r6, r5
 8001dd6:	46b0      	mov	r8, r6
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d004      	beq.n	8001de6 <__aeabi_dsub+0x60a>
 8001ddc:	2540      	movs	r5, #64	; 0x40
 8001dde:	1aeb      	subs	r3, r5, r3
 8001de0:	4099      	lsls	r1, r3
 8001de2:	4308      	orrs	r0, r1
 8001de4:	4681      	mov	r9, r0
 8001de6:	4648      	mov	r0, r9
 8001de8:	4643      	mov	r3, r8
 8001dea:	1e41      	subs	r1, r0, #1
 8001dec:	4188      	sbcs	r0, r1
 8001dee:	4318      	orrs	r0, r3
 8001df0:	e674      	b.n	8001adc <__aeabi_dsub+0x300>
 8001df2:	2200      	movs	r2, #0
 8001df4:	2400      	movs	r4, #0
 8001df6:	e617      	b.n	8001a28 <__aeabi_dsub+0x24c>
 8001df8:	1a16      	subs	r6, r2, r0
 8001dfa:	4663      	mov	r3, ip
 8001dfc:	42b2      	cmp	r2, r6
 8001dfe:	4192      	sbcs	r2, r2
 8001e00:	1a59      	subs	r1, r3, r1
 8001e02:	4252      	negs	r2, r2
 8001e04:	1a89      	subs	r1, r1, r2
 8001e06:	003d      	movs	r5, r7
 8001e08:	e525      	b.n	8001856 <__aeabi_dsub+0x7a>
 8001e0a:	4661      	mov	r1, ip
 8001e0c:	4691      	mov	r9, r2
 8001e0e:	4d15      	ldr	r5, [pc, #84]	; (8001e64 <__aeabi_dsub+0x688>)
 8001e10:	e601      	b.n	8001a16 <__aeabi_dsub+0x23a>
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	2400      	movs	r4, #0
 8001e16:	0312      	lsls	r2, r2, #12
 8001e18:	e679      	b.n	8001b0e <__aeabi_dsub+0x332>
 8001e1a:	001d      	movs	r5, r3
 8001e1c:	000e      	movs	r6, r1
 8001e1e:	3d20      	subs	r5, #32
 8001e20:	40ee      	lsrs	r6, r5
 8001e22:	46b0      	mov	r8, r6
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d004      	beq.n	8001e32 <__aeabi_dsub+0x656>
 8001e28:	2540      	movs	r5, #64	; 0x40
 8001e2a:	1aeb      	subs	r3, r5, r3
 8001e2c:	4099      	lsls	r1, r3
 8001e2e:	4308      	orrs	r0, r1
 8001e30:	4681      	mov	r9, r0
 8001e32:	464e      	mov	r6, r9
 8001e34:	4643      	mov	r3, r8
 8001e36:	1e71      	subs	r1, r6, #1
 8001e38:	418e      	sbcs	r6, r1
 8001e3a:	431e      	orrs	r6, r3
 8001e3c:	e767      	b.n	8001d0e <__aeabi_dsub+0x532>
 8001e3e:	1886      	adds	r6, r0, r2
 8001e40:	4296      	cmp	r6, r2
 8001e42:	419b      	sbcs	r3, r3
 8001e44:	4461      	add	r1, ip
 8001e46:	425b      	negs	r3, r3
 8001e48:	18c9      	adds	r1, r1, r3
 8001e4a:	003d      	movs	r5, r7
 8001e4c:	e58c      	b.n	8001968 <__aeabi_dsub+0x18c>
 8001e4e:	4647      	mov	r7, r8
 8001e50:	4337      	orrs	r7, r6
 8001e52:	d0ce      	beq.n	8001df2 <__aeabi_dsub+0x616>
 8001e54:	2207      	movs	r2, #7
 8001e56:	4641      	mov	r1, r8
 8001e58:	4032      	ands	r2, r6
 8001e5a:	e649      	b.n	8001af0 <__aeabi_dsub+0x314>
 8001e5c:	2700      	movs	r7, #0
 8001e5e:	003a      	movs	r2, r7
 8001e60:	e5e6      	b.n	8001a30 <__aeabi_dsub+0x254>
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	000007ff 	.word	0x000007ff
 8001e68:	ff7fffff 	.word	0xff7fffff

08001e6c <__aeabi_d2iz>:
 8001e6c:	b530      	push	{r4, r5, lr}
 8001e6e:	4d14      	ldr	r5, [pc, #80]	; (8001ec0 <__aeabi_d2iz+0x54>)
 8001e70:	030a      	lsls	r2, r1, #12
 8001e72:	004b      	lsls	r3, r1, #1
 8001e74:	0b12      	lsrs	r2, r2, #12
 8001e76:	0d5b      	lsrs	r3, r3, #21
 8001e78:	0fc9      	lsrs	r1, r1, #31
 8001e7a:	2400      	movs	r4, #0
 8001e7c:	42ab      	cmp	r3, r5
 8001e7e:	dd11      	ble.n	8001ea4 <__aeabi_d2iz+0x38>
 8001e80:	4c10      	ldr	r4, [pc, #64]	; (8001ec4 <__aeabi_d2iz+0x58>)
 8001e82:	42a3      	cmp	r3, r4
 8001e84:	dc10      	bgt.n	8001ea8 <__aeabi_d2iz+0x3c>
 8001e86:	2480      	movs	r4, #128	; 0x80
 8001e88:	0364      	lsls	r4, r4, #13
 8001e8a:	4322      	orrs	r2, r4
 8001e8c:	4c0e      	ldr	r4, [pc, #56]	; (8001ec8 <__aeabi_d2iz+0x5c>)
 8001e8e:	1ae4      	subs	r4, r4, r3
 8001e90:	2c1f      	cmp	r4, #31
 8001e92:	dd0c      	ble.n	8001eae <__aeabi_d2iz+0x42>
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <__aeabi_d2iz+0x60>)
 8001e96:	1ac3      	subs	r3, r0, r3
 8001e98:	40da      	lsrs	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	425c      	negs	r4, r3
 8001e9e:	2900      	cmp	r1, #0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_d2iz+0x38>
 8001ea2:	001c      	movs	r4, r3
 8001ea4:	0020      	movs	r0, r4
 8001ea6:	bd30      	pop	{r4, r5, pc}
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <__aeabi_d2iz+0x64>)
 8001eaa:	18cc      	adds	r4, r1, r3
 8001eac:	e7fa      	b.n	8001ea4 <__aeabi_d2iz+0x38>
 8001eae:	4d09      	ldr	r5, [pc, #36]	; (8001ed4 <__aeabi_d2iz+0x68>)
 8001eb0:	40e0      	lsrs	r0, r4
 8001eb2:	46ac      	mov	ip, r5
 8001eb4:	4463      	add	r3, ip
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	0013      	movs	r3, r2
 8001eba:	4303      	orrs	r3, r0
 8001ebc:	e7ee      	b.n	8001e9c <__aeabi_d2iz+0x30>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	000003fe 	.word	0x000003fe
 8001ec4:	0000041d 	.word	0x0000041d
 8001ec8:	00000433 	.word	0x00000433
 8001ecc:	00000413 	.word	0x00000413
 8001ed0:	7fffffff 	.word	0x7fffffff
 8001ed4:	fffffbed 	.word	0xfffffbed

08001ed8 <__aeabi_i2d>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d02d      	beq.n	8001f3a <__aeabi_i2d+0x62>
 8001ede:	17c3      	asrs	r3, r0, #31
 8001ee0:	18c5      	adds	r5, r0, r3
 8001ee2:	405d      	eors	r5, r3
 8001ee4:	0fc4      	lsrs	r4, r0, #31
 8001ee6:	0028      	movs	r0, r5
 8001ee8:	f000 f862 	bl	8001fb0 <__clzsi2>
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <__aeabi_i2d+0x6c>)
 8001eee:	1a1b      	subs	r3, r3, r0
 8001ef0:	055b      	lsls	r3, r3, #21
 8001ef2:	0d5b      	lsrs	r3, r3, #21
 8001ef4:	280a      	cmp	r0, #10
 8001ef6:	dd15      	ble.n	8001f24 <__aeabi_i2d+0x4c>
 8001ef8:	380b      	subs	r0, #11
 8001efa:	4085      	lsls	r5, r0
 8001efc:	2200      	movs	r2, #0
 8001efe:	032d      	lsls	r5, r5, #12
 8001f00:	0b2d      	lsrs	r5, r5, #12
 8001f02:	2100      	movs	r1, #0
 8001f04:	0010      	movs	r0, r2
 8001f06:	032d      	lsls	r5, r5, #12
 8001f08:	0d0a      	lsrs	r2, r1, #20
 8001f0a:	0b2d      	lsrs	r5, r5, #12
 8001f0c:	0512      	lsls	r2, r2, #20
 8001f0e:	432a      	orrs	r2, r5
 8001f10:	4d0d      	ldr	r5, [pc, #52]	; (8001f48 <__aeabi_i2d+0x70>)
 8001f12:	051b      	lsls	r3, r3, #20
 8001f14:	402a      	ands	r2, r5
 8001f16:	4313      	orrs	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	07e4      	lsls	r4, r4, #31
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	4323      	orrs	r3, r4
 8001f20:	0019      	movs	r1, r3
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
 8001f24:	0002      	movs	r2, r0
 8001f26:	0029      	movs	r1, r5
 8001f28:	3215      	adds	r2, #21
 8001f2a:	4091      	lsls	r1, r2
 8001f2c:	000a      	movs	r2, r1
 8001f2e:	210b      	movs	r1, #11
 8001f30:	1a08      	subs	r0, r1, r0
 8001f32:	40c5      	lsrs	r5, r0
 8001f34:	032d      	lsls	r5, r5, #12
 8001f36:	0b2d      	lsrs	r5, r5, #12
 8001f38:	e7e3      	b.n	8001f02 <__aeabi_i2d+0x2a>
 8001f3a:	2400      	movs	r4, #0
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2500      	movs	r5, #0
 8001f40:	2200      	movs	r2, #0
 8001f42:	e7de      	b.n	8001f02 <__aeabi_i2d+0x2a>
 8001f44:	0000041e 	.word	0x0000041e
 8001f48:	800fffff 	.word	0x800fffff

08001f4c <__aeabi_ui2d>:
 8001f4c:	b510      	push	{r4, lr}
 8001f4e:	1e04      	subs	r4, r0, #0
 8001f50:	d025      	beq.n	8001f9e <__aeabi_ui2d+0x52>
 8001f52:	f000 f82d 	bl	8001fb0 <__clzsi2>
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <__aeabi_ui2d+0x5c>)
 8001f58:	1a1b      	subs	r3, r3, r0
 8001f5a:	055b      	lsls	r3, r3, #21
 8001f5c:	0d5b      	lsrs	r3, r3, #21
 8001f5e:	280a      	cmp	r0, #10
 8001f60:	dd12      	ble.n	8001f88 <__aeabi_ui2d+0x3c>
 8001f62:	380b      	subs	r0, #11
 8001f64:	4084      	lsls	r4, r0
 8001f66:	2200      	movs	r2, #0
 8001f68:	0324      	lsls	r4, r4, #12
 8001f6a:	0b24      	lsrs	r4, r4, #12
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	0010      	movs	r0, r2
 8001f70:	0324      	lsls	r4, r4, #12
 8001f72:	0d0a      	lsrs	r2, r1, #20
 8001f74:	0b24      	lsrs	r4, r4, #12
 8001f76:	0512      	lsls	r2, r2, #20
 8001f78:	4322      	orrs	r2, r4
 8001f7a:	4c0c      	ldr	r4, [pc, #48]	; (8001fac <__aeabi_ui2d+0x60>)
 8001f7c:	051b      	lsls	r3, r3, #20
 8001f7e:	4022      	ands	r2, r4
 8001f80:	4313      	orrs	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	0859      	lsrs	r1, r3, #1
 8001f86:	bd10      	pop	{r4, pc}
 8001f88:	0002      	movs	r2, r0
 8001f8a:	0021      	movs	r1, r4
 8001f8c:	3215      	adds	r2, #21
 8001f8e:	4091      	lsls	r1, r2
 8001f90:	000a      	movs	r2, r1
 8001f92:	210b      	movs	r1, #11
 8001f94:	1a08      	subs	r0, r1, r0
 8001f96:	40c4      	lsrs	r4, r0
 8001f98:	0324      	lsls	r4, r4, #12
 8001f9a:	0b24      	lsrs	r4, r4, #12
 8001f9c:	e7e6      	b.n	8001f6c <__aeabi_ui2d+0x20>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	e7e2      	b.n	8001f6c <__aeabi_ui2d+0x20>
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	0000041e 	.word	0x0000041e
 8001fac:	800fffff 	.word	0x800fffff

08001fb0 <__clzsi2>:
 8001fb0:	211c      	movs	r1, #28
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	041b      	lsls	r3, r3, #16
 8001fb6:	4298      	cmp	r0, r3
 8001fb8:	d301      	bcc.n	8001fbe <__clzsi2+0xe>
 8001fba:	0c00      	lsrs	r0, r0, #16
 8001fbc:	3910      	subs	r1, #16
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	4298      	cmp	r0, r3
 8001fc2:	d301      	bcc.n	8001fc8 <__clzsi2+0x18>
 8001fc4:	0a00      	lsrs	r0, r0, #8
 8001fc6:	3908      	subs	r1, #8
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	4298      	cmp	r0, r3
 8001fcc:	d301      	bcc.n	8001fd2 <__clzsi2+0x22>
 8001fce:	0900      	lsrs	r0, r0, #4
 8001fd0:	3904      	subs	r1, #4
 8001fd2:	a202      	add	r2, pc, #8	; (adr r2, 8001fdc <__clzsi2+0x2c>)
 8001fd4:	5c10      	ldrb	r0, [r2, r0]
 8001fd6:	1840      	adds	r0, r0, r1
 8001fd8:	4770      	bx	lr
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	02020304 	.word	0x02020304
 8001fe0:	01010101 	.word	0x01010101
	...

08001fec <__clzdi2>:
 8001fec:	b510      	push	{r4, lr}
 8001fee:	2900      	cmp	r1, #0
 8001ff0:	d103      	bne.n	8001ffa <__clzdi2+0xe>
 8001ff2:	f7ff ffdd 	bl	8001fb0 <__clzsi2>
 8001ff6:	3020      	adds	r0, #32
 8001ff8:	e002      	b.n	8002000 <__clzdi2+0x14>
 8001ffa:	1c08      	adds	r0, r1, #0
 8001ffc:	f7ff ffd8 	bl	8001fb0 <__clzsi2>
 8002000:	bd10      	pop	{r4, pc}
 8002002:	46c0      	nop			; (mov r8, r8)

08002004 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800200a:	003b      	movs	r3, r7
 800200c:	0018      	movs	r0, r3
 800200e:	2308      	movs	r3, #8
 8002010:	001a      	movs	r2, r3
 8002012:	2100      	movs	r1, #0
 8002014:	f006 fd3a 	bl	8008a8c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <MX_ADC_Init+0xc0>)
 800201a:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <MX_ADC_Init+0xc4>)
 800201c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002020:	2200      	movs	r2, #0
 8002022:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	05d2      	lsls	r2, r2, #23
 800202a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <MX_ADC_Init+0xc0>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002034:	2200      	movs	r2, #0
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <MX_ADC_Init+0xc0>)
 800203a:	2201      	movs	r2, #1
 800203c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002046:	2220      	movs	r2, #32
 8002048:	2100      	movs	r1, #0
 800204a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <MX_ADC_Init+0xc0>)
 800204e:	2221      	movs	r2, #33	; 0x21
 8002050:	2100      	movs	r1, #0
 8002052:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002056:	2200      	movs	r2, #0
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_ADC_Init+0xc0>)
 800205c:	22c2      	movs	r2, #194	; 0xc2
 800205e:	32ff      	adds	r2, #255	; 0xff
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002064:	222c      	movs	r2, #44	; 0x2c
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <MX_ADC_Init+0xc0>)
 800206c:	2204      	movs	r2, #4
 800206e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_ADC_Init+0xc0>)
 800207e:	2200      	movs	r2, #0
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_ADC_Init+0xc0>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_ADC_Init+0xc0>)
 800208a:	0018      	movs	r0, r3
 800208c:	f003 f994 	bl	80053b8 <HAL_ADC_Init>
 8002090:	1e03      	subs	r3, r0, #0
 8002092:	d001      	beq.n	8002098 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002094:	f001 ff34 	bl	8003f00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002098:	003b      	movs	r3, r7
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800209e:	003b      	movs	r3, r7
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	0152      	lsls	r2, r2, #5
 80020a4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020a6:	003a      	movs	r2, r7
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_ADC_Init+0xc0>)
 80020aa:	0011      	movs	r1, r2
 80020ac:	0018      	movs	r0, r3
 80020ae:	f003 fbed 	bl	800588c <HAL_ADC_ConfigChannel>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d001      	beq.n	80020ba <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80020b6:	f001 ff23 	bl	8003f00 <Error_Handler>
  }

}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b002      	add	sp, #8
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	20000610 	.word	0x20000610
 80020c8:	40012400 	.word	0x40012400

080020cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	230c      	movs	r3, #12
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	0018      	movs	r0, r3
 80020da:	2314      	movs	r3, #20
 80020dc:	001a      	movs	r2, r3
 80020de:	2100      	movs	r1, #0
 80020e0:	f006 fcd4 	bl	8008a8c <memset>
  if(adcHandle->Instance==ADC1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_ADC_MspInit+0x74>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d123      	bne.n	8002136 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_ADC_MspInit+0x78>)
 80020f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <HAL_ADC_MspInit+0x78>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0089      	lsls	r1, r1, #2
 80020f8:	430a      	orrs	r2, r1
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_ADC_MspInit+0x78>)
 80020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_ADC_MspInit+0x78>)
 8002102:	2101      	movs	r1, #1
 8002104:	430a      	orrs	r2, r1
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_ADC_MspInit+0x78>)
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	2201      	movs	r2, #1
 800210e:	4013      	ands	r3, r2
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002114:	210c      	movs	r1, #12
 8002116:	187b      	adds	r3, r7, r1
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211c:	187b      	adds	r3, r7, r1
 800211e:	2203      	movs	r2, #3
 8002120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	187a      	adds	r2, r7, r1
 800212a:	23a0      	movs	r3, #160	; 0xa0
 800212c:	05db      	lsls	r3, r3, #23
 800212e:	0011      	movs	r1, r2
 8002130:	0018      	movs	r0, r3
 8002132:	f003 fd95 	bl	8005c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	46bd      	mov	sp, r7
 800213a:	b008      	add	sp, #32
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	40012400 	.word	0x40012400
 8002144:	40021000 	.word	0x40021000

08002148 <depth_switch_check_gpio>:




int depth_switch_check_gpio()
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
	int bitstatus;

	if ((GPIOA->IDR & GPIO_PIN_9) != (uint32_t)GPIO_PIN_RESET)
 800214e:	23a0      	movs	r3, #160	; 0xa0
 8002150:	05db      	lsls	r3, r3, #23
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4013      	ands	r3, r2
 800215a:	d002      	beq.n	8002162 <depth_switch_check_gpio+0x1a>
  	{
    	bitstatus = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	e001      	b.n	8002166 <depth_switch_check_gpio+0x1e>
  	}
  	else
  	{
    	bitstatus = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
  	}

	return bitstatus;
 8002166:	687b      	ldr	r3, [r7, #4]
}
 8002168:	0018      	movs	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <depth_switch_turn_signal_led>:


void depth_switch_turn_signal_led(int led_number)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	// turn all leds off
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3, GPIO_PIN_SET);// turn leds off
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <depth_switch_turn_signal_led+0x80>)
 800217a:	2201      	movs	r2, #1
 800217c:	210f      	movs	r1, #15
 800217e:	0018      	movs	r0, r3
 8002180:	f003 fee4 	bl	8005f4c <HAL_GPIO_WritePin>

	if(led_number == 1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d106      	bne.n	8002198 <depth_switch_turn_signal_led+0x28>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <depth_switch_turn_signal_led+0x80>)
 800218c:	2200      	movs	r2, #0
 800218e:	2101      	movs	r1, #1
 8002190:	0018      	movs	r0, r3
 8002192:	f003 fedb 	bl	8005f4c <HAL_GPIO_WritePin>
	{
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3, GPIO_PIN_RESET);// turn leds on

	}

}
 8002196:	e026      	b.n	80021e6 <depth_switch_turn_signal_led+0x76>
	else if(led_number == 2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d106      	bne.n	80021ac <depth_switch_turn_signal_led+0x3c>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <depth_switch_turn_signal_led+0x80>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	2102      	movs	r1, #2
 80021a4:	0018      	movs	r0, r3
 80021a6:	f003 fed1 	bl	8005f4c <HAL_GPIO_WritePin>
}
 80021aa:	e01c      	b.n	80021e6 <depth_switch_turn_signal_led+0x76>
	else if(led_number == 3)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d106      	bne.n	80021c0 <depth_switch_turn_signal_led+0x50>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <depth_switch_turn_signal_led+0x80>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	2104      	movs	r1, #4
 80021b8:	0018      	movs	r0, r3
 80021ba:	f003 fec7 	bl	8005f4c <HAL_GPIO_WritePin>
}
 80021be:	e012      	b.n	80021e6 <depth_switch_turn_signal_led+0x76>
	else if(led_number == 4)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d106      	bne.n	80021d4 <depth_switch_turn_signal_led+0x64>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <depth_switch_turn_signal_led+0x80>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	2108      	movs	r1, #8
 80021cc:	0018      	movs	r0, r3
 80021ce:	f003 febd 	bl	8005f4c <HAL_GPIO_WritePin>
}
 80021d2:	e008      	b.n	80021e6 <depth_switch_turn_signal_led+0x76>
	else if(led_number == 5) // test mode all leds on
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d105      	bne.n	80021e6 <depth_switch_turn_signal_led+0x76>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3, GPIO_PIN_RESET);// turn leds on
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <depth_switch_turn_signal_led+0x80>)
 80021dc:	2200      	movs	r2, #0
 80021de:	210f      	movs	r1, #15
 80021e0:	0018      	movs	r0, r3
 80021e2:	f003 feb3 	bl	8005f4c <HAL_GPIO_WritePin>
}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b002      	add	sp, #8
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	50000400 	.word	0x50000400

080021f4 <depth_switch_step_current_depth>:



double depth_switch_step_current_depth(double increment)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6038      	str	r0, [r7, #0]
 80021fc:	6079      	str	r1, [r7, #4]
		}
	}
	*/


	if(increment == INC_ONE)
 80021fe:	2200      	movs	r2, #0
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <depth_switch_step_current_depth+0xd0>)
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	f7fe f823 	bl	8000250 <__aeabi_dcmpeq>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d01a      	beq.n	8002244 <depth_switch_step_current_depth+0x50>
	{
		order0++;
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <depth_switch_step_current_depth+0xd4>)
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <depth_switch_step_current_depth+0xd0>)
 8002218:	f7fe f948 	bl	80004ac <__aeabi_dadd>
 800221c:	0003      	movs	r3, r0
 800221e:	000c      	movs	r4, r1
 8002220:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <depth_switch_step_current_depth+0xd4>)
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	6054      	str	r4, [r2, #4]
		if(order0 >= 10)
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <depth_switch_step_current_depth+0xd4>)
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <depth_switch_step_current_depth+0xd8>)
 8002230:	f7fe f832 	bl	8000298 <__aeabi_dcmpge>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d027      	beq.n	8002288 <depth_switch_step_current_depth+0x94>
			order0 = 0;
 8002238:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <depth_switch_step_current_depth+0xd4>)
 800223a:	2300      	movs	r3, #0
 800223c:	2400      	movs	r4, #0
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	6054      	str	r4, [r2, #4]
 8002242:	e021      	b.n	8002288 <depth_switch_step_current_depth+0x94>
	}
	else if(increment == INC_TEN)
 8002244:	2200      	movs	r2, #0
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <depth_switch_step_current_depth+0xd8>)
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f7fe f800 	bl	8000250 <__aeabi_dcmpeq>
 8002250:	1e03      	subs	r3, r0, #0
 8002252:	d019      	beq.n	8002288 <depth_switch_step_current_depth+0x94>
	{
		order1++;
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <depth_switch_step_current_depth+0xdc>)
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <depth_switch_step_current_depth+0xd0>)
 800225e:	f7fe f925 	bl	80004ac <__aeabi_dadd>
 8002262:	0003      	movs	r3, r0
 8002264:	000c      	movs	r4, r1
 8002266:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <depth_switch_step_current_depth+0xdc>)
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	6054      	str	r4, [r2, #4]
		if(order1 >= 5)
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <depth_switch_step_current_depth+0xdc>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <depth_switch_step_current_depth+0xe0>)
 8002276:	f7fe f80f 	bl	8000298 <__aeabi_dcmpge>
 800227a:	1e03      	subs	r3, r0, #0
 800227c:	d004      	beq.n	8002288 <depth_switch_step_current_depth+0x94>
			order1 = 0;
 800227e:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <depth_switch_step_current_depth+0xdc>)
 8002280:	2300      	movs	r3, #0
 8002282:	2400      	movs	r4, #0
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	6054      	str	r4, [r2, #4]
	}

	current_depth = order1*10.0 + order0;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <depth_switch_step_current_depth+0xdc>)
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	6859      	ldr	r1, [r3, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <depth_switch_step_current_depth+0xd8>)
 8002292:	f7ff f831 	bl	80012f8 <__aeabi_dmul>
 8002296:	0003      	movs	r3, r0
 8002298:	000c      	movs	r4, r1
 800229a:	0018      	movs	r0, r3
 800229c:	0021      	movs	r1, r4
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <depth_switch_step_current_depth+0xd4>)
 80022a0:	685c      	ldr	r4, [r3, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	001a      	movs	r2, r3
 80022a6:	0023      	movs	r3, r4
 80022a8:	f7fe f900 	bl	80004ac <__aeabi_dadd>
 80022ac:	0003      	movs	r3, r0
 80022ae:	000c      	movs	r4, r1
 80022b0:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <depth_switch_step_current_depth+0xe4>)
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	6054      	str	r4, [r2, #4]
}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	0018      	movs	r0, r3
 80022ba:	0021      	movs	r1, r4
 80022bc:	46bd      	mov	sp, r7
 80022be:	b003      	add	sp, #12
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	3ff00000 	.word	0x3ff00000
 80022c8:	20000008 	.word	0x20000008
 80022cc:	40240000 	.word	0x40240000
 80022d0:	200000b8 	.word	0x200000b8
 80022d4:	40140000 	.word	0x40140000
 80022d8:	20000000 	.word	0x20000000

080022dc <depth_switch_step_to_test>:


void depth_switch_step_to_test()
{
 80022dc:	b5b0      	push	{r4, r5, r7, lr}
 80022de:	af00      	add	r7, sp, #0
	current_depth = DEPTH0;
 80022e0:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <depth_switch_step_to_test+0x1c>)
 80022e2:	2300      	movs	r3, #0
 80022e4:	4c05      	ldr	r4, [pc, #20]	; (80022fc <depth_switch_step_to_test+0x20>)
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	6054      	str	r4, [r2, #4]
	depth_switch_turn_signal_led(5);
 80022ea:	2005      	movs	r0, #5
 80022ec:	f7ff ff40 	bl	8002170 <depth_switch_turn_signal_led>
}
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bdb0      	pop	{r4, r5, r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	20000000 	.word	0x20000000
 80022fc:	3ff00000 	.word	0x3ff00000

08002300 <depth_switch_get_current_depth>:

double depth_switch_get_current_depth()
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	af00      	add	r7, sp, #0
	return current_depth;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <depth_switch_get_current_depth+0x14>)
 8002306:	685c      	ldr	r4, [r3, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
}
 800230a:	0018      	movs	r0, r3
 800230c:	0021      	movs	r1, r4
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	20000000 	.word	0x20000000

08002318 <depth_switch_action>:




void depth_switch_action()
{
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	af00      	add	r7, sp, #0
	if(!depth_switch_check_gpio()) // key pressed
 800231c:	f7ff ff14 	bl	8002148 <depth_switch_check_gpio>
 8002320:	1e03      	subs	r3, r0, #0
 8002322:	d105      	bne.n	8002330 <depth_switch_action+0x18>
		depth_switch_key_press_period_counter++;
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <depth_switch_action+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <depth_switch_action+0x64>)
 800232c:	601a      	str	r2, [r3, #0]

			depth_switch_key_press_period_counter = 0;
		}

	}
}
 800232e:	e022      	b.n	8002376 <depth_switch_action+0x5e>
		if(depth_switch_key_press_period_counter > 0)
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <depth_switch_action+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	dd1e      	ble.n	8002376 <depth_switch_action+0x5e>
			if(depth_switch_key_press_period_counter <= 3)     // less then 3 seconds
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <depth_switch_action+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b03      	cmp	r3, #3
 800233e:	dc06      	bgt.n	800234e <depth_switch_action+0x36>
				depth_switch_step_current_depth(INC_ONE);
 8002340:	2300      	movs	r3, #0
 8002342:	4c0f      	ldr	r4, [pc, #60]	; (8002380 <depth_switch_action+0x68>)
 8002344:	0018      	movs	r0, r3
 8002346:	0021      	movs	r1, r4
 8002348:	f7ff ff54 	bl	80021f4 <depth_switch_step_current_depth>
 800234c:	e010      	b.n	8002370 <depth_switch_action+0x58>
			else if((depth_switch_key_press_period_counter > 3) && (depth_switch_key_press_period_counter <= 17))     // 
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <depth_switch_action+0x64>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b03      	cmp	r3, #3
 8002354:	dd0a      	ble.n	800236c <depth_switch_action+0x54>
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <depth_switch_action+0x64>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b11      	cmp	r3, #17
 800235c:	dc06      	bgt.n	800236c <depth_switch_action+0x54>
				depth_switch_step_current_depth(INC_TEN);
 800235e:	2300      	movs	r3, #0
 8002360:	4c08      	ldr	r4, [pc, #32]	; (8002384 <depth_switch_action+0x6c>)
 8002362:	0018      	movs	r0, r3
 8002364:	0021      	movs	r1, r4
 8002366:	f7ff ff45 	bl	80021f4 <depth_switch_step_current_depth>
 800236a:	e001      	b.n	8002370 <depth_switch_action+0x58>
				depth_switch_step_to_test();
 800236c:	f7ff ffb6 	bl	80022dc <depth_switch_step_to_test>
			depth_switch_key_press_period_counter = 0;
 8002370:	4b02      	ldr	r3, [pc, #8]	; (800237c <depth_switch_action+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	bdb0      	pop	{r4, r5, r7, pc}
 800237c:	200000c0 	.word	0x200000c0
 8002380:	3ff00000 	.word	0x3ff00000
 8002384:	40240000 	.word	0x40240000

08002388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238e:	240c      	movs	r4, #12
 8002390:	193b      	adds	r3, r7, r4
 8002392:	0018      	movs	r0, r3
 8002394:	2314      	movs	r3, #20
 8002396:	001a      	movs	r2, r3
 8002398:	2100      	movs	r1, #0
 800239a:	f006 fb77 	bl	8008a8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	4b31      	ldr	r3, [pc, #196]	; (8002464 <MX_GPIO_Init+0xdc>)
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	4b30      	ldr	r3, [pc, #192]	; (8002464 <MX_GPIO_Init+0xdc>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <MX_GPIO_Init+0xdc>)
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	2201      	movs	r2, #1
 80023b0:	4013      	ands	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <MX_GPIO_Init+0xdc>)
 80023b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <MX_GPIO_Init+0xdc>)
 80023bc:	2102      	movs	r1, #2
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80023c2:	4b28      	ldr	r3, [pc, #160]	; (8002464 <MX_GPIO_Init+0xdc>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	2202      	movs	r2, #2
 80023c8:	4013      	ands	r3, r2
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led0_Pin|led1_Pin|led2_Pin|led3_Pin, GPIO_PIN_RESET);
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <MX_GPIO_Init+0xe0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	210f      	movs	r1, #15
 80023d4:	0018      	movs	r0, r3
 80023d6:	f003 fdb9 	bl	8005f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, actuator0_Pin|actuator1_Pin, GPIO_PIN_RESET);
 80023da:	23c0      	movs	r3, #192	; 0xc0
 80023dc:	0159      	lsls	r1, r3, #5
 80023de:	23a0      	movs	r3, #160	; 0xa0
 80023e0:	05db      	lsls	r3, r3, #23
 80023e2:	2200      	movs	r2, #0
 80023e4:	0018      	movs	r0, r3
 80023e6:	f003 fdb1 	bl	8005f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = led0_Pin|led1_Pin|led2_Pin|led3_Pin;
 80023ea:	193b      	adds	r3, r7, r4
 80023ec:	220f      	movs	r2, #15
 80023ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f0:	193b      	adds	r3, r7, r4
 80023f2:	2201      	movs	r2, #1
 80023f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	193b      	adds	r3, r7, r4
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	193b      	adds	r3, r7, r4
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002402:	193b      	adds	r3, r7, r4
 8002404:	4a18      	ldr	r2, [pc, #96]	; (8002468 <MX_GPIO_Init+0xe0>)
 8002406:	0019      	movs	r1, r3
 8002408:	0010      	movs	r0, r2
 800240a:	f003 fc29 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = btn0_Pin|btn1_Pin;
 800240e:	193b      	adds	r3, r7, r4
 8002410:	22c0      	movs	r2, #192	; 0xc0
 8002412:	00d2      	lsls	r2, r2, #3
 8002414:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002416:	193b      	adds	r3, r7, r4
 8002418:	2200      	movs	r2, #0
 800241a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	193b      	adds	r3, r7, r4
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	193a      	adds	r2, r7, r4
 8002424:	23a0      	movs	r3, #160	; 0xa0
 8002426:	05db      	lsls	r3, r3, #23
 8002428:	0011      	movs	r1, r2
 800242a:	0018      	movs	r0, r3
 800242c:	f003 fc18 	bl	8005c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = actuator0_Pin|actuator1_Pin;
 8002430:	0021      	movs	r1, r4
 8002432:	187b      	adds	r3, r7, r1
 8002434:	22c0      	movs	r2, #192	; 0xc0
 8002436:	0152      	lsls	r2, r2, #5
 8002438:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243a:	187b      	adds	r3, r7, r1
 800243c:	2201      	movs	r2, #1
 800243e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	187b      	adds	r3, r7, r1
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	187b      	adds	r3, r7, r1
 8002448:	2200      	movs	r2, #0
 800244a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	187a      	adds	r2, r7, r1
 800244e:	23a0      	movs	r3, #160	; 0xa0
 8002450:	05db      	lsls	r3, r3, #23
 8002452:	0011      	movs	r1, r2
 8002454:	0018      	movs	r0, r3
 8002456:	f003 fc03 	bl	8005c60 <HAL_GPIO_Init>

}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b009      	add	sp, #36	; 0x24
 8002460:	bd90      	pop	{r4, r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	40021000 	.word	0x40021000
 8002468:	50000400 	.word	0x50000400

0800246c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <MX_I2C1_Init+0x74>)
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <MX_I2C1_Init+0x78>)
 8002474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <MX_I2C1_Init+0x74>)
 8002478:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <MX_I2C1_Init+0x7c>)
 800247a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <MX_I2C1_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <MX_I2C1_Init+0x74>)
 8002484:	2201      	movs	r2, #1
 8002486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <MX_I2C1_Init+0x74>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <MX_I2C1_Init+0x74>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <MX_I2C1_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <MX_I2C1_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <MX_I2C1_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <MX_I2C1_Init+0x74>)
 80024a8:	0018      	movs	r0, r3
 80024aa:	f003 fd6d 	bl	8005f88 <HAL_I2C_Init>
 80024ae:	1e03      	subs	r3, r0, #0
 80024b0:	d001      	beq.n	80024b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024b2:	f001 fd25 	bl	8003f00 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <MX_I2C1_Init+0x74>)
 80024b8:	2100      	movs	r1, #0
 80024ba:	0018      	movs	r0, r3
 80024bc:	f004 fa9a 	bl	80069f4 <HAL_I2CEx_ConfigAnalogFilter>
 80024c0:	1e03      	subs	r3, r0, #0
 80024c2:	d001      	beq.n	80024c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024c4:	f001 fd1c 	bl	8003f00 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <MX_I2C1_Init+0x74>)
 80024ca:	2100      	movs	r1, #0
 80024cc:	0018      	movs	r0, r3
 80024ce:	f004 fadd 	bl	8006a8c <HAL_I2CEx_ConfigDigitalFilter>
 80024d2:	1e03      	subs	r3, r0, #0
 80024d4:	d001      	beq.n	80024da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024d6:	f001 fd13 	bl	8003f00 <Error_Handler>
  }

}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	2000066c 	.word	0x2000066c
 80024e4:	40005400 	.word	0x40005400
 80024e8:	00707cbb 	.word	0x00707cbb

080024ec <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	2314      	movs	r3, #20
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	0018      	movs	r0, r3
 80024fa:	2314      	movs	r3, #20
 80024fc:	001a      	movs	r2, r3
 80024fe:	2100      	movs	r1, #0
 8002500:	f006 fac4 	bl	8008a8c <memset>
  if(i2cHandle->Instance==I2C1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a30      	ldr	r2, [pc, #192]	; (80025cc <HAL_I2C_MspInit+0xe0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d12a      	bne.n	8002564 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 8002510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002512:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 8002514:	2102      	movs	r1, #2
 8002516:	430a      	orrs	r2, r1
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002526:	2114      	movs	r1, #20
 8002528:	187b      	adds	r3, r7, r1
 800252a:	22c0      	movs	r2, #192	; 0xc0
 800252c:	0092      	lsls	r2, r2, #2
 800252e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002530:	187b      	adds	r3, r7, r1
 8002532:	2212      	movs	r2, #18
 8002534:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002536:	187b      	adds	r3, r7, r1
 8002538:	2201      	movs	r2, #1
 800253a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	187b      	adds	r3, r7, r1
 800253e:	2203      	movs	r2, #3
 8002540:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002542:	187b      	adds	r3, r7, r1
 8002544:	2204      	movs	r2, #4
 8002546:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002548:	187b      	adds	r3, r7, r1
 800254a:	4a22      	ldr	r2, [pc, #136]	; (80025d4 <HAL_I2C_MspInit+0xe8>)
 800254c:	0019      	movs	r1, r3
 800254e:	0010      	movs	r0, r2
 8002550:	f003 fb86 	bl	8005c60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 8002556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002558:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 800255a:	2180      	movs	r1, #128	; 0x80
 800255c:	0389      	lsls	r1, r1, #14
 800255e:	430a      	orrs	r2, r1
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002562:	e02e      	b.n	80025c2 <HAL_I2C_MspInit+0xd6>
  else if(i2cHandle->Instance==I2C2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_I2C_MspInit+0xec>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d129      	bne.n	80025c2 <HAL_I2C_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 8002570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 8002574:	2102      	movs	r1, #2
 8002576:	430a      	orrs	r2, r1
 8002578:	62da      	str	r2, [r3, #44]	; 0x2c
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002586:	2114      	movs	r1, #20
 8002588:	187b      	adds	r3, r7, r1
 800258a:	22c0      	movs	r2, #192	; 0xc0
 800258c:	01d2      	lsls	r2, r2, #7
 800258e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002590:	187b      	adds	r3, r7, r1
 8002592:	2212      	movs	r2, #18
 8002594:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002596:	187b      	adds	r3, r7, r1
 8002598:	2201      	movs	r2, #1
 800259a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	187b      	adds	r3, r7, r1
 800259e:	2203      	movs	r2, #3
 80025a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 80025a2:	187b      	adds	r3, r7, r1
 80025a4:	2205      	movs	r2, #5
 80025a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <HAL_I2C_MspInit+0xe8>)
 80025ac:	0019      	movs	r1, r3
 80025ae:	0010      	movs	r0, r2
 80025b0:	f003 fb56 	bl	8005c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 80025b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_I2C_MspInit+0xe4>)
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	03c9      	lsls	r1, r1, #15
 80025be:	430a      	orrs	r2, r1
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b00a      	add	sp, #40	; 0x28
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	40005400 	.word	0x40005400
 80025d0:	40021000 	.word	0x40021000
 80025d4:	50000400 	.word	0x50000400
 80025d8:	40005800 	.word	0x40005800

080025dc <main>:
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
int main(void)
{
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b0a1      	sub	sp, #132	; 0x84
 80025e0:	af04      	add	r7, sp, #16

	int i;

  	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  	HAL_Init();
 80025e2:	f002 fe6b 	bl	80052bc <HAL_Init>

  	/* Configure the system clock */
  	SystemClock_Config();
 80025e6:	f001 fc15 	bl	8003e14 <SystemClock_Config>

    MX_GPIO_Init();
 80025ea:	f7ff fecd 	bl	8002388 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 80025ee:	f002 fcfb 	bl	8004fe8 <MX_USART1_UART_Init>
  	MX_I2C1_Init();
 80025f2:	f7ff ff3b 	bl	800246c <MX_I2C1_Init>
  	ssd1306_WriteString("DiveCmp", Font_16x26, White);
  	ssd1306_SetCursor(0,30);
  	ssd1306_WriteString("Start..", Font_16x26, White);
  	ssd1306_UpdateScreen();
	*/
    ssd1306_set_i2c_port(&hi2c1, 1);
 80025f6:	4be7      	ldr	r3, [pc, #924]	; (8002994 <main+0x3b8>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	0018      	movs	r0, r3
 80025fc:	f002 f988 	bl	8004910 <ssd1306_set_i2c_port>
  	ssd1306_Init();
 8002600:	f002 f9be 	bl	8004980 <ssd1306_Init>
  	HAL_Delay(100);
 8002604:	2064      	movs	r0, #100	; 0x64
 8002606:	f002 feb9 	bl	800537c <HAL_Delay>
 
 
 	MX_SPI1_Init();
 800260a:	f002 f905 	bl	8004818 <MX_SPI1_Init>
    // enable spi1
    SPI1->CR1 |= SPI_CR1_SPE;
 800260e:	4be2      	ldr	r3, [pc, #904]	; (8002998 <main+0x3bc>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4be1      	ldr	r3, [pc, #900]	; (8002998 <main+0x3bc>)
 8002614:	2140      	movs	r1, #64	; 0x40
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]
    MX_ADC_Init();
 800261a:	f7ff fcf3 	bl	8002004 <MX_ADC_Init>

	//---------------------------------
  	//HAL_Delay(100);
	rtc_ds3231_set_i2c_handle(&hi2c2);
 800261e:	4bdf      	ldr	r3, [pc, #892]	; (800299c <main+0x3c0>)
 8002620:	0018      	movs	r0, r3
 8002622:	f001 ffe1 	bl	80045e8 <rtc_ds3231_set_i2c_handle>
	//rtc_ds3231_set_time(16, 40, 0);
	//rtc_ds3231_set_date(22, 11, 19);
	//at24c32_set_i2c_handle(&hi2c2);

	one_second_timer_init();
 8002626:	f001 fc70 	bl	8003f0a <one_second_timer_init>
	one_second_timer_start();
 800262a:	f001 fc77 	bl	8003f1c <one_second_timer_start>

	pressure_sensor_object_init();
 800262e:	f001 fcd3 	bl	8003fd8 <pressure_sensor_object_init>
	HAL_Delay(1000);
 8002632:	23fa      	movs	r3, #250	; 0xfa
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	0018      	movs	r0, r3
 8002638:	f002 fea0 	bl	800537c <HAL_Delay>
	uint32_t surface_pressure = 101325;
 800263c:	4bd8      	ldr	r3, [pc, #864]	; (80029a0 <main+0x3c4>)
 800263e:	66fb      	str	r3, [r7, #108]	; 0x6c
	depth_switch_turn_signal_led(1);
 8002640:	2001      	movs	r0, #1
 8002642:	f7ff fd95 	bl	8002170 <depth_switch_turn_signal_led>

	rtc_ds3231_action();
 8002646:	f001 ffdd 	bl	8004604 <rtc_ds3231_action>
	//atm_barometer_init();
	int odd_even = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	66bb      	str	r3, [r7, #104]	; 0x68
	int led_counter = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	63fb      	str	r3, [r7, #60]	; 0x3c

	int mem_test_base = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	63bb      	str	r3, [r7, #56]	; 0x38

	uint8_t at24c32_shifted_address = 0x50 << 1;
 8002656:	2367      	movs	r3, #103	; 0x67
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	22a0      	movs	r2, #160	; 0xa0
 800265c:	701a      	strb	r2, [r3, #0]
	uint16_t eeprom_address = 64;
 800265e:	2336      	movs	r3, #54	; 0x36
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2240      	movs	r2, #64	; 0x40
 8002664:	801a      	strh	r2, [r3, #0]
	uint16_t eeprom_debug_address = 64;
 8002666:	2364      	movs	r3, #100	; 0x64
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	801a      	strh	r2, [r3, #0]
	int eeprom_number_of_records = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t log_counter = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	65fb      	str	r3, [r7, #92]	; 0x5c
	//int sin_counter = 0;
	//double dt = 2.0*3.14/30.0;
	// log debug
	//****************************************

	int actuator_counter = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	65bb      	str	r3, [r7, #88]	; 0x58

	// debug!!!
	//double P_sym = surface_pressure;

	if(!depth_switch_check_gpio())
 800267a:	f7ff fd65 	bl	8002148 <depth_switch_check_gpio>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d001      	beq.n	8002686 <main+0xaa>
 8002682:	f000 fcb3 	bl	8002fec <main+0xa10>
	{
		// log mode
  	    ssd1306_SetCursor(0,0);
 8002686:	2100      	movs	r1, #0
 8002688:	2000      	movs	r0, #0
 800268a:	f002 fb77 	bl	8004d7c <ssd1306_SetCursor>
	    sprintf(message, "log mode");
 800268e:	4bc5      	ldr	r3, [pc, #788]	; (80029a4 <main+0x3c8>)
 8002690:	4ac5      	ldr	r2, [pc, #788]	; (80029a8 <main+0x3cc>)
 8002692:	ca03      	ldmia	r2!, {r0, r1}
 8002694:	c303      	stmia	r3!, {r0, r1}
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	701a      	strb	r2, [r3, #0]
  	    ssd1306_WriteString(message, Font_11x18, White);
 800269a:	4ac4      	ldr	r2, [pc, #784]	; (80029ac <main+0x3d0>)
 800269c:	48c1      	ldr	r0, [pc, #772]	; (80029a4 <main+0x3c8>)
 800269e:	2301      	movs	r3, #1
 80026a0:	6811      	ldr	r1, [r2, #0]
 80026a2:	6852      	ldr	r2, [r2, #4]
 80026a4:	f002 fb40 	bl	8004d28 <ssd1306_WriteString>
  	    ssd1306_UpdateScreen();                                                                               
 80026a8:	f002 f9fe 	bl	8004aa8 <ssd1306_UpdateScreen>

	    HAL_Delay(2000);
 80026ac:	23fa      	movs	r3, #250	; 0xfa
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	0018      	movs	r0, r3
 80026b2:	f002 fe63 	bl	800537c <HAL_Delay>

  	    ssd1306_SetCursor(0,0);
 80026b6:	2100      	movs	r1, #0
 80026b8:	2000      	movs	r0, #0
 80026ba:	f002 fb5f 	bl	8004d7c <ssd1306_SetCursor>
	    sprintf(message, "log upload...");
 80026be:	4bb9      	ldr	r3, [pc, #740]	; (80029a4 <main+0x3c8>)
 80026c0:	4abb      	ldr	r2, [pc, #748]	; (80029b0 <main+0x3d4>)
 80026c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80026c4:	c313      	stmia	r3!, {r0, r1, r4}
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	801a      	strh	r2, [r3, #0]
  	    ssd1306_WriteString(message, Font_11x18, White);
 80026ca:	4ab8      	ldr	r2, [pc, #736]	; (80029ac <main+0x3d0>)
 80026cc:	48b5      	ldr	r0, [pc, #724]	; (80029a4 <main+0x3c8>)
 80026ce:	2301      	movs	r3, #1
 80026d0:	6811      	ldr	r1, [r2, #0]
 80026d2:	6852      	ldr	r2, [r2, #4]
 80026d4:	f002 fb28 	bl	8004d28 <ssd1306_WriteString>
  	    ssd1306_UpdateScreen();                                                                               
 80026d8:	f002 f9e6 	bl	8004aa8 <ssd1306_UpdateScreen>

//*
	int end_of_log_reached = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	657b      	str	r3, [r7, #84]	; 0x54
	HAL_Delay(1000);
 80026e0:	23fa      	movs	r3, #250	; 0xfa
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	0018      	movs	r0, r3
 80026e6:	f002 fe49 	bl	800537c <HAL_Delay>
	uint16_t eeprom_debug_address = 64;
 80026ea:	2452      	movs	r4, #82	; 0x52
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	2240      	movs	r2, #64	; 0x40
 80026f0:	801a      	strh	r2, [r3, #0]
	uint8_t b0;
	uint8_t at24c32_shifted_address = 0x50 << 1;
 80026f2:	250b      	movs	r5, #11
 80026f4:	197b      	adds	r3, r7, r5
 80026f6:	22a0      	movs	r2, #160	; 0xa0
 80026f8:	701a      	strb	r2, [r3, #0]
	static I2C_HandleTypeDef *at24c32_i2c_handle = &hi2c2;

	sprintf(message, "\r\n");
 80026fa:	4baa      	ldr	r3, [pc, #680]	; (80029a4 <main+0x3c8>)
 80026fc:	4aad      	ldr	r2, [pc, #692]	; (80029b4 <main+0x3d8>)
 80026fe:	8811      	ldrh	r1, [r2, #0]
 8002700:	8019      	strh	r1, [r3, #0]
 8002702:	7892      	ldrb	r2, [r2, #2]
 8002704:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002706:	4ba7      	ldr	r3, [pc, #668]	; (80029a4 <main+0x3c8>)
 8002708:	0018      	movs	r0, r3
 800270a:	f7fd fcfd 	bl	8000108 <strlen>
 800270e:	0003      	movs	r3, r0
 8002710:	b29a      	uxth	r2, r3
 8002712:	23fa      	movs	r3, #250	; 0xfa
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	49a3      	ldr	r1, [pc, #652]	; (80029a4 <main+0x3c8>)
 8002718:	48a7      	ldr	r0, [pc, #668]	; (80029b8 <main+0x3dc>)
 800271a:	f005 fc89 	bl	8008030 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 800271e:	4ba1      	ldr	r3, [pc, #644]	; (80029a4 <main+0x3c8>)
 8002720:	0018      	movs	r0, r3
 8002722:	f7fd fcf1 	bl	8000108 <strlen>
 8002726:	0003      	movs	r3, r0
 8002728:	b29a      	uxth	r2, r3
 800272a:	23fa      	movs	r3, #250	; 0xfa
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	499d      	ldr	r1, [pc, #628]	; (80029a4 <main+0x3c8>)
 8002730:	48a1      	ldr	r0, [pc, #644]	; (80029b8 <main+0x3dc>)
 8002732:	f005 fc7d 	bl	8008030 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002736:	4b9b      	ldr	r3, [pc, #620]	; (80029a4 <main+0x3c8>)
 8002738:	0018      	movs	r0, r3
 800273a:	f7fd fce5 	bl	8000108 <strlen>
 800273e:	0003      	movs	r3, r0
 8002740:	b29a      	uxth	r2, r3
 8002742:	23fa      	movs	r3, #250	; 0xfa
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4997      	ldr	r1, [pc, #604]	; (80029a4 <main+0x3c8>)
 8002748:	489b      	ldr	r0, [pc, #620]	; (80029b8 <main+0x3dc>)
 800274a:	f005 fc71 	bl	8008030 <HAL_UART_Transmit>

	sprintf(message, "log bank 1 start\r\n***********\r\n");
 800274e:	4b95      	ldr	r3, [pc, #596]	; (80029a4 <main+0x3c8>)
 8002750:	4a9a      	ldr	r2, [pc, #616]	; (80029bc <main+0x3e0>)
 8002752:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002754:	c343      	stmia	r3!, {r0, r1, r6}
 8002756:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002758:	c343      	stmia	r3!, {r0, r1, r6}
 800275a:	ca03      	ldmia	r2!, {r0, r1}
 800275c:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 800275e:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <main+0x3c8>)
 8002760:	0018      	movs	r0, r3
 8002762:	f7fd fcd1 	bl	8000108 <strlen>
 8002766:	0003      	movs	r3, r0
 8002768:	b29a      	uxth	r2, r3
 800276a:	23fa      	movs	r3, #250	; 0xfa
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	498d      	ldr	r1, [pc, #564]	; (80029a4 <main+0x3c8>)
 8002770:	4891      	ldr	r0, [pc, #580]	; (80029b8 <main+0x3dc>)
 8002772:	f005 fc5d 	bl	8008030 <HAL_UART_Transmit>

	// read timestamp time
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002776:	4b92      	ldr	r3, [pc, #584]	; (80029c0 <main+0x3e4>)
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	002e      	movs	r6, r5
 800277c:	19bb      	adds	r3, r7, r6
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b299      	uxth	r1, r3
 8002782:	193b      	adds	r3, r7, r4
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	2364      	movs	r3, #100	; 0x64
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	2301      	movs	r3, #1
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	250a      	movs	r5, #10
 8002790:	197b      	adds	r3, r7, r5
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2302      	movs	r3, #2
 8002796:	f003 fdbb 	bl	8006310 <HAL_I2C_Mem_Read>
	message[0] = b0;                                                                                                        			
 800279a:	197b      	adds	r3, r7, r5
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <main+0x3c8>)
 80027a0:	701a      	strb	r2, [r3, #0]
	eeprom_debug_address++;                                                                                                 			
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	881a      	ldrh	r2, [r3, #0]
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	3201      	adds	r2, #1
 80027aa:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 80027ac:	4b84      	ldr	r3, [pc, #528]	; (80029c0 <main+0x3e4>)
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	19bb      	adds	r3, r7, r6
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b299      	uxth	r1, r3
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	2364      	movs	r3, #100	; 0x64
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	2301      	movs	r3, #1
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	197b      	adds	r3, r7, r5
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2302      	movs	r3, #2
 80027c8:	f003 fda2 	bl	8006310 <HAL_I2C_Mem_Read>
	message[1] = b0;                                                                                                        			
 80027cc:	197b      	adds	r3, r7, r5
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	4b74      	ldr	r3, [pc, #464]	; (80029a4 <main+0x3c8>)
 80027d2:	705a      	strb	r2, [r3, #1]
	eeprom_debug_address++;                                                                                                 			
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	3201      	adds	r2, #1
 80027dc:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 80027de:	4b78      	ldr	r3, [pc, #480]	; (80029c0 <main+0x3e4>)
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	19bb      	adds	r3, r7, r6
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b299      	uxth	r1, r3
 80027e8:	193b      	adds	r3, r7, r4
 80027ea:	881a      	ldrh	r2, [r3, #0]
 80027ec:	2364      	movs	r3, #100	; 0x64
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	2301      	movs	r3, #1
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	197b      	adds	r3, r7, r5
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2302      	movs	r3, #2
 80027fa:	f003 fd89 	bl	8006310 <HAL_I2C_Mem_Read>
	message[2] = b0;                                                                                                        			
 80027fe:	197b      	adds	r3, r7, r5
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <main+0x3c8>)
 8002804:	709a      	strb	r2, [r3, #2]
	eeprom_debug_address++;                                                                                                 			
 8002806:	193b      	adds	r3, r7, r4
 8002808:	881a      	ldrh	r2, [r3, #0]
 800280a:	193b      	adds	r3, r7, r4
 800280c:	3201      	adds	r2, #1
 800280e:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 8002810:	4b6b      	ldr	r3, [pc, #428]	; (80029c0 <main+0x3e4>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	19bb      	adds	r3, r7, r6
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b299      	uxth	r1, r3
 800281a:	193b      	adds	r3, r7, r4
 800281c:	881a      	ldrh	r2, [r3, #0]
 800281e:	2364      	movs	r3, #100	; 0x64
 8002820:	9302      	str	r3, [sp, #8]
 8002822:	2301      	movs	r3, #1
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	197b      	adds	r3, r7, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2302      	movs	r3, #2
 800282c:	f003 fd70 	bl	8006310 <HAL_I2C_Mem_Read>
	message[3] = b0;                                                                                                        			
 8002830:	197b      	adds	r3, r7, r5
 8002832:	781a      	ldrb	r2, [r3, #0]
 8002834:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <main+0x3c8>)
 8002836:	70da      	strb	r2, [r3, #3]
	eeprom_debug_address++;                                                                                                 			
 8002838:	193b      	adds	r3, r7, r4
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	193b      	adds	r3, r7, r4
 800283e:	3201      	adds	r2, #1
 8002840:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	if((message[0] == 0) && (message[1] == 0))                                                                                  	
 8002842:	4b58      	ldr	r3, [pc, #352]	; (80029a4 <main+0x3c8>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <main+0x27c>
 800284a:	4b56      	ldr	r3, [pc, #344]	; (80029a4 <main+0x3c8>)
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <main+0x27c>
	{                                                                                                                           	
		end_of_log_reached = 1;                                                                                                 	
 8002852:	2301      	movs	r3, #1
 8002854:	657b      	str	r3, [r7, #84]	; 0x54
 8002856:	e014      	b.n	8002882 <main+0x2a6>
	}                                                                                                                           	
	else                                                                                                                        	
	{                                                                                                                           	
		message[4] = '\r';                                                                                                      	  		
 8002858:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <main+0x3c8>)
 800285a:	220d      	movs	r2, #13
 800285c:	711a      	strb	r2, [r3, #4]
		message[5] = '\n';                                                                                                      	  		
 800285e:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <main+0x3c8>)
 8002860:	220a      	movs	r2, #10
 8002862:	715a      	strb	r2, [r3, #5]
		message[6] = 0;                                                                                                        			
 8002864:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <main+0x3c8>)
 8002866:	2200      	movs	r2, #0
 8002868:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);                                     		    
 800286a:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <main+0x3c8>)
 800286c:	0018      	movs	r0, r3
 800286e:	f7fd fc4b 	bl	8000108 <strlen>
 8002872:	0003      	movs	r3, r0
 8002874:	b29a      	uxth	r2, r3
 8002876:	23fa      	movs	r3, #250	; 0xfa
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	494a      	ldr	r1, [pc, #296]	; (80029a4 <main+0x3c8>)
 800287c:	484e      	ldr	r0, [pc, #312]	; (80029b8 <main+0x3dc>)
 800287e:	f005 fbd7 	bl	8008030 <HAL_UART_Transmit>
	}                                                                                                                           	
	// read timestamp date
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002882:	4b4f      	ldr	r3, [pc, #316]	; (80029c0 <main+0x3e4>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	260b      	movs	r6, #11
 8002888:	19bb      	adds	r3, r7, r6
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b299      	uxth	r1, r3
 800288e:	2452      	movs	r4, #82	; 0x52
 8002890:	193b      	adds	r3, r7, r4
 8002892:	881a      	ldrh	r2, [r3, #0]
 8002894:	2364      	movs	r3, #100	; 0x64
 8002896:	9302      	str	r3, [sp, #8]
 8002898:	2301      	movs	r3, #1
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	250a      	movs	r5, #10
 800289e:	197b      	adds	r3, r7, r5
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2302      	movs	r3, #2
 80028a4:	f003 fd34 	bl	8006310 <HAL_I2C_Mem_Read>
	message[0] = b0;                                                                                                        			
 80028a8:	197b      	adds	r3, r7, r5
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <main+0x3c8>)
 80028ae:	701a      	strb	r2, [r3, #0]
	eeprom_debug_address++;                                                                                                 			
 80028b0:	193b      	adds	r3, r7, r4
 80028b2:	881a      	ldrh	r2, [r3, #0]
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	3201      	adds	r2, #1
 80028b8:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <main+0x3e4>)
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	19bb      	adds	r3, r7, r6
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	b299      	uxth	r1, r3
 80028c4:	193b      	adds	r3, r7, r4
 80028c6:	881a      	ldrh	r2, [r3, #0]
 80028c8:	2364      	movs	r3, #100	; 0x64
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	2301      	movs	r3, #1
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	197b      	adds	r3, r7, r5
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2302      	movs	r3, #2
 80028d6:	f003 fd1b 	bl	8006310 <HAL_I2C_Mem_Read>
	message[1] = b0;                                                                                                        			
 80028da:	197b      	adds	r3, r7, r5
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <main+0x3c8>)
 80028e0:	705a      	strb	r2, [r3, #1]
	eeprom_debug_address++;                                                                                                 			
 80028e2:	193b      	adds	r3, r7, r4
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	193b      	adds	r3, r7, r4
 80028e8:	3201      	adds	r2, #1
 80028ea:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <main+0x3e4>)
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	19bb      	adds	r3, r7, r6
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b299      	uxth	r1, r3
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	881a      	ldrh	r2, [r3, #0]
 80028fa:	2364      	movs	r3, #100	; 0x64
 80028fc:	9302      	str	r3, [sp, #8]
 80028fe:	2301      	movs	r3, #1
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	197b      	adds	r3, r7, r5
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2302      	movs	r3, #2
 8002908:	f003 fd02 	bl	8006310 <HAL_I2C_Mem_Read>
	message[2] = b0;                                                                                                        			
 800290c:	197b      	adds	r3, r7, r5
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <main+0x3c8>)
 8002912:	709a      	strb	r2, [r3, #2]
	eeprom_debug_address++;                                                                                                 			
 8002914:	193b      	adds	r3, r7, r4
 8002916:	881a      	ldrh	r2, [r3, #0]
 8002918:	193b      	adds	r3, r7, r4
 800291a:	3201      	adds	r2, #1
 800291c:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <main+0x3e4>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	19bb      	adds	r3, r7, r6
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b299      	uxth	r1, r3
 8002928:	193b      	adds	r3, r7, r4
 800292a:	881a      	ldrh	r2, [r3, #0]
 800292c:	2364      	movs	r3, #100	; 0x64
 800292e:	9302      	str	r3, [sp, #8]
 8002930:	2301      	movs	r3, #1
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	197b      	adds	r3, r7, r5
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2302      	movs	r3, #2
 800293a:	f003 fce9 	bl	8006310 <HAL_I2C_Mem_Read>
	message[3] = b0;                                                                                                        			
 800293e:	197b      	adds	r3, r7, r5
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <main+0x3c8>)
 8002944:	70da      	strb	r2, [r3, #3]
	eeprom_debug_address++;                                                                                                 			
 8002946:	193b      	adds	r3, r7, r4
 8002948:	881a      	ldrh	r2, [r3, #0]
 800294a:	193b      	adds	r3, r7, r4
 800294c:	3201      	adds	r2, #1
 800294e:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	if((message[0] == 0) && (message[1] == 0))                                                                                  	
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <main+0x3c8>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <main+0x38a>
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <main+0x3c8>)
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <main+0x38a>
	{                                                                                                                           	
		end_of_log_reached = 1;                                                                                                 	
 8002960:	2301      	movs	r3, #1
 8002962:	657b      	str	r3, [r7, #84]	; 0x54
 8002964:	e014      	b.n	8002990 <main+0x3b4>
	}                                                                                                                           	
	else                                                                                                                        	
	{                                                                                                                           	
		message[4] = '\r';                                                                                                      	  		
 8002966:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <main+0x3c8>)
 8002968:	220d      	movs	r2, #13
 800296a:	711a      	strb	r2, [r3, #4]
		message[5] = '\n';                                                                                                      	  		
 800296c:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <main+0x3c8>)
 800296e:	220a      	movs	r2, #10
 8002970:	715a      	strb	r2, [r3, #5]
		message[6] = 0;                                                                                                        			
 8002972:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <main+0x3c8>)
 8002974:	2200      	movs	r2, #0
 8002976:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);                                     		    
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <main+0x3c8>)
 800297a:	0018      	movs	r0, r3
 800297c:	f7fd fbc4 	bl	8000108 <strlen>
 8002980:	0003      	movs	r3, r0
 8002982:	b29a      	uxth	r2, r3
 8002984:	23fa      	movs	r3, #250	; 0xfa
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4906      	ldr	r1, [pc, #24]	; (80029a4 <main+0x3c8>)
 800298a:	480b      	ldr	r0, [pc, #44]	; (80029b8 <main+0x3dc>)
 800298c:	f005 fb50 	bl	8008030 <HAL_UART_Transmit>
	}                                                                                                                           	
	
	while(!end_of_log_reached)
 8002990:	e0c1      	b.n	8002b16 <main+0x53a>
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	2000066c 	.word	0x2000066c
 8002998:	40013000 	.word	0x40013000
 800299c:	200006b8 	.word	0x200006b8
 80029a0:	00018bcd 	.word	0x00018bcd
 80029a4:	200000c4 	.word	0x200000c4
 80029a8:	080092c4 	.word	0x080092c4
 80029ac:	20000010 	.word	0x20000010
 80029b0:	080092d0 	.word	0x080092d0
 80029b4:	080092e0 	.word	0x080092e0
 80029b8:	2000079c 	.word	0x2000079c
 80029bc:	080092e4 	.word	0x080092e4
 80029c0:	20000018 	.word	0x20000018
	{

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);	
 80029c4:	4bc5      	ldr	r3, [pc, #788]	; (8002cdc <main+0x700>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	260b      	movs	r6, #11
 80029ca:	19bb      	adds	r3, r7, r6
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	b299      	uxth	r1, r3
 80029d0:	2452      	movs	r4, #82	; 0x52
 80029d2:	193b      	adds	r3, r7, r4
 80029d4:	881a      	ldrh	r2, [r3, #0]
 80029d6:	2364      	movs	r3, #100	; 0x64
 80029d8:	9302      	str	r3, [sp, #8]
 80029da:	2301      	movs	r3, #1
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	250a      	movs	r5, #10
 80029e0:	197b      	adds	r3, r7, r5
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2302      	movs	r3, #2
 80029e6:	f003 fc93 	bl	8006310 <HAL_I2C_Mem_Read>
		message[0] = b0;                                                                                                        		
 80029ea:	197b      	adds	r3, r7, r5
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	4bbc      	ldr	r3, [pc, #752]	; (8002ce0 <main+0x704>)
 80029f0:	701a      	strb	r2, [r3, #0]
		eeprom_debug_address++;                                                                                                 		
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	881a      	ldrh	r2, [r3, #0]
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	3201      	adds	r2, #1
 80029fa:	801a      	strh	r2, [r3, #0]
		HAL_Delay(3);
 80029fc:	2003      	movs	r0, #3
 80029fe:	f002 fcbd 	bl	800537c <HAL_Delay>

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002a02:	4bb6      	ldr	r3, [pc, #728]	; (8002cdc <main+0x700>)
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	19bb      	adds	r3, r7, r6
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b299      	uxth	r1, r3
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	881a      	ldrh	r2, [r3, #0]
 8002a10:	2364      	movs	r3, #100	; 0x64
 8002a12:	9302      	str	r3, [sp, #8]
 8002a14:	2301      	movs	r3, #1
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	197b      	adds	r3, r7, r5
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f003 fc77 	bl	8006310 <HAL_I2C_Mem_Read>
		message[1] = b0;                                                                                                        		
 8002a22:	197b      	adds	r3, r7, r5
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	4bae      	ldr	r3, [pc, #696]	; (8002ce0 <main+0x704>)
 8002a28:	705a      	strb	r2, [r3, #1]
		eeprom_debug_address++;                                                                                                 		
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	3201      	adds	r2, #1
 8002a32:	801a      	strh	r2, [r3, #0]

		message[2] = '.';                                                                                                        		
 8002a34:	4baa      	ldr	r3, [pc, #680]	; (8002ce0 <main+0x704>)
 8002a36:	222e      	movs	r2, #46	; 0x2e
 8002a38:	709a      	strb	r2, [r3, #2]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002a3a:	4ba8      	ldr	r3, [pc, #672]	; (8002cdc <main+0x700>)
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	19bb      	adds	r3, r7, r6
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	b299      	uxth	r1, r3
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	2364      	movs	r3, #100	; 0x64
 8002a4a:	9302      	str	r3, [sp, #8]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	197b      	adds	r3, r7, r5
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2302      	movs	r3, #2
 8002a56:	f003 fc5b 	bl	8006310 <HAL_I2C_Mem_Read>
		message[3] = b0;                                                                                                        		
 8002a5a:	197b      	adds	r3, r7, r5
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	4ba0      	ldr	r3, [pc, #640]	; (8002ce0 <main+0x704>)
 8002a60:	70da      	strb	r2, [r3, #3]
		eeprom_debug_address++;                                                                                                 		
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	881a      	ldrh	r2, [r3, #0]
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	3201      	adds	r2, #1
 8002a6a:	801a      	strh	r2, [r3, #0]

		message[4] = ' ';                                                                                                        		
 8002a6c:	4b9c      	ldr	r3, [pc, #624]	; (8002ce0 <main+0x704>)
 8002a6e:	2220      	movs	r2, #32
 8002a70:	711a      	strb	r2, [r3, #4]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002a72:	4b9a      	ldr	r3, [pc, #616]	; (8002cdc <main+0x700>)
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	19bb      	adds	r3, r7, r6
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	881a      	ldrh	r2, [r3, #0]
 8002a80:	2364      	movs	r3, #100	; 0x64
 8002a82:	9302      	str	r3, [sp, #8]
 8002a84:	2301      	movs	r3, #1
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	197b      	adds	r3, r7, r5
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f003 fc3f 	bl	8006310 <HAL_I2C_Mem_Read>
		message[5] = b0;                                                                                                        		
 8002a92:	197b      	adds	r3, r7, r5
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <main+0x704>)
 8002a98:	715a      	strb	r2, [r3, #5]
		eeprom_debug_address++;                                                                                                 		
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	3201      	adds	r2, #1
 8002aa2:	801a      	strh	r2, [r3, #0]
		
		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002aa4:	4b8d      	ldr	r3, [pc, #564]	; (8002cdc <main+0x700>)
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	19bb      	adds	r3, r7, r6
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b299      	uxth	r1, r3
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	881a      	ldrh	r2, [r3, #0]
 8002ab2:	2364      	movs	r3, #100	; 0x64
 8002ab4:	9302      	str	r3, [sp, #8]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	197b      	adds	r3, r7, r5
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	2302      	movs	r3, #2
 8002ac0:	f003 fc26 	bl	8006310 <HAL_I2C_Mem_Read>
		message[6] = b0;                                                                                                        		
 8002ac4:	197b      	adds	r3, r7, r5
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	4b85      	ldr	r3, [pc, #532]	; (8002ce0 <main+0x704>)
 8002aca:	719a      	strb	r2, [r3, #6]
		eeprom_debug_address++;                                                                                                 		
 8002acc:	193b      	adds	r3, r7, r4
 8002ace:	881a      	ldrh	r2, [r3, #0]
 8002ad0:	193b      	adds	r3, r7, r4
 8002ad2:	3201      	adds	r2, #1
 8002ad4:	801a      	strh	r2, [r3, #0]

		if((message[0] == 0) && (message[1] == 0))
 8002ad6:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <main+0x704>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <main+0x510>
 8002ade:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <main+0x704>)
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <main+0x510>
		{
			end_of_log_reached = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	657b      	str	r3, [r7, #84]	; 0x54
 8002aea:	e014      	b.n	8002b16 <main+0x53a>
		}
		else
		{
			message[7] = '\r';                                                                                                        		
 8002aec:	4b7c      	ldr	r3, [pc, #496]	; (8002ce0 <main+0x704>)
 8002aee:	220d      	movs	r2, #13
 8002af0:	71da      	strb	r2, [r3, #7]
			message[8] = '\n';                                                                                                        		
 8002af2:	4b7b      	ldr	r3, [pc, #492]	; (8002ce0 <main+0x704>)
 8002af4:	220a      	movs	r2, #10
 8002af6:	721a      	strb	r2, [r3, #8]
			message[9] = 0;                                                                                                        		
 8002af8:	4b79      	ldr	r3, [pc, #484]	; (8002ce0 <main+0x704>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	725a      	strb	r2, [r3, #9]
			HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);                                     	    
 8002afe:	4b78      	ldr	r3, [pc, #480]	; (8002ce0 <main+0x704>)
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fd fb01 	bl	8000108 <strlen>
 8002b06:	0003      	movs	r3, r0
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	23fa      	movs	r3, #250	; 0xfa
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4974      	ldr	r1, [pc, #464]	; (8002ce0 <main+0x704>)
 8002b10:	4874      	ldr	r0, [pc, #464]	; (8002ce4 <main+0x708>)
 8002b12:	f005 fa8d 	bl	8008030 <HAL_UART_Transmit>
	while(!end_of_log_reached)
 8002b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d100      	bne.n	8002b1e <main+0x542>
 8002b1c:	e752      	b.n	80029c4 <main+0x3e8>
		}
	}
	
	sprintf(message, "\r\n");
 8002b1e:	4b70      	ldr	r3, [pc, #448]	; (8002ce0 <main+0x704>)
 8002b20:	4a71      	ldr	r2, [pc, #452]	; (8002ce8 <main+0x70c>)
 8002b22:	8811      	ldrh	r1, [r2, #0]
 8002b24:	8019      	strh	r1, [r3, #0]
 8002b26:	7892      	ldrb	r2, [r2, #2]
 8002b28:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002b2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ce0 <main+0x704>)
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fd faeb 	bl	8000108 <strlen>
 8002b32:	0003      	movs	r3, r0
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	23fa      	movs	r3, #250	; 0xfa
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4969      	ldr	r1, [pc, #420]	; (8002ce0 <main+0x704>)
 8002b3c:	4869      	ldr	r0, [pc, #420]	; (8002ce4 <main+0x708>)
 8002b3e:	f005 fa77 	bl	8008030 <HAL_UART_Transmit>
	sprintf(message, "**********\r\nlog bank 1 finish\r\n");
 8002b42:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <main+0x704>)
 8002b44:	4a69      	ldr	r2, [pc, #420]	; (8002cec <main+0x710>)
 8002b46:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b48:	c313      	stmia	r3!, {r0, r1, r4}
 8002b4a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b4c:	c313      	stmia	r3!, {r0, r1, r4}
 8002b4e:	ca03      	ldmia	r2!, {r0, r1}
 8002b50:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002b52:	4b63      	ldr	r3, [pc, #396]	; (8002ce0 <main+0x704>)
 8002b54:	0018      	movs	r0, r3
 8002b56:	f7fd fad7 	bl	8000108 <strlen>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	23fa      	movs	r3, #250	; 0xfa
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	495f      	ldr	r1, [pc, #380]	; (8002ce0 <main+0x704>)
 8002b64:	485f      	ldr	r0, [pc, #380]	; (8002ce4 <main+0x708>)
 8002b66:	f005 fa63 	bl	8008030 <HAL_UART_Transmit>


	eeprom_debug_address = 64;
 8002b6a:	2452      	movs	r4, #82	; 0x52
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	2240      	movs	r2, #64	; 0x40
 8002b70:	801a      	strh	r2, [r3, #0]
	at24c32_shifted_address = 0x51 << 1;
 8002b72:	250b      	movs	r5, #11
 8002b74:	197b      	adds	r3, r7, r5
 8002b76:	22a2      	movs	r2, #162	; 0xa2
 8002b78:	701a      	strb	r2, [r3, #0]

	sprintf(message, "\r\n");
 8002b7a:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <main+0x704>)
 8002b7c:	4a5a      	ldr	r2, [pc, #360]	; (8002ce8 <main+0x70c>)
 8002b7e:	8811      	ldrh	r1, [r2, #0]
 8002b80:	8019      	strh	r1, [r3, #0]
 8002b82:	7892      	ldrb	r2, [r2, #2]
 8002b84:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002b86:	4b56      	ldr	r3, [pc, #344]	; (8002ce0 <main+0x704>)
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7fd fabd 	bl	8000108 <strlen>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	23fa      	movs	r3, #250	; 0xfa
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4952      	ldr	r1, [pc, #328]	; (8002ce0 <main+0x704>)
 8002b98:	4852      	ldr	r0, [pc, #328]	; (8002ce4 <main+0x708>)
 8002b9a:	f005 fa49 	bl	8008030 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002b9e:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <main+0x704>)
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7fd fab1 	bl	8000108 <strlen>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	23fa      	movs	r3, #250	; 0xfa
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	494c      	ldr	r1, [pc, #304]	; (8002ce0 <main+0x704>)
 8002bb0:	484c      	ldr	r0, [pc, #304]	; (8002ce4 <main+0x708>)
 8002bb2:	f005 fa3d 	bl	8008030 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002bb6:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <main+0x704>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7fd faa5 	bl	8000108 <strlen>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	23fa      	movs	r3, #250	; 0xfa
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4946      	ldr	r1, [pc, #280]	; (8002ce0 <main+0x704>)
 8002bc8:	4846      	ldr	r0, [pc, #280]	; (8002ce4 <main+0x708>)
 8002bca:	f005 fa31 	bl	8008030 <HAL_UART_Transmit>

	sprintf(message, "log bank 2 start\r\n***********\r\n");
 8002bce:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <main+0x704>)
 8002bd0:	4a47      	ldr	r2, [pc, #284]	; (8002cf0 <main+0x714>)
 8002bd2:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002bd4:	c343      	stmia	r3!, {r0, r1, r6}
 8002bd6:	ca43      	ldmia	r2!, {r0, r1, r6}
 8002bd8:	c343      	stmia	r3!, {r0, r1, r6}
 8002bda:	ca03      	ldmia	r2!, {r0, r1}
 8002bdc:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002bde:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <main+0x704>)
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7fd fa91 	bl	8000108 <strlen>
 8002be6:	0003      	movs	r3, r0
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	23fa      	movs	r3, #250	; 0xfa
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	493c      	ldr	r1, [pc, #240]	; (8002ce0 <main+0x704>)
 8002bf0:	483c      	ldr	r0, [pc, #240]	; (8002ce4 <main+0x708>)
 8002bf2:	f005 fa1d 	bl	8008030 <HAL_UART_Transmit>

	end_of_log_reached = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	657b      	str	r3, [r7, #84]	; 0x54


	// read timestamp time
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <main+0x700>)
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	002e      	movs	r6, r5
 8002c00:	19bb      	adds	r3, r7, r6
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b299      	uxth	r1, r3
 8002c06:	193b      	adds	r3, r7, r4
 8002c08:	881a      	ldrh	r2, [r3, #0]
 8002c0a:	2364      	movs	r3, #100	; 0x64
 8002c0c:	9302      	str	r3, [sp, #8]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	250a      	movs	r5, #10
 8002c14:	197b      	adds	r3, r7, r5
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f003 fb79 	bl	8006310 <HAL_I2C_Mem_Read>
	message[0] = b0;                                                                                                        			
 8002c1e:	197b      	adds	r3, r7, r5
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	4b2f      	ldr	r3, [pc, #188]	; (8002ce0 <main+0x704>)
 8002c24:	701a      	strb	r2, [r3, #0]
	eeprom_debug_address++;                                                                                                 			
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	3201      	adds	r2, #1
 8002c2e:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <main+0x700>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	19bb      	adds	r3, r7, r6
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b299      	uxth	r1, r3
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	881a      	ldrh	r2, [r3, #0]
 8002c3e:	2364      	movs	r3, #100	; 0x64
 8002c40:	9302      	str	r3, [sp, #8]
 8002c42:	2301      	movs	r3, #1
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	197b      	adds	r3, r7, r5
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	f003 fb60 	bl	8006310 <HAL_I2C_Mem_Read>
	message[1] = b0;                                                                                                        			
 8002c50:	197b      	adds	r3, r7, r5
 8002c52:	781a      	ldrb	r2, [r3, #0]
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <main+0x704>)
 8002c56:	705a      	strb	r2, [r3, #1]
	eeprom_debug_address++;                                                                                                 			
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	3201      	adds	r2, #1
 8002c60:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 8002c62:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <main+0x700>)
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	19bb      	adds	r3, r7, r6
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b299      	uxth	r1, r3
 8002c6c:	193b      	adds	r3, r7, r4
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	2364      	movs	r3, #100	; 0x64
 8002c72:	9302      	str	r3, [sp, #8]
 8002c74:	2301      	movs	r3, #1
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	197b      	adds	r3, r7, r5
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f003 fb47 	bl	8006310 <HAL_I2C_Mem_Read>
	message[2] = b0;                                                                                                        			
 8002c82:	197b      	adds	r3, r7, r5
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <main+0x704>)
 8002c88:	709a      	strb	r2, [r3, #2]
	eeprom_debug_address++;                                                                                                 			
 8002c8a:	193b      	adds	r3, r7, r4
 8002c8c:	881a      	ldrh	r2, [r3, #0]
 8002c8e:	193b      	adds	r3, r7, r4
 8002c90:	3201      	adds	r2, #1
 8002c92:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <main+0x700>)
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	19bb      	adds	r3, r7, r6
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b299      	uxth	r1, r3
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	2364      	movs	r3, #100	; 0x64
 8002ca4:	9302      	str	r3, [sp, #8]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	197b      	adds	r3, r7, r5
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f003 fb2e 	bl	8006310 <HAL_I2C_Mem_Read>
	message[3] = b0;                                                                                                        			
 8002cb4:	197b      	adds	r3, r7, r5
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <main+0x704>)
 8002cba:	70da      	strb	r2, [r3, #3]
	eeprom_debug_address++;                                                                                                 			
 8002cbc:	193b      	adds	r3, r7, r4
 8002cbe:	881a      	ldrh	r2, [r3, #0]
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	3201      	adds	r2, #1
 8002cc4:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	if((message[0] == 0) && (message[1] == 0))                                                                                  	
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <main+0x704>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d112      	bne.n	8002cf4 <main+0x718>
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <main+0x704>)
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <main+0x718>
	{                                                                                                                           	
		end_of_log_reached = 1;                                                                                                 	
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	657b      	str	r3, [r7, #84]	; 0x54
 8002cda:	e020      	b.n	8002d1e <main+0x742>
 8002cdc:	20000018 	.word	0x20000018
 8002ce0:	200000c4 	.word	0x200000c4
 8002ce4:	2000079c 	.word	0x2000079c
 8002ce8:	080092e0 	.word	0x080092e0
 8002cec:	08009304 	.word	0x08009304
 8002cf0:	08009324 	.word	0x08009324
	}                                                                                                                           	
	else                                                                                                                        	
	{                                                                                                                           	
		message[4] = '\r';                                                                                                      	  		
 8002cf4:	4bb8      	ldr	r3, [pc, #736]	; (8002fd8 <main+0x9fc>)
 8002cf6:	220d      	movs	r2, #13
 8002cf8:	711a      	strb	r2, [r3, #4]
		message[5] = '\n';                                                                                                      	  		
 8002cfa:	4bb7      	ldr	r3, [pc, #732]	; (8002fd8 <main+0x9fc>)
 8002cfc:	220a      	movs	r2, #10
 8002cfe:	715a      	strb	r2, [r3, #5]
		message[6] = 0;                                                                                                        			
 8002d00:	4bb5      	ldr	r3, [pc, #724]	; (8002fd8 <main+0x9fc>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);                                     		    
 8002d06:	4bb4      	ldr	r3, [pc, #720]	; (8002fd8 <main+0x9fc>)
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7fd f9fd 	bl	8000108 <strlen>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	23fa      	movs	r3, #250	; 0xfa
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	49b0      	ldr	r1, [pc, #704]	; (8002fd8 <main+0x9fc>)
 8002d18:	48b0      	ldr	r0, [pc, #704]	; (8002fdc <main+0xa00>)
 8002d1a:	f005 f989 	bl	8008030 <HAL_UART_Transmit>
	}                                                                                                                           	
	// read timestamp date
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002d1e:	4bb0      	ldr	r3, [pc, #704]	; (8002fe0 <main+0xa04>)
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	260b      	movs	r6, #11
 8002d24:	19bb      	adds	r3, r7, r6
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b299      	uxth	r1, r3
 8002d2a:	2452      	movs	r4, #82	; 0x52
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	2364      	movs	r3, #100	; 0x64
 8002d32:	9302      	str	r3, [sp, #8]
 8002d34:	2301      	movs	r3, #1
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	250a      	movs	r5, #10
 8002d3a:	197b      	adds	r3, r7, r5
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f003 fae6 	bl	8006310 <HAL_I2C_Mem_Read>
	message[0] = b0;                                                                                                        			
 8002d44:	197b      	adds	r3, r7, r5
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	4ba3      	ldr	r3, [pc, #652]	; (8002fd8 <main+0x9fc>)
 8002d4a:	701a      	strb	r2, [r3, #0]
	eeprom_debug_address++;                                                                                                 			
 8002d4c:	193b      	adds	r3, r7, r4
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	3201      	adds	r2, #1
 8002d54:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 8002d56:	4ba2      	ldr	r3, [pc, #648]	; (8002fe0 <main+0xa04>)
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	19bb      	adds	r3, r7, r6
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b299      	uxth	r1, r3
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	881a      	ldrh	r2, [r3, #0]
 8002d64:	2364      	movs	r3, #100	; 0x64
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	2301      	movs	r3, #1
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	197b      	adds	r3, r7, r5
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2302      	movs	r3, #2
 8002d72:	f003 facd 	bl	8006310 <HAL_I2C_Mem_Read>
	message[1] = b0;                                                                                                        			
 8002d76:	197b      	adds	r3, r7, r5
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	4b97      	ldr	r3, [pc, #604]	; (8002fd8 <main+0x9fc>)
 8002d7c:	705a      	strb	r2, [r3, #1]
	eeprom_debug_address++;                                                                                                 			
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	881a      	ldrh	r2, [r3, #0]
 8002d82:	193b      	adds	r3, r7, r4
 8002d84:	3201      	adds	r2, #1
 8002d86:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 8002d88:	4b95      	ldr	r3, [pc, #596]	; (8002fe0 <main+0xa04>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	19bb      	adds	r3, r7, r6
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b299      	uxth	r1, r3
 8002d92:	193b      	adds	r3, r7, r4
 8002d94:	881a      	ldrh	r2, [r3, #0]
 8002d96:	2364      	movs	r3, #100	; 0x64
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	197b      	adds	r3, r7, r5
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	2302      	movs	r3, #2
 8002da4:	f003 fab4 	bl	8006310 <HAL_I2C_Mem_Read>
	message[2] = b0;                                                                                                        			
 8002da8:	197b      	adds	r3, r7, r5
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	4b8a      	ldr	r3, [pc, #552]	; (8002fd8 <main+0x9fc>)
 8002dae:	709a      	strb	r2, [r3, #2]
	eeprom_debug_address++;                                                                                                 			
 8002db0:	193b      	adds	r3, r7, r4
 8002db2:	881a      	ldrh	r2, [r3, #0]
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	3201      	adds	r2, #1
 8002db8:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);			
 8002dba:	4b89      	ldr	r3, [pc, #548]	; (8002fe0 <main+0xa04>)
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	19bb      	adds	r3, r7, r6
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b299      	uxth	r1, r3
 8002dc4:	193b      	adds	r3, r7, r4
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	2364      	movs	r3, #100	; 0x64
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	197b      	adds	r3, r7, r5
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f003 fa9b 	bl	8006310 <HAL_I2C_Mem_Read>
	message[3] = b0;                                                                                                        			
 8002dda:	197b      	adds	r3, r7, r5
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	4b7e      	ldr	r3, [pc, #504]	; (8002fd8 <main+0x9fc>)
 8002de0:	70da      	strb	r2, [r3, #3]
	eeprom_debug_address++;                                                                                                 			
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	193b      	adds	r3, r7, r4
 8002de8:	3201      	adds	r2, #1
 8002dea:	801a      	strh	r2, [r3, #0]
                                                                                                                                
	if((message[0] == 0) && (message[1] == 0))                                                                                  	
 8002dec:	4b7a      	ldr	r3, [pc, #488]	; (8002fd8 <main+0x9fc>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d106      	bne.n	8002e02 <main+0x826>
 8002df4:	4b78      	ldr	r3, [pc, #480]	; (8002fd8 <main+0x9fc>)
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <main+0x826>
	{                                                                                                                           	
		end_of_log_reached = 1;                                                                                                 	
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8002e00:	e014      	b.n	8002e2c <main+0x850>
	}                                                                                                                           	
	else                                                                                                                        	
	{                                                                                                                           	
		message[4] = '\r';                                                                                                      	  		
 8002e02:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <main+0x9fc>)
 8002e04:	220d      	movs	r2, #13
 8002e06:	711a      	strb	r2, [r3, #4]
		message[5] = '\n';                                                                                                      	  		
 8002e08:	4b73      	ldr	r3, [pc, #460]	; (8002fd8 <main+0x9fc>)
 8002e0a:	220a      	movs	r2, #10
 8002e0c:	715a      	strb	r2, [r3, #5]
		message[6] = 0;                                                                                                        			
 8002e0e:	4b72      	ldr	r3, [pc, #456]	; (8002fd8 <main+0x9fc>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);                                     		    
 8002e14:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <main+0x9fc>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7fd f976 	bl	8000108 <strlen>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	23fa      	movs	r3, #250	; 0xfa
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	496c      	ldr	r1, [pc, #432]	; (8002fd8 <main+0x9fc>)
 8002e26:	486d      	ldr	r0, [pc, #436]	; (8002fdc <main+0xa00>)
 8002e28:	f005 f902 	bl	8008030 <HAL_UART_Transmit>
	}                                                                                                                           	


	while(!end_of_log_reached)
 8002e2c:	e0a8      	b.n	8002f80 <main+0x9a4>
	{

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);	
 8002e2e:	4b6c      	ldr	r3, [pc, #432]	; (8002fe0 <main+0xa04>)
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	260b      	movs	r6, #11
 8002e34:	19bb      	adds	r3, r7, r6
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b299      	uxth	r1, r3
 8002e3a:	2452      	movs	r4, #82	; 0x52
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	881a      	ldrh	r2, [r3, #0]
 8002e40:	2364      	movs	r3, #100	; 0x64
 8002e42:	9302      	str	r3, [sp, #8]
 8002e44:	2301      	movs	r3, #1
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	250a      	movs	r5, #10
 8002e4a:	197b      	adds	r3, r7, r5
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2302      	movs	r3, #2
 8002e50:	f003 fa5e 	bl	8006310 <HAL_I2C_Mem_Read>
		message[0] = b0;                                                                                                        		
 8002e54:	197b      	adds	r3, r7, r5
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <main+0x9fc>)
 8002e5a:	701a      	strb	r2, [r3, #0]
		eeprom_debug_address++;                                                                                                 		
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	881a      	ldrh	r2, [r3, #0]
 8002e60:	193b      	adds	r3, r7, r4
 8002e62:	3201      	adds	r2, #1
 8002e64:	801a      	strh	r2, [r3, #0]
		HAL_Delay(3);
 8002e66:	2003      	movs	r0, #3
 8002e68:	f002 fa88 	bl	800537c <HAL_Delay>

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002e6c:	4b5c      	ldr	r3, [pc, #368]	; (8002fe0 <main+0xa04>)
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	19bb      	adds	r3, r7, r6
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	b299      	uxth	r1, r3
 8002e76:	193b      	adds	r3, r7, r4
 8002e78:	881a      	ldrh	r2, [r3, #0]
 8002e7a:	2364      	movs	r3, #100	; 0x64
 8002e7c:	9302      	str	r3, [sp, #8]
 8002e7e:	2301      	movs	r3, #1
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	197b      	adds	r3, r7, r5
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2302      	movs	r3, #2
 8002e88:	f003 fa42 	bl	8006310 <HAL_I2C_Mem_Read>
		message[1] = b0;                                                                                                        		
 8002e8c:	197b      	adds	r3, r7, r5
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	4b51      	ldr	r3, [pc, #324]	; (8002fd8 <main+0x9fc>)
 8002e92:	705a      	strb	r2, [r3, #1]
		eeprom_debug_address++;                                                                                                 		
 8002e94:	193b      	adds	r3, r7, r4
 8002e96:	881a      	ldrh	r2, [r3, #0]
 8002e98:	193b      	adds	r3, r7, r4
 8002e9a:	3201      	adds	r2, #1
 8002e9c:	801a      	strh	r2, [r3, #0]

		message[2] = '.';                                                                                                        		
 8002e9e:	4b4e      	ldr	r3, [pc, #312]	; (8002fd8 <main+0x9fc>)
 8002ea0:	222e      	movs	r2, #46	; 0x2e
 8002ea2:	709a      	strb	r2, [r3, #2]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <main+0xa04>)
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	19bb      	adds	r3, r7, r6
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b299      	uxth	r1, r3
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	881a      	ldrh	r2, [r3, #0]
 8002eb2:	2364      	movs	r3, #100	; 0x64
 8002eb4:	9302      	str	r3, [sp, #8]
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	197b      	adds	r3, r7, r5
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f003 fa26 	bl	8006310 <HAL_I2C_Mem_Read>
		message[3] = b0;                                                                                                        		
 8002ec4:	197b      	adds	r3, r7, r5
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <main+0x9fc>)
 8002eca:	70da      	strb	r2, [r3, #3]
		eeprom_debug_address++;                                                                                                 		
 8002ecc:	193b      	adds	r3, r7, r4
 8002ece:	881a      	ldrh	r2, [r3, #0]
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	3201      	adds	r2, #1
 8002ed4:	801a      	strh	r2, [r3, #0]

		message[4] = ' ';                                                                                                        		
 8002ed6:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <main+0x9fc>)
 8002ed8:	2220      	movs	r2, #32
 8002eda:	711a      	strb	r2, [r3, #4]

		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002edc:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <main+0xa04>)
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	19bb      	adds	r3, r7, r6
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b299      	uxth	r1, r3
 8002ee6:	193b      	adds	r3, r7, r4
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	2364      	movs	r3, #100	; 0x64
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	197b      	adds	r3, r7, r5
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f003 fa0a 	bl	8006310 <HAL_I2C_Mem_Read>
		message[5] = b0;                                                                                                        		
 8002efc:	197b      	adds	r3, r7, r5
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <main+0x9fc>)
 8002f02:	715a      	strb	r2, [r3, #5]
		eeprom_debug_address++;                                                                                                 		
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	3201      	adds	r2, #1
 8002f0c:	801a      	strh	r2, [r3, #0]
		
		HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);		
 8002f0e:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <main+0xa04>)
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	19bb      	adds	r3, r7, r6
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b299      	uxth	r1, r3
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	881a      	ldrh	r2, [r3, #0]
 8002f1c:	2364      	movs	r3, #100	; 0x64
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	2301      	movs	r3, #1
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	197b      	adds	r3, r7, r5
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2302      	movs	r3, #2
 8002f2a:	f003 f9f1 	bl	8006310 <HAL_I2C_Mem_Read>
		message[6] = b0;                                                                                                        		
 8002f2e:	197b      	adds	r3, r7, r5
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <main+0x9fc>)
 8002f34:	719a      	strb	r2, [r3, #6]
		eeprom_debug_address++;                                                                                                 		
 8002f36:	193b      	adds	r3, r7, r4
 8002f38:	881a      	ldrh	r2, [r3, #0]
 8002f3a:	193b      	adds	r3, r7, r4
 8002f3c:	3201      	adds	r2, #1
 8002f3e:	801a      	strh	r2, [r3, #0]

		if((message[0] == 0) && (message[1] == 0))
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <main+0x9fc>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d106      	bne.n	8002f56 <main+0x97a>
 8002f48:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <main+0x9fc>)
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <main+0x97a>
		{
			end_of_log_reached = 1;
 8002f50:	2301      	movs	r3, #1
 8002f52:	657b      	str	r3, [r7, #84]	; 0x54
 8002f54:	e014      	b.n	8002f80 <main+0x9a4>
		}
		else
		{
			message[7] = '\r';                                                                                                        		
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <main+0x9fc>)
 8002f58:	220d      	movs	r2, #13
 8002f5a:	71da      	strb	r2, [r3, #7]
			message[8] = '\n';                                                                                                        		
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <main+0x9fc>)
 8002f5e:	220a      	movs	r2, #10
 8002f60:	721a      	strb	r2, [r3, #8]
			message[9] = 0;                                                                                                        		
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <main+0x9fc>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	725a      	strb	r2, [r3, #9]
			HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);                                     	    
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <main+0x9fc>)
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7fd f8cc 	bl	8000108 <strlen>
 8002f70:	0003      	movs	r3, r0
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	23fa      	movs	r3, #250	; 0xfa
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4917      	ldr	r1, [pc, #92]	; (8002fd8 <main+0x9fc>)
 8002f7a:	4818      	ldr	r0, [pc, #96]	; (8002fdc <main+0xa00>)
 8002f7c:	f005 f858 	bl	8008030 <HAL_UART_Transmit>
	while(!end_of_log_reached)
 8002f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d100      	bne.n	8002f88 <main+0x9ac>
 8002f86:	e752      	b.n	8002e2e <main+0x852>
		}
	}
	
	sprintf(message, "\r\n");
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <main+0x9fc>)
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <main+0xa08>)
 8002f8c:	8811      	ldrh	r1, [r2, #0]
 8002f8e:	8019      	strh	r1, [r3, #0]
 8002f90:	7892      	ldrb	r2, [r2, #2]
 8002f92:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <main+0x9fc>)
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7fd f8b6 	bl	8000108 <strlen>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	23fa      	movs	r3, #250	; 0xfa
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <main+0x9fc>)
 8002fa6:	480d      	ldr	r0, [pc, #52]	; (8002fdc <main+0xa00>)
 8002fa8:	f005 f842 	bl	8008030 <HAL_UART_Transmit>
	sprintf(message, "**********\r\nlog bank 2 finish\r\n");
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <main+0x9fc>)
 8002fae:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <main+0xa0c>)
 8002fb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002fb2:	c313      	stmia	r3!, {r0, r1, r4}
 8002fb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002fb6:	c313      	stmia	r3!, {r0, r1, r4}
 8002fb8:	ca03      	ldmia	r2!, {r0, r1}
 8002fba:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <main+0x9fc>)
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7fd f8a2 	bl	8000108 <strlen>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	23fa      	movs	r3, #250	; 0xfa
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4902      	ldr	r1, [pc, #8]	; (8002fd8 <main+0x9fc>)
 8002fce:	4803      	ldr	r0, [pc, #12]	; (8002fdc <main+0xa00>)
 8002fd0:	f005 f82e 	bl	8008030 <HAL_UART_Transmit>



		while(1)
 8002fd4:	e7fe      	b.n	8002fd4 <main+0x9f8>
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	200000c4 	.word	0x200000c4
 8002fdc:	2000079c 	.word	0x2000079c
 8002fe0:	20000018 	.word	0x20000018
 8002fe4:	080092e0 	.word	0x080092e0
 8002fe8:	08009344 	.word	0x08009344
	{
		while(1)                                                                                                         
	    {
                                                                                                                                                                      
                                                                                                                                                                      
	    	if(one_second_timer_get_flag())
 8002fec:	f000 ffb6 	bl	8003f5c <one_second_timer_get_flag>
 8002ff0:	1e03      	subs	r3, r0, #0
 8002ff2:	d0fb      	beq.n	8002fec <main+0xa10>
	    	{
	    		one_second_timer_reset_flag();
 8002ff4:	f000 ffa8 	bl	8003f48 <one_second_timer_reset_flag>
	    		odd_even = (odd_even+1)%2;
 8002ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	4adc      	ldr	r2, [pc, #880]	; (8003370 <main+0xd94>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	d504      	bpl.n	800300c <main+0xa30>
 8003002:	3b01      	subs	r3, #1
 8003004:	2202      	movs	r2, #2
 8003006:	4252      	negs	r2, r2
 8003008:	4313      	orrs	r3, r2
 800300a:	3301      	adds	r3, #1
 800300c:	66bb      	str	r3, [r7, #104]	; 0x68
  	    
	    		pressure_sensor_measure_pressure_temperature();                                                                                                   	
 800300e:	f001 f839 	bl	8004084 <pressure_sensor_measure_pressure_temperature>
	    	    double P = pressure_sensor_get_pressure();
 8003012:	f001 fa99 	bl	8004548 <pressure_sensor_get_pressure>
 8003016:	0003      	movs	r3, r0
 8003018:	000c      	movs	r4, r1
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
 800301c:	62fc      	str	r4, [r7, #44]	; 0x2c
	    	    double actual_temperature = pressure_sensor_get_temperature();
 800301e:	f001 fa9f 	bl	8004560 <pressure_sensor_get_temperature>
 8003022:	0003      	movs	r3, r0
 8003024:	000c      	movs	r4, r1
 8003026:	623b      	str	r3, [r7, #32]
 8003028:	627c      	str	r4, [r7, #36]	; 0x24
                                                                                                                                                                  
	    	    voltmeter_measure_voltage();
 800302a:	f002 f851 	bl	80050d0 <voltmeter_measure_voltage>
	    	    double accu_voltage = voltmeter_get_voltage();
 800302e:	f002 f903 	bl	8005238 <voltmeter_get_voltage>
 8003032:	0003      	movs	r3, r0
 8003034:	000c      	movs	r4, r1
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	61fc      	str	r4, [r7, #28]
	    	    double accu_percentage = voltmeter_get_percentage();
 800303a:	f002 f909 	bl	8005250 <voltmeter_get_percentage>
 800303e:	0003      	movs	r3, r0
 8003040:	000c      	movs	r4, r1
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	617c      	str	r4, [r7, #20]
	                                                                                                                                                              
	    		rtc_ds3231_action();
 8003046:	f001 fadd 	bl	8004604 <rtc_ds3231_action>
	    		// time-date calculation ----------------------------------------
	    		uint8_t seconds, minutes, hours;
	    		rtc_ds3231_get_time(&hours, &minutes, &seconds);
 800304a:	2309      	movs	r3, #9
 800304c:	18fa      	adds	r2, r7, r3
 800304e:	2308      	movs	r3, #8
 8003050:	18f9      	adds	r1, r7, r3
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	0018      	movs	r0, r3
 8003056:	f001 faab 	bl	80045b0 <rtc_ds3231_get_time>
	    		uint8_t date, month, year;
	    		rtc_ds3231_get_date(&date, &month, &year);
 800305a:	1d3a      	adds	r2, r7, #4
 800305c:	1d79      	adds	r1, r7, #5
 800305e:	1dbb      	adds	r3, r7, #6
 8003060:	0018      	movs	r0, r3
 8003062:	f001 fa89 	bl	8004578 <rtc_ds3231_get_date>
	    		// debug!!!
	    	  	//P_sym += 980;
	    		//P = P_sym;
                                                                                                                                                                      
                                                                                                                                                                      
	    		if(P <= surface_pressure)
 8003066:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003068:	f7fe ff70 	bl	8001f4c <__aeabi_ui2d>
 800306c:	0003      	movs	r3, r0
 800306e:	000c      	movs	r4, r1
 8003070:	001a      	movs	r2, r3
 8003072:	0023      	movs	r3, r4
 8003074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003078:	f7fd f8fa 	bl	8000270 <__aeabi_dcmple>
 800307c:	1e03      	subs	r3, r0, #0
 800307e:	d005      	beq.n	800308c <main+0xab0>
	    			surface_pressure = P;
 8003080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003084:	f7fd f932 	bl	80002ec <__aeabi_d2uiz>
 8003088:	0003      	movs	r3, r0
 800308a:	66fb      	str	r3, [r7, #108]	; 0x6c
                                                                                                                                                                      
	    		int we_are_under_water = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
                                                                                                                                                                      
	    		if(P > (surface_pressure + 9800)) // underwater
 8003090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003092:	4ab8      	ldr	r2, [pc, #736]	; (8003374 <main+0xd98>)
 8003094:	4694      	mov	ip, r2
 8003096:	4463      	add	r3, ip
 8003098:	0018      	movs	r0, r3
 800309a:	f7fe ff57 	bl	8001f4c <__aeabi_ui2d>
 800309e:	0003      	movs	r3, r0
 80030a0:	000c      	movs	r4, r1
 80030a2:	001a      	movs	r2, r3
 80030a4:	0023      	movs	r3, r4
 80030a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030aa:	f7fd f8eb 	bl	8000284 <__aeabi_dcmpgt>
 80030ae:	1e03      	subs	r3, r0, #0
 80030b0:	d001      	beq.n	80030b6 <main+0xada>
	    			we_are_under_water = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	64fb      	str	r3, [r7, #76]	; 0x4c
                                                                                                                                                                      
	    		if(!we_are_under_water)  // we are not under water
 80030b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d16c      	bne.n	8003196 <main+0xbba>
	    		{
	    			depth_switch_action();		    
 80030bc:	f7ff f92c 	bl	8002318 <depth_switch_action>
                                                                                                                                                                      
	    			
	    			if(actuator_counter == 0)
 80030c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d192      	bne.n	8002fec <main+0xa10>
	    			{
	    				//ssd1306_Fill(Black);                                                                                         
  	    	        	ssd1306_SetCursor(0,0);
 80030c6:	2100      	movs	r1, #0
 80030c8:	2000      	movs	r0, #0
 80030ca:	f001 fe57 	bl	8004d7c <ssd1306_SetCursor>
	    	        	//sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
	    				if(odd_even)
 80030ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d014      	beq.n	80030fe <main+0xb22>
	    	        		sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	001c      	movs	r4, r3
 80030da:	2308      	movs	r3, #8
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	001d      	movs	r5, r3
 80030e2:	1dbb      	adds	r3, r7, #6
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	001a      	movs	r2, r3
 80030e8:	1d7b      	adds	r3, r7, #5
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	49a2      	ldr	r1, [pc, #648]	; (8003378 <main+0xd9c>)
 80030ee:	48a3      	ldr	r0, [pc, #652]	; (800337c <main+0xda0>)
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	9200      	str	r2, [sp, #0]
 80030f4:	002b      	movs	r3, r5
 80030f6:	0022      	movs	r2, r4
 80030f8:	f005 fcd0 	bl	8008a9c <siprintf>
 80030fc:	e013      	b.n	8003126 <main+0xb4a>
	    				else
	    	        		sprintf(timestamp, "%02d %02d %02d %02d", hours, minutes, date, month);
 80030fe:	1dfb      	adds	r3, r7, #7
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	001c      	movs	r4, r3
 8003104:	2308      	movs	r3, #8
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	001d      	movs	r5, r3
 800310c:	1dbb      	adds	r3, r7, #6
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	001a      	movs	r2, r3
 8003112:	1d7b      	adds	r3, r7, #5
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	499a      	ldr	r1, [pc, #616]	; (8003380 <main+0xda4>)
 8003118:	4898      	ldr	r0, [pc, #608]	; (800337c <main+0xda0>)
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	9200      	str	r2, [sp, #0]
 800311e:	002b      	movs	r3, r5
 8003120:	0022      	movs	r2, r4
 8003122:	f005 fcbb 	bl	8008a9c <siprintf>
  	    	        	ssd1306_WriteString(timestamp, Font_11x18, White);
 8003126:	4a97      	ldr	r2, [pc, #604]	; (8003384 <main+0xda8>)
 8003128:	4894      	ldr	r0, [pc, #592]	; (800337c <main+0xda0>)
 800312a:	2301      	movs	r3, #1
 800312c:	6811      	ldr	r1, [r2, #0]
 800312e:	6852      	ldr	r2, [r2, #4]
 8003130:	f001 fdfa 	bl	8004d28 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,22);
 8003134:	2116      	movs	r1, #22
 8003136:	2000      	movs	r0, #0
 8003138:	f001 fe20 	bl	8004d7c <ssd1306_SetCursor>
	    	        	sprintf(message, "AVAR GL %02dm", (int)depth_switch_get_current_depth());
 800313c:	f7ff f8e0 	bl	8002300 <depth_switch_get_current_depth>
 8003140:	0003      	movs	r3, r0
 8003142:	000c      	movs	r4, r1
 8003144:	0018      	movs	r0, r3
 8003146:	0021      	movs	r1, r4
 8003148:	f7fe fe90 	bl	8001e6c <__aeabi_d2iz>
 800314c:	0002      	movs	r2, r0
 800314e:	498e      	ldr	r1, [pc, #568]	; (8003388 <main+0xdac>)
 8003150:	4b8e      	ldr	r3, [pc, #568]	; (800338c <main+0xdb0>)
 8003152:	0018      	movs	r0, r3
 8003154:	f005 fca2 	bl	8008a9c <siprintf>
        //*
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 8003158:	4a8a      	ldr	r2, [pc, #552]	; (8003384 <main+0xda8>)
 800315a:	488c      	ldr	r0, [pc, #560]	; (800338c <main+0xdb0>)
 800315c:	2301      	movs	r3, #1
 800315e:	6811      	ldr	r1, [r2, #0]
 8003160:	6852      	ldr	r2, [r2, #4]
 8003162:	f001 fde1 	bl	8004d28 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,44);
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	2000      	movs	r0, #0
 800316a:	f001 fe07 	bl	8004d7c <ssd1306_SetCursor>
	    	        	sprintf(message, "akkum %02d%%", (int)accu_percentage);
 800316e:	6938      	ldr	r0, [r7, #16]
 8003170:	6979      	ldr	r1, [r7, #20]
 8003172:	f7fe fe7b 	bl	8001e6c <__aeabi_d2iz>
 8003176:	0002      	movs	r2, r0
 8003178:	4985      	ldr	r1, [pc, #532]	; (8003390 <main+0xdb4>)
 800317a:	4b84      	ldr	r3, [pc, #528]	; (800338c <main+0xdb0>)
 800317c:	0018      	movs	r0, r3
 800317e:	f005 fc8d 	bl	8008a9c <siprintf>
	    	        	//sprintf(message, "akkum");
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 8003182:	4a80      	ldr	r2, [pc, #512]	; (8003384 <main+0xda8>)
 8003184:	4881      	ldr	r0, [pc, #516]	; (800338c <main+0xdb0>)
 8003186:	2301      	movs	r3, #1
 8003188:	6811      	ldr	r1, [r2, #0]
 800318a:	6852      	ldr	r2, [r2, #4]
 800318c:	f001 fdcc 	bl	8004d28 <ssd1306_WriteString>
  	    	        	ssd1306_UpdateScreen();                                                                               
 8003190:	f001 fc8a 	bl	8004aa8 <ssd1306_UpdateScreen>
 8003194:	e72a      	b.n	8002fec <main+0xa10>
	    		else // we are under water
	    		{
        //*
	    			uint16_t data;
                                                                                                                                                                      
	    			log_counter++;
 8003196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003198:	3301      	adds	r3, #1
 800319a:	65fb      	str	r3, [r7, #92]	; 0x5c
                                                                                                                                                                      
	    			// calculate depth
	    			double depth = ((double)(P - surface_pressure))/9800.0;
 800319c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800319e:	f7fe fed5 	bl	8001f4c <__aeabi_ui2d>
 80031a2:	0003      	movs	r3, r0
 80031a4:	000c      	movs	r4, r1
 80031a6:	001a      	movs	r2, r3
 80031a8:	0023      	movs	r3, r4
 80031aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031ae:	f7fe fb15 	bl	80017dc <__aeabi_dsub>
 80031b2:	0003      	movs	r3, r0
 80031b4:	000c      	movs	r4, r1
 80031b6:	0018      	movs	r0, r3
 80031b8:	0021      	movs	r1, r4
 80031ba:	2200      	movs	r2, #0
 80031bc:	4b75      	ldr	r3, [pc, #468]	; (8003394 <main+0xdb8>)
 80031be:	f7fd fc91 	bl	8000ae4 <__aeabi_ddiv>
 80031c2:	0003      	movs	r3, r0
 80031c4:	000c      	movs	r4, r1
 80031c6:	643b      	str	r3, [r7, #64]	; 0x40
 80031c8:	647c      	str	r4, [r7, #68]	; 0x44
	    			if(depth > 1.0)
 80031ca:	2200      	movs	r2, #0
 80031cc:	4b72      	ldr	r3, [pc, #456]	; (8003398 <main+0xdbc>)
 80031ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80031d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031d2:	f7fd f857 	bl	8000284 <__aeabi_dcmpgt>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d00a      	beq.n	80031f0 <main+0xc14>
	    				depth -= 1.0;
 80031da:	2200      	movs	r2, #0
 80031dc:	4b6e      	ldr	r3, [pc, #440]	; (8003398 <main+0xdbc>)
 80031de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80031e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031e2:	f7fe fafb 	bl	80017dc <__aeabi_dsub>
 80031e6:	0003      	movs	r3, r0
 80031e8:	000c      	movs	r4, r1
 80031ea:	643b      	str	r3, [r7, #64]	; 0x40
 80031ec:	647c      	str	r4, [r7, #68]	; 0x44
 80031ee:	e003      	b.n	80031f8 <main+0xc1c>
	    			else
	    				depth = 0.0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	2400      	movs	r4, #0
 80031f4:	643b      	str	r3, [r7, #64]	; 0x40
 80031f6:	647c      	str	r4, [r7, #68]	; 0x44
                                                                                                                                                                      
	    			if(actuator_counter == 0)
 80031f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d000      	beq.n	8003200 <main+0xc24>
 80031fe:	e081      	b.n	8003304 <main+0xd28>
	    			{
  	    	        	ssd1306_SetCursor(0,0);
 8003200:	2100      	movs	r1, #0
 8003202:	2000      	movs	r0, #0
 8003204:	f001 fdba 	bl	8004d7c <ssd1306_SetCursor>
	    	        	//sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
	    				if(odd_even)
 8003208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320a:	2b00      	cmp	r3, #0
 800320c:	d014      	beq.n	8003238 <main+0xc5c>
	    	        		sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
 800320e:	1dfb      	adds	r3, r7, #7
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	001c      	movs	r4, r3
 8003214:	2308      	movs	r3, #8
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	001d      	movs	r5, r3
 800321c:	1dbb      	adds	r3, r7, #6
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	001a      	movs	r2, r3
 8003222:	1d7b      	adds	r3, r7, #5
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4954      	ldr	r1, [pc, #336]	; (8003378 <main+0xd9c>)
 8003228:	4854      	ldr	r0, [pc, #336]	; (800337c <main+0xda0>)
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	9200      	str	r2, [sp, #0]
 800322e:	002b      	movs	r3, r5
 8003230:	0022      	movs	r2, r4
 8003232:	f005 fc33 	bl	8008a9c <siprintf>
 8003236:	e013      	b.n	8003260 <main+0xc84>
	    				else
	    	        		sprintf(timestamp, "%02d %02d %02d %02d", hours, minutes, date, month);
 8003238:	1dfb      	adds	r3, r7, #7
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	001c      	movs	r4, r3
 800323e:	2308      	movs	r3, #8
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	001d      	movs	r5, r3
 8003246:	1dbb      	adds	r3, r7, #6
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	001a      	movs	r2, r3
 800324c:	1d7b      	adds	r3, r7, #5
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	494b      	ldr	r1, [pc, #300]	; (8003380 <main+0xda4>)
 8003252:	484a      	ldr	r0, [pc, #296]	; (800337c <main+0xda0>)
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	9200      	str	r2, [sp, #0]
 8003258:	002b      	movs	r3, r5
 800325a:	0022      	movs	r2, r4
 800325c:	f005 fc1e 	bl	8008a9c <siprintf>
	    	        	//sprintf(timestamp, "timestamp");
  	    	        	ssd1306_WriteString(timestamp, Font_11x18, White);
 8003260:	4a48      	ldr	r2, [pc, #288]	; (8003384 <main+0xda8>)
 8003262:	4846      	ldr	r0, [pc, #280]	; (800337c <main+0xda0>)
 8003264:	2301      	movs	r3, #1
 8003266:	6811      	ldr	r1, [r2, #0]
 8003268:	6852      	ldr	r2, [r2, #4]
 800326a:	f001 fd5d 	bl	8004d28 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,22);
 800326e:	2116      	movs	r1, #22
 8003270:	2000      	movs	r0, #0
 8003272:	f001 fd83 	bl	8004d7c <ssd1306_SetCursor>
	    	        	//sprintf(message, "glubina %02dm", (int)depth);
	    	        	sprintf(message, "gl--> %02d.%01dm", (int)depth, (int)((depth - (int)depth)*10.0));
 8003276:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003278:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800327a:	f7fe fdf7 	bl	8001e6c <__aeabi_d2iz>
 800327e:	0005      	movs	r5, r0
 8003280:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003282:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003284:	f7fe fdf2 	bl	8001e6c <__aeabi_d2iz>
 8003288:	0003      	movs	r3, r0
 800328a:	0018      	movs	r0, r3
 800328c:	f7fe fe24 	bl	8001ed8 <__aeabi_i2d>
 8003290:	0003      	movs	r3, r0
 8003292:	000c      	movs	r4, r1
 8003294:	001a      	movs	r2, r3
 8003296:	0023      	movs	r3, r4
 8003298:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800329a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800329c:	f7fe fa9e 	bl	80017dc <__aeabi_dsub>
 80032a0:	0003      	movs	r3, r0
 80032a2:	000c      	movs	r4, r1
 80032a4:	0018      	movs	r0, r3
 80032a6:	0021      	movs	r1, r4
 80032a8:	2200      	movs	r2, #0
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <main+0xdc0>)
 80032ac:	f7fe f824 	bl	80012f8 <__aeabi_dmul>
 80032b0:	0003      	movs	r3, r0
 80032b2:	000c      	movs	r4, r1
 80032b4:	0018      	movs	r0, r3
 80032b6:	0021      	movs	r1, r4
 80032b8:	f7fe fdd8 	bl	8001e6c <__aeabi_d2iz>
 80032bc:	0003      	movs	r3, r0
 80032be:	4938      	ldr	r1, [pc, #224]	; (80033a0 <main+0xdc4>)
 80032c0:	4832      	ldr	r0, [pc, #200]	; (800338c <main+0xdb0>)
 80032c2:	002a      	movs	r2, r5
 80032c4:	f005 fbea 	bl	8008a9c <siprintf>
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 80032c8:	4a2e      	ldr	r2, [pc, #184]	; (8003384 <main+0xda8>)
 80032ca:	4830      	ldr	r0, [pc, #192]	; (800338c <main+0xdb0>)
 80032cc:	2301      	movs	r3, #1
 80032ce:	6811      	ldr	r1, [r2, #0]
 80032d0:	6852      	ldr	r2, [r2, #4]
 80032d2:	f001 fd29 	bl	8004d28 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,44);
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	2000      	movs	r0, #0
 80032da:	f001 fd4f 	bl	8004d7c <ssd1306_SetCursor>
	    	        	sprintf(message, "akkum %02d%%", (int)accu_percentage);
 80032de:	6938      	ldr	r0, [r7, #16]
 80032e0:	6979      	ldr	r1, [r7, #20]
 80032e2:	f7fe fdc3 	bl	8001e6c <__aeabi_d2iz>
 80032e6:	0002      	movs	r2, r0
 80032e8:	4929      	ldr	r1, [pc, #164]	; (8003390 <main+0xdb4>)
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <main+0xdb0>)
 80032ec:	0018      	movs	r0, r3
 80032ee:	f005 fbd5 	bl	8008a9c <siprintf>
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <main+0xda8>)
 80032f4:	4825      	ldr	r0, [pc, #148]	; (800338c <main+0xdb0>)
 80032f6:	2301      	movs	r3, #1
 80032f8:	6811      	ldr	r1, [r2, #0]
 80032fa:	6852      	ldr	r2, [r2, #4]
 80032fc:	f001 fd14 	bl	8004d28 <ssd1306_WriteString>
  	    	        	ssd1306_UpdateScreen();  
 8003300:	f001 fbd2 	bl	8004aa8 <ssd1306_UpdateScreen>
	    			}
                                                                                                                                                                      
	    			// log depth
	    			//--------------------------------------------------------------------------
	    			uint8_t b0;
	    			int write_delay = 5;
 8003304:	2305      	movs	r3, #5
 8003306:	60fb      	str	r3, [r7, #12]
	    			static I2C_HandleTypeDef *at24c32_i2c_handle = &hi2c2;
                                                                                                                                                                      
	    			if(eeprom_number_of_records == 0)
 8003308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330a:	2b00      	cmp	r3, #0
 800330c:	d000      	beq.n	8003310 <main+0xd34>
 800330e:	e27d      	b.n	800380c <main+0x1230>
	    			{
	    				// no records yet
	    				
	    				// read memory bank id
	    				HAL_I2C_Mem_Read(at24c32_i2c_handle, at24c32_shifted_address, 0, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);	
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <main+0xdc8>)
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	2367      	movs	r3, #103	; 0x67
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	b299      	uxth	r1, r3
 800331c:	2364      	movs	r3, #100	; 0x64
 800331e:	9302      	str	r3, [sp, #8]
 8003320:	2301      	movs	r3, #1
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	1cfb      	adds	r3, r7, #3
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	2302      	movs	r3, #2
 800332a:	2200      	movs	r2, #0
 800332c:	f002 fff0 	bl	8006310 <HAL_I2C_Mem_Read>
                                                                                                                                                                      
	    				if(b0 == 1)   // pishem v bank 1
 8003330:	1cfb      	adds	r3, r7, #3
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d137      	bne.n	80033a8 <main+0xdcc>
	    				{
	    					// pri sleduyuschem zapuske budem pisat' v bank 0
	    					b0 = 0;
 8003338:	1cfb      	adds	r3, r7, #3
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
	    					HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, 0, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800333e:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <main+0xdc8>)
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	2467      	movs	r4, #103	; 0x67
 8003344:	193b      	adds	r3, r7, r4
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b299      	uxth	r1, r3
 800334a:	2364      	movs	r3, #100	; 0x64
 800334c:	9302      	str	r3, [sp, #8]
 800334e:	2301      	movs	r3, #1
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	1cfb      	adds	r3, r7, #3
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2302      	movs	r3, #2
 8003358:	2200      	movs	r2, #0
 800335a:	f002 feab 	bl	80060b4 <HAL_I2C_Mem_Write>
	    					HAL_Delay(write_delay);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	0018      	movs	r0, r3
 8003362:	f002 f80b 	bl	800537c <HAL_Delay>
                                                                                                                                                                      
	    					// nastraivaem address i2c banka pamyati (nomer 1)
	    					at24c32_shifted_address = 0x51 << 1;
 8003366:	193b      	adds	r3, r7, r4
 8003368:	22a2      	movs	r2, #162	; 0xa2
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e033      	b.n	80033d6 <main+0xdfa>
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	80000001 	.word	0x80000001
 8003374:	00002648 	.word	0x00002648
 8003378:	08009364 	.word	0x08009364
 800337c:	20000104 	.word	0x20000104
 8003380:	08009378 	.word	0x08009378
 8003384:	20000010 	.word	0x20000010
 8003388:	0800938c 	.word	0x0800938c
 800338c:	200000c4 	.word	0x200000c4
 8003390:	0800939c 	.word	0x0800939c
 8003394:	40c32400 	.word	0x40c32400
 8003398:	3ff00000 	.word	0x3ff00000
 800339c:	40240000 	.word	0x40240000
 80033a0:	080093ac 	.word	0x080093ac
 80033a4:	2000001c 	.word	0x2000001c
	    				}
	    				else
	    				{
	    					// pri sleduyuschem zapuske budem pisat' v bank 1
	    					b0 = 1;
 80033a8:	1cfb      	adds	r3, r7, #3
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
	    					HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, 0, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80033ae:	4bef      	ldr	r3, [pc, #956]	; (800376c <main+0x1190>)
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	2367      	movs	r3, #103	; 0x67
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b299      	uxth	r1, r3
 80033ba:	2364      	movs	r3, #100	; 0x64
 80033bc:	9302      	str	r3, [sp, #8]
 80033be:	2301      	movs	r3, #1
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	1cfb      	adds	r3, r7, #3
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2302      	movs	r3, #2
 80033c8:	2200      	movs	r2, #0
 80033ca:	f002 fe73 	bl	80060b4 <HAL_I2C_Mem_Write>
	    					HAL_Delay(write_delay);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f001 ffd3 	bl	800537c <HAL_Delay>
	    				}
                                                                                                                                                                      
                                                                                                                                                                      
	    				// write timestamp
	    	        	sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
 80033d6:	1dfb      	adds	r3, r7, #7
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	001c      	movs	r4, r3
 80033dc:	2308      	movs	r3, #8
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	001d      	movs	r5, r3
 80033e4:	1dbb      	adds	r3, r7, #6
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	001a      	movs	r2, r3
 80033ea:	1d7b      	adds	r3, r7, #5
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	49e0      	ldr	r1, [pc, #896]	; (8003770 <main+0x1194>)
 80033f0:	48e0      	ldr	r0, [pc, #896]	; (8003774 <main+0x1198>)
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	9200      	str	r2, [sp, #0]
 80033f6:	002b      	movs	r3, r5
 80033f8:	0022      	movs	r2, r4
 80033fa:	f005 fb4f 	bl	8008a9c <siprintf>
	    				b0 = timestamp[0];
 80033fe:	4bdd      	ldr	r3, [pc, #884]	; (8003774 <main+0x1198>)
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	1cfb      	adds	r3, r7, #3
 8003404:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003406:	4bd9      	ldr	r3, [pc, #868]	; (800376c <main+0x1190>)
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	2567      	movs	r5, #103	; 0x67
 800340c:	197b      	adds	r3, r7, r5
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	b299      	uxth	r1, r3
 8003412:	2664      	movs	r6, #100	; 0x64
 8003414:	19bb      	adds	r3, r7, r6
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	2364      	movs	r3, #100	; 0x64
 800341a:	9302      	str	r3, [sp, #8]
 800341c:	2301      	movs	r3, #1
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	1cfb      	adds	r3, r7, #3
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2302      	movs	r3, #2
 8003426:	f002 fe45 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	0018      	movs	r0, r3
 800342e:	f001 ffa5 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003432:	19bb      	adds	r3, r7, r6
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	19bb      	adds	r3, r7, r6
 8003438:	3201      	adds	r2, #1
 800343a:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[1];
 800343c:	4bcd      	ldr	r3, [pc, #820]	; (8003774 <main+0x1198>)
 800343e:	785a      	ldrb	r2, [r3, #1]
 8003440:	1cfb      	adds	r3, r7, #3
 8003442:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003444:	4bc9      	ldr	r3, [pc, #804]	; (800376c <main+0x1190>)
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	197b      	adds	r3, r7, r5
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b299      	uxth	r1, r3
 800344e:	19bb      	adds	r3, r7, r6
 8003450:	881a      	ldrh	r2, [r3, #0]
 8003452:	2364      	movs	r3, #100	; 0x64
 8003454:	9302      	str	r3, [sp, #8]
 8003456:	2301      	movs	r3, #1
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	1cfb      	adds	r3, r7, #3
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2302      	movs	r3, #2
 8003460:	f002 fe28 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0018      	movs	r0, r3
 8003468:	f001 ff88 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 800346c:	19bb      	adds	r3, r7, r6
 800346e:	881a      	ldrh	r2, [r3, #0]
 8003470:	19bb      	adds	r3, r7, r6
 8003472:	3201      	adds	r2, #1
 8003474:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[3];
 8003476:	4bbf      	ldr	r3, [pc, #764]	; (8003774 <main+0x1198>)
 8003478:	78da      	ldrb	r2, [r3, #3]
 800347a:	1cfb      	adds	r3, r7, #3
 800347c:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800347e:	4bbb      	ldr	r3, [pc, #748]	; (800376c <main+0x1190>)
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	197b      	adds	r3, r7, r5
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b299      	uxth	r1, r3
 8003488:	19bb      	adds	r3, r7, r6
 800348a:	881a      	ldrh	r2, [r3, #0]
 800348c:	2364      	movs	r3, #100	; 0x64
 800348e:	9302      	str	r3, [sp, #8]
 8003490:	2301      	movs	r3, #1
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	1cfb      	adds	r3, r7, #3
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	2302      	movs	r3, #2
 800349a:	f002 fe0b 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f001 ff6b 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 80034a6:	19bb      	adds	r3, r7, r6
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	19bb      	adds	r3, r7, r6
 80034ac:	3201      	adds	r2, #1
 80034ae:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[4];
 80034b0:	4bb0      	ldr	r3, [pc, #704]	; (8003774 <main+0x1198>)
 80034b2:	791a      	ldrb	r2, [r3, #4]
 80034b4:	1cfb      	adds	r3, r7, #3
 80034b6:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80034b8:	4bac      	ldr	r3, [pc, #688]	; (800376c <main+0x1190>)
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	197b      	adds	r3, r7, r5
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b299      	uxth	r1, r3
 80034c2:	19bb      	adds	r3, r7, r6
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	2364      	movs	r3, #100	; 0x64
 80034c8:	9302      	str	r3, [sp, #8]
 80034ca:	2301      	movs	r3, #1
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	1cfb      	adds	r3, r7, #3
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	2302      	movs	r3, #2
 80034d4:	f002 fdee 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	0018      	movs	r0, r3
 80034dc:	f001 ff4e 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 80034e0:	19bb      	adds	r3, r7, r6
 80034e2:	881a      	ldrh	r2, [r3, #0]
 80034e4:	19bb      	adds	r3, r7, r6
 80034e6:	3201      	adds	r2, #1
 80034e8:	801a      	strh	r2, [r3, #0]
	    				//b0 = ' ';
	    				//HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
	    				//HAL_Delay(write_delay);
	    				//eeprom_debug_address++;
	    				b0 = timestamp[6];
 80034ea:	4ba2      	ldr	r3, [pc, #648]	; (8003774 <main+0x1198>)
 80034ec:	799a      	ldrb	r2, [r3, #6]
 80034ee:	1cfb      	adds	r3, r7, #3
 80034f0:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80034f2:	4b9e      	ldr	r3, [pc, #632]	; (800376c <main+0x1190>)
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	197b      	adds	r3, r7, r5
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b299      	uxth	r1, r3
 80034fc:	19bb      	adds	r3, r7, r6
 80034fe:	881a      	ldrh	r2, [r3, #0]
 8003500:	2364      	movs	r3, #100	; 0x64
 8003502:	9302      	str	r3, [sp, #8]
 8003504:	2301      	movs	r3, #1
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	1cfb      	adds	r3, r7, #3
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2302      	movs	r3, #2
 800350e:	f002 fdd1 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	0018      	movs	r0, r3
 8003516:	f001 ff31 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 800351a:	19bb      	adds	r3, r7, r6
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	19bb      	adds	r3, r7, r6
 8003520:	3201      	adds	r2, #1
 8003522:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[7];
 8003524:	4b93      	ldr	r3, [pc, #588]	; (8003774 <main+0x1198>)
 8003526:	79da      	ldrb	r2, [r3, #7]
 8003528:	1cfb      	adds	r3, r7, #3
 800352a:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800352c:	4b8f      	ldr	r3, [pc, #572]	; (800376c <main+0x1190>)
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	197b      	adds	r3, r7, r5
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	b299      	uxth	r1, r3
 8003536:	19bb      	adds	r3, r7, r6
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	2364      	movs	r3, #100	; 0x64
 800353c:	9302      	str	r3, [sp, #8]
 800353e:	2301      	movs	r3, #1
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	1cfb      	adds	r3, r7, #3
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2302      	movs	r3, #2
 8003548:	f002 fdb4 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	0018      	movs	r0, r3
 8003550:	f001 ff14 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003554:	19bb      	adds	r3, r7, r6
 8003556:	881a      	ldrh	r2, [r3, #0]
 8003558:	19bb      	adds	r3, r7, r6
 800355a:	3201      	adds	r2, #1
 800355c:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[9];
 800355e:	4b85      	ldr	r3, [pc, #532]	; (8003774 <main+0x1198>)
 8003560:	7a5a      	ldrb	r2, [r3, #9]
 8003562:	1cfb      	adds	r3, r7, #3
 8003564:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003566:	4b81      	ldr	r3, [pc, #516]	; (800376c <main+0x1190>)
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	197b      	adds	r3, r7, r5
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b299      	uxth	r1, r3
 8003570:	19bb      	adds	r3, r7, r6
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	2364      	movs	r3, #100	; 0x64
 8003576:	9302      	str	r3, [sp, #8]
 8003578:	2301      	movs	r3, #1
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	1cfb      	adds	r3, r7, #3
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2302      	movs	r3, #2
 8003582:	f002 fd97 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	0018      	movs	r0, r3
 800358a:	f001 fef7 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 800358e:	19bb      	adds	r3, r7, r6
 8003590:	881a      	ldrh	r2, [r3, #0]
 8003592:	19bb      	adds	r3, r7, r6
 8003594:	3201      	adds	r2, #1
 8003596:	801a      	strh	r2, [r3, #0]
	    				b0 = timestamp[10];
 8003598:	4b76      	ldr	r3, [pc, #472]	; (8003774 <main+0x1198>)
 800359a:	7a9a      	ldrb	r2, [r3, #10]
 800359c:	1cfb      	adds	r3, r7, #3
 800359e:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80035a0:	4b72      	ldr	r3, [pc, #456]	; (800376c <main+0x1190>)
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	197b      	adds	r3, r7, r5
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	b299      	uxth	r1, r3
 80035aa:	19bb      	adds	r3, r7, r6
 80035ac:	881a      	ldrh	r2, [r3, #0]
 80035ae:	2364      	movs	r3, #100	; 0x64
 80035b0:	9302      	str	r3, [sp, #8]
 80035b2:	2301      	movs	r3, #1
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	1cfb      	adds	r3, r7, #3
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2302      	movs	r3, #2
 80035bc:	f002 fd7a 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f001 feda 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 80035c8:	19bb      	adds	r3, r7, r6
 80035ca:	881a      	ldrh	r2, [r3, #0]
 80035cc:	19bb      	adds	r3, r7, r6
 80035ce:	3201      	adds	r2, #1
 80035d0:	801a      	strh	r2, [r3, #0]
	    				//eeprom_debug_address++;
                                                                                                                                                                      
                                                                                                                                                                      
                                                                                                                                                                      
	    				// write first depth record
	    	        	sprintf(message, "%02d.%01d", (int)depth, (int)((depth - (int)depth)*10.0));
 80035d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80035d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035d6:	f7fe fc49 	bl	8001e6c <__aeabi_d2iz>
 80035da:	0005      	movs	r5, r0
 80035dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80035de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035e0:	f7fe fc44 	bl	8001e6c <__aeabi_d2iz>
 80035e4:	0003      	movs	r3, r0
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7fe fc76 	bl	8001ed8 <__aeabi_i2d>
 80035ec:	0003      	movs	r3, r0
 80035ee:	000c      	movs	r4, r1
 80035f0:	001a      	movs	r2, r3
 80035f2:	0023      	movs	r3, r4
 80035f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80035f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035f8:	f7fe f8f0 	bl	80017dc <__aeabi_dsub>
 80035fc:	0003      	movs	r3, r0
 80035fe:	000c      	movs	r4, r1
 8003600:	0018      	movs	r0, r3
 8003602:	0021      	movs	r1, r4
 8003604:	2200      	movs	r2, #0
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <main+0x119c>)
 8003608:	f7fd fe76 	bl	80012f8 <__aeabi_dmul>
 800360c:	0003      	movs	r3, r0
 800360e:	000c      	movs	r4, r1
 8003610:	0018      	movs	r0, r3
 8003612:	0021      	movs	r1, r4
 8003614:	f7fe fc2a 	bl	8001e6c <__aeabi_d2iz>
 8003618:	0003      	movs	r3, r0
 800361a:	4958      	ldr	r1, [pc, #352]	; (800377c <main+0x11a0>)
 800361c:	4858      	ldr	r0, [pc, #352]	; (8003780 <main+0x11a4>)
 800361e:	002a      	movs	r2, r5
 8003620:	f005 fa3c 	bl	8008a9c <siprintf>
	    	       		sprintf(temperature_message, "%02d", (int)(actual_temperature/100.0));
 8003624:	2200      	movs	r2, #0
 8003626:	4b57      	ldr	r3, [pc, #348]	; (8003784 <main+0x11a8>)
 8003628:	6a38      	ldr	r0, [r7, #32]
 800362a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800362c:	f7fd fa5a 	bl	8000ae4 <__aeabi_ddiv>
 8003630:	0003      	movs	r3, r0
 8003632:	000c      	movs	r4, r1
 8003634:	0018      	movs	r0, r3
 8003636:	0021      	movs	r1, r4
 8003638:	f7fe fc18 	bl	8001e6c <__aeabi_d2iz>
 800363c:	0002      	movs	r2, r0
 800363e:	4952      	ldr	r1, [pc, #328]	; (8003788 <main+0x11ac>)
 8003640:	4b52      	ldr	r3, [pc, #328]	; (800378c <main+0x11b0>)
 8003642:	0018      	movs	r0, r3
 8003644:	f005 fa2a 	bl	8008a9c <siprintf>
	    				b0 = message[0];
 8003648:	4b4d      	ldr	r3, [pc, #308]	; (8003780 <main+0x11a4>)
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	1cfb      	adds	r3, r7, #3
 800364e:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003650:	4b46      	ldr	r3, [pc, #280]	; (800376c <main+0x1190>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	2567      	movs	r5, #103	; 0x67
 8003656:	197b      	adds	r3, r7, r5
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b299      	uxth	r1, r3
 800365c:	0034      	movs	r4, r6
 800365e:	193b      	adds	r3, r7, r4
 8003660:	881a      	ldrh	r2, [r3, #0]
 8003662:	2364      	movs	r3, #100	; 0x64
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	2301      	movs	r3, #1
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	1cfb      	adds	r3, r7, #3
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2302      	movs	r3, #2
 8003670:	f002 fd20 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	0018      	movs	r0, r3
 8003678:	f001 fe80 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 800367c:	193b      	adds	r3, r7, r4
 800367e:	881a      	ldrh	r2, [r3, #0]
 8003680:	193b      	adds	r3, r7, r4
 8003682:	3201      	adds	r2, #1
 8003684:	801a      	strh	r2, [r3, #0]
	    				b0 = message[1];
 8003686:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <main+0x11a4>)
 8003688:	785a      	ldrb	r2, [r3, #1]
 800368a:	1cfb      	adds	r3, r7, #3
 800368c:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800368e:	4b37      	ldr	r3, [pc, #220]	; (800376c <main+0x1190>)
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	197b      	adds	r3, r7, r5
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b299      	uxth	r1, r3
 8003698:	193b      	adds	r3, r7, r4
 800369a:	881a      	ldrh	r2, [r3, #0]
 800369c:	2364      	movs	r3, #100	; 0x64
 800369e:	9302      	str	r3, [sp, #8]
 80036a0:	2301      	movs	r3, #1
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	1cfb      	adds	r3, r7, #3
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2302      	movs	r3, #2
 80036aa:	f002 fd03 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	0018      	movs	r0, r3
 80036b2:	f001 fe63 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	881a      	ldrh	r2, [r3, #0]
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	3201      	adds	r2, #1
 80036be:	801a      	strh	r2, [r3, #0]
	    				//b0 = message[2];
	    				//HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
	    				//HAL_Delay(write_delay);
	    				//eeprom_debug_address++;
	    				b0 = message[3];
 80036c0:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <main+0x11a4>)
 80036c2:	78da      	ldrb	r2, [r3, #3]
 80036c4:	1cfb      	adds	r3, r7, #3
 80036c6:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <main+0x1190>)
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	197b      	adds	r3, r7, r5
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b299      	uxth	r1, r3
 80036d2:	193b      	adds	r3, r7, r4
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	2364      	movs	r3, #100	; 0x64
 80036d8:	9302      	str	r3, [sp, #8]
 80036da:	2301      	movs	r3, #1
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	1cfb      	adds	r3, r7, #3
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2302      	movs	r3, #2
 80036e4:	f002 fce6 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f001 fe46 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	881a      	ldrh	r2, [r3, #0]
 80036f4:	193b      	adds	r3, r7, r4
 80036f6:	3201      	adds	r2, #1
 80036f8:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[0];
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <main+0x11b0>)
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	1cfb      	adds	r3, r7, #3
 8003700:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <main+0x1190>)
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	197b      	adds	r3, r7, r5
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b299      	uxth	r1, r3
 800370c:	193b      	adds	r3, r7, r4
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	2364      	movs	r3, #100	; 0x64
 8003712:	9302      	str	r3, [sp, #8]
 8003714:	2301      	movs	r3, #1
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	1cfb      	adds	r3, r7, #3
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2302      	movs	r3, #2
 800371e:	f002 fcc9 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	0018      	movs	r0, r3
 8003726:	f001 fe29 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 800372a:	193b      	adds	r3, r7, r4
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	193b      	adds	r3, r7, r4
 8003730:	3201      	adds	r2, #1
 8003732:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[1];
 8003734:	4b15      	ldr	r3, [pc, #84]	; (800378c <main+0x11b0>)
 8003736:	785a      	ldrb	r2, [r3, #1]
 8003738:	1cfb      	adds	r3, r7, #3
 800373a:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <main+0x1190>)
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	197b      	adds	r3, r7, r5
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b299      	uxth	r1, r3
 8003746:	193b      	adds	r3, r7, r4
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	2364      	movs	r3, #100	; 0x64
 800374c:	9302      	str	r3, [sp, #8]
 800374e:	2301      	movs	r3, #1
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	1cfb      	adds	r3, r7, #3
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2302      	movs	r3, #2
 8003758:	f002 fcac 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	0018      	movs	r0, r3
 8003760:	f001 fe0c 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003764:	193b      	adds	r3, r7, r4
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	193b      	adds	r3, r7, r4
 800376a:	e011      	b.n	8003790 <main+0x11b4>
 800376c:	2000001c 	.word	0x2000001c
 8003770:	08009364 	.word	0x08009364
 8003774:	20000104 	.word	0x20000104
 8003778:	40240000 	.word	0x40240000
 800377c:	080093c0 	.word	0x080093c0
 8003780:	200000c4 	.word	0x200000c4
 8003784:	40590000 	.word	0x40590000
 8003788:	080093cc 	.word	0x080093cc
 800378c:	20000144 	.word	0x20000144
 8003790:	3201      	adds	r2, #1
 8003792:	801a      	strh	r2, [r3, #0]
	    				b0 = 0;
 8003794:	1cfb      	adds	r3, r7, #3
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800379a:	4ba7      	ldr	r3, [pc, #668]	; (8003a38 <main+0x145c>)
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	197b      	adds	r3, r7, r5
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b299      	uxth	r1, r3
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	881a      	ldrh	r2, [r3, #0]
 80037a8:	2364      	movs	r3, #100	; 0x64
 80037aa:	9302      	str	r3, [sp, #8]
 80037ac:	2301      	movs	r3, #1
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	1cfb      	adds	r3, r7, #3
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2302      	movs	r3, #2
 80037b6:	f002 fc7d 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	0018      	movs	r0, r3
 80037be:	f001 fddd 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 80037c2:	193b      	adds	r3, r7, r4
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	3201      	adds	r2, #1
 80037ca:	801a      	strh	r2, [r3, #0]
	    				b0 = 0;
 80037cc:	1cfb      	adds	r3, r7, #3
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80037d2:	4b99      	ldr	r3, [pc, #612]	; (8003a38 <main+0x145c>)
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	197b      	adds	r3, r7, r5
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b299      	uxth	r1, r3
 80037dc:	193b      	adds	r3, r7, r4
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	2364      	movs	r3, #100	; 0x64
 80037e2:	9302      	str	r3, [sp, #8]
 80037e4:	2301      	movs	r3, #1
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	1cfb      	adds	r3, r7, #3
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2302      	movs	r3, #2
 80037ee:	f002 fc61 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f001 fdc1 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address--;
 80037fa:	193b      	adds	r3, r7, r4
 80037fc:	881a      	ldrh	r2, [r3, #0]
 80037fe:	193b      	adds	r3, r7, r4
 8003800:	3a01      	subs	r2, #1
 8003802:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 8003804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003806:	3301      	adds	r3, #1
 8003808:	663b      	str	r3, [r7, #96]	; 0x60
 800380a:	e101      	b.n	8003a10 <main+0x1434>
	    			else
	    			{
	    				// there are depth records
                                                                                                                                                                      
	    				// write new record
	    				b0 = 0;
 800380c:	1cfb      	adds	r3, r7, #3
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address + 5, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003812:	4b89      	ldr	r3, [pc, #548]	; (8003a38 <main+0x145c>)
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	2567      	movs	r5, #103	; 0x67
 8003818:	197b      	adds	r3, r7, r5
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b299      	uxth	r1, r3
 800381e:	2664      	movs	r6, #100	; 0x64
 8003820:	19bb      	adds	r3, r7, r6
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	3305      	adds	r3, #5
 8003826:	b29a      	uxth	r2, r3
 8003828:	2364      	movs	r3, #100	; 0x64
 800382a:	9302      	str	r3, [sp, #8]
 800382c:	2301      	movs	r3, #1
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	1cfb      	adds	r3, r7, #3
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2302      	movs	r3, #2
 8003836:	f002 fc3d 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	0018      	movs	r0, r3
 800383e:	f001 fd9d 	bl	800537c <HAL_Delay>
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address + 6, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003842:	4b7d      	ldr	r3, [pc, #500]	; (8003a38 <main+0x145c>)
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	197b      	adds	r3, r7, r5
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	b299      	uxth	r1, r3
 800384c:	19bb      	adds	r3, r7, r6
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	3306      	adds	r3, #6
 8003852:	b29a      	uxth	r2, r3
 8003854:	2364      	movs	r3, #100	; 0x64
 8003856:	9302      	str	r3, [sp, #8]
 8003858:	2301      	movs	r3, #1
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	1cfb      	adds	r3, r7, #3
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2302      	movs	r3, #2
 8003862:	f002 fc27 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	0018      	movs	r0, r3
 800386a:	f001 fd87 	bl	800537c <HAL_Delay>
	    				eeprom_number_of_records++;
 800386e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003870:	3301      	adds	r3, #1
 8003872:	663b      	str	r3, [r7, #96]	; 0x60
	    	        	sprintf(message, "%02d.%01d", (int)depth, (int)((depth - (int)depth)*10.0));
 8003874:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003878:	f7fe faf8 	bl	8001e6c <__aeabi_d2iz>
 800387c:	0005      	movs	r5, r0
 800387e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003880:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003882:	f7fe faf3 	bl	8001e6c <__aeabi_d2iz>
 8003886:	0003      	movs	r3, r0
 8003888:	0018      	movs	r0, r3
 800388a:	f7fe fb25 	bl	8001ed8 <__aeabi_i2d>
 800388e:	0003      	movs	r3, r0
 8003890:	000c      	movs	r4, r1
 8003892:	001a      	movs	r2, r3
 8003894:	0023      	movs	r3, r4
 8003896:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003898:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800389a:	f7fd ff9f 	bl	80017dc <__aeabi_dsub>
 800389e:	0003      	movs	r3, r0
 80038a0:	000c      	movs	r4, r1
 80038a2:	0018      	movs	r0, r3
 80038a4:	0021      	movs	r1, r4
 80038a6:	2200      	movs	r2, #0
 80038a8:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <main+0x1460>)
 80038aa:	f7fd fd25 	bl	80012f8 <__aeabi_dmul>
 80038ae:	0003      	movs	r3, r0
 80038b0:	000c      	movs	r4, r1
 80038b2:	0018      	movs	r0, r3
 80038b4:	0021      	movs	r1, r4
 80038b6:	f7fe fad9 	bl	8001e6c <__aeabi_d2iz>
 80038ba:	0003      	movs	r3, r0
 80038bc:	4960      	ldr	r1, [pc, #384]	; (8003a40 <main+0x1464>)
 80038be:	4861      	ldr	r0, [pc, #388]	; (8003a44 <main+0x1468>)
 80038c0:	002a      	movs	r2, r5
 80038c2:	f005 f8eb 	bl	8008a9c <siprintf>
	    	       		sprintf(temperature_message, "%02d", (int)(actual_temperature/100.0));
 80038c6:	2200      	movs	r2, #0
 80038c8:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <main+0x146c>)
 80038ca:	6a38      	ldr	r0, [r7, #32]
 80038cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ce:	f7fd f909 	bl	8000ae4 <__aeabi_ddiv>
 80038d2:	0003      	movs	r3, r0
 80038d4:	000c      	movs	r4, r1
 80038d6:	0018      	movs	r0, r3
 80038d8:	0021      	movs	r1, r4
 80038da:	f7fe fac7 	bl	8001e6c <__aeabi_d2iz>
 80038de:	0002      	movs	r2, r0
 80038e0:	495a      	ldr	r1, [pc, #360]	; (8003a4c <main+0x1470>)
 80038e2:	4b5b      	ldr	r3, [pc, #364]	; (8003a50 <main+0x1474>)
 80038e4:	0018      	movs	r0, r3
 80038e6:	f005 f8d9 	bl	8008a9c <siprintf>
	    				b0 = message[0];
 80038ea:	4b56      	ldr	r3, [pc, #344]	; (8003a44 <main+0x1468>)
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	1cfb      	adds	r3, r7, #3
 80038f0:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80038f2:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <main+0x145c>)
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	2567      	movs	r5, #103	; 0x67
 80038f8:	197b      	adds	r3, r7, r5
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	b299      	uxth	r1, r3
 80038fe:	0034      	movs	r4, r6
 8003900:	193b      	adds	r3, r7, r4
 8003902:	881a      	ldrh	r2, [r3, #0]
 8003904:	2364      	movs	r3, #100	; 0x64
 8003906:	9302      	str	r3, [sp, #8]
 8003908:	2301      	movs	r3, #1
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	1cfb      	adds	r3, r7, #3
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2302      	movs	r3, #2
 8003912:	f002 fbcf 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	0018      	movs	r0, r3
 800391a:	f001 fd2f 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 800391e:	193b      	adds	r3, r7, r4
 8003920:	881a      	ldrh	r2, [r3, #0]
 8003922:	193b      	adds	r3, r7, r4
 8003924:	3201      	adds	r2, #1
 8003926:	801a      	strh	r2, [r3, #0]
	    				b0 = message[1];
 8003928:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <main+0x1468>)
 800392a:	785a      	ldrb	r2, [r3, #1]
 800392c:	1cfb      	adds	r3, r7, #3
 800392e:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003930:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <main+0x145c>)
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	197b      	adds	r3, r7, r5
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b299      	uxth	r1, r3
 800393a:	193b      	adds	r3, r7, r4
 800393c:	881a      	ldrh	r2, [r3, #0]
 800393e:	2364      	movs	r3, #100	; 0x64
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	2301      	movs	r3, #1
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	1cfb      	adds	r3, r7, #3
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2302      	movs	r3, #2
 800394c:	f002 fbb2 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	0018      	movs	r0, r3
 8003954:	f001 fd12 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003958:	193b      	adds	r3, r7, r4
 800395a:	881a      	ldrh	r2, [r3, #0]
 800395c:	193b      	adds	r3, r7, r4
 800395e:	3201      	adds	r2, #1
 8003960:	801a      	strh	r2, [r3, #0]
	    				//b0 = message[2];
	    				//HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
	    				//HAL_Delay(write_delay);
	    				//eeprom_debug_address++;
	    				b0 = message[3];
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <main+0x1468>)
 8003964:	78da      	ldrb	r2, [r3, #3]
 8003966:	1cfb      	adds	r3, r7, #3
 8003968:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 800396a:	4b33      	ldr	r3, [pc, #204]	; (8003a38 <main+0x145c>)
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	197b      	adds	r3, r7, r5
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b299      	uxth	r1, r3
 8003974:	193b      	adds	r3, r7, r4
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	2364      	movs	r3, #100	; 0x64
 800397a:	9302      	str	r3, [sp, #8]
 800397c:	2301      	movs	r3, #1
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	1cfb      	adds	r3, r7, #3
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	2302      	movs	r3, #2
 8003986:	f002 fb95 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	0018      	movs	r0, r3
 800398e:	f001 fcf5 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003992:	193b      	adds	r3, r7, r4
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	193b      	adds	r3, r7, r4
 8003998:	3201      	adds	r2, #1
 800399a:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[0];
 800399c:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <main+0x1474>)
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	1cfb      	adds	r3, r7, #3
 80039a2:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80039a4:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <main+0x145c>)
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	197b      	adds	r3, r7, r5
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b299      	uxth	r1, r3
 80039ae:	193b      	adds	r3, r7, r4
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	2364      	movs	r3, #100	; 0x64
 80039b4:	9302      	str	r3, [sp, #8]
 80039b6:	2301      	movs	r3, #1
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	1cfb      	adds	r3, r7, #3
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2302      	movs	r3, #2
 80039c0:	f002 fb78 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f001 fcd8 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 80039cc:	193b      	adds	r3, r7, r4
 80039ce:	881a      	ldrh	r2, [r3, #0]
 80039d0:	193b      	adds	r3, r7, r4
 80039d2:	3201      	adds	r2, #1
 80039d4:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[1];
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <main+0x1474>)
 80039d8:	785a      	ldrb	r2, [r3, #1]
 80039da:	1cfb      	adds	r3, r7, #3
 80039dc:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <main+0x145c>)
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	197b      	adds	r3, r7, r5
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b299      	uxth	r1, r3
 80039e8:	193b      	adds	r3, r7, r4
 80039ea:	881a      	ldrh	r2, [r3, #0]
 80039ec:	2364      	movs	r3, #100	; 0x64
 80039ee:	9302      	str	r3, [sp, #8]
 80039f0:	2301      	movs	r3, #1
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	1cfb      	adds	r3, r7, #3
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2302      	movs	r3, #2
 80039fa:	f002 fb5b 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f001 fcbb 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	193b      	adds	r3, r7, r4
 8003a0c:	3201      	adds	r2, #1
 8003a0e:	801a      	strh	r2, [r3, #0]
                                                                                                                                                                      
                                                                                                                                                                      
                                                                                                                                                                      
	    			//--------------------------------------------------------------------------
                                                                                                                                                                      
	    			if((actuator_counter > 0) && (actuator_counter < 100))
 8003a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	dd21      	ble.n	8003a5a <main+0x147e>
 8003a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a18:	2b63      	cmp	r3, #99	; 0x63
 8003a1a:	dc1e      	bgt.n	8003a5a <main+0x147e>
	    			{
	    				if(actuator_counter >= 21)
 8003a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a1e:	2b14      	cmp	r3, #20
 8003a20:	dd18      	ble.n	8003a54 <main+0x1478>
	    				{
	    					// switch off actuators
  	    					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);// turn actuators off
 8003a22:	23c0      	movs	r3, #192	; 0xc0
 8003a24:	0159      	lsls	r1, r3, #5
 8003a26:	23a0      	movs	r3, #160	; 0xa0
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f002 fa8d 	bl	8005f4c <HAL_GPIO_WritePin>
	    					actuator_counter = 100;
 8003a32:	2364      	movs	r3, #100	; 0x64
 8003a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a36:	e010      	b.n	8003a5a <main+0x147e>
 8003a38:	2000001c 	.word	0x2000001c
 8003a3c:	40240000 	.word	0x40240000
 8003a40:	080093c0 	.word	0x080093c0
 8003a44:	200000c4 	.word	0x200000c4
 8003a48:	40590000 	.word	0x40590000
 8003a4c:	080093cc 	.word	0x080093cc
 8003a50:	20000144 	.word	0x20000144
	    				}
	    				else
	    				{
	    					actuator_counter++;
 8003a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a56:	3301      	adds	r3, #1
 8003a58:	65bb      	str	r3, [r7, #88]	; 0x58
	    				}
	    			}
                                                                                                                                                                      
                                                                                                                                                                      
	    			if((depth >= (depth_switch_get_current_depth())) && actuator_counter == 0)
 8003a5a:	f7fe fc51 	bl	8002300 <depth_switch_get_current_depth>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	000c      	movs	r4, r1
 8003a62:	001a      	movs	r2, r3
 8003a64:	0023      	movs	r3, r4
 8003a66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a6a:	f7fc fc15 	bl	8000298 <__aeabi_dcmpge>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d100      	bne.n	8003a74 <main+0x1498>
 8003a72:	e1b4      	b.n	8003dde <main+0x1802>
 8003a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <main+0x14a2>
 8003a7a:	f7ff fab7 	bl	8002fec <main+0xa10>
	    			{
                                                                                                                                                                      
	    				actuator_counter++;
 8003a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a80:	3301      	adds	r3, #1
 8003a82:	65bb      	str	r3, [r7, #88]	; 0x58
	    				// switch on actuators
  	    				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_SET);// turn actuators on
 8003a84:	23c0      	movs	r3, #192	; 0xc0
 8003a86:	0159      	lsls	r1, r3, #5
 8003a88:	23a0      	movs	r3, #160	; 0xa0
 8003a8a:	05db      	lsls	r3, r3, #23
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f002 fa5c 	bl	8005f4c <HAL_GPIO_WritePin>
                                                                                                                                                                      
	    				// switch on signal leds
  	    				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3, GPIO_PIN_SET);// turn leds off
 8003a94:	4bd3      	ldr	r3, [pc, #844]	; (8003de4 <main+0x1808>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	210f      	movs	r1, #15
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f002 fa56 	bl	8005f4c <HAL_GPIO_WritePin>
                                                                                                                                                                      
                                                                                                                                                                      
	    				// save info about activation conditions (time, depth, etc)
	    				ssd1306_Fill(Black);
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f000 ffdb 	bl	8004a5c <ssd1306_Fill>
  	    	        	ssd1306_SetCursor(0,0);
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f001 f967 	bl	8004d7c <ssd1306_SetCursor>
	    	        	sprintf(timestamp, "%02d:%02d %02d.%02d", hours, minutes, date, month);
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	001c      	movs	r4, r3
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	001d      	movs	r5, r3
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	1d7b      	adds	r3, r7, #5
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	49c8      	ldr	r1, [pc, #800]	; (8003de8 <main+0x180c>)
 8003ac8:	48c8      	ldr	r0, [pc, #800]	; (8003dec <main+0x1810>)
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	9200      	str	r2, [sp, #0]
 8003ace:	002b      	movs	r3, r5
 8003ad0:	0022      	movs	r2, r4
 8003ad2:	f004 ffe3 	bl	8008a9c <siprintf>
	    	        	//sprintf(timestamp, "timestamp");
  	    	        	ssd1306_WriteString(timestamp, Font_11x18, White);
 8003ad6:	4ac6      	ldr	r2, [pc, #792]	; (8003df0 <main+0x1814>)
 8003ad8:	48c4      	ldr	r0, [pc, #784]	; (8003dec <main+0x1810>)
 8003ada:	2301      	movs	r3, #1
 8003adc:	6811      	ldr	r1, [r2, #0]
 8003ade:	6852      	ldr	r2, [r2, #4]
 8003ae0:	f001 f922 	bl	8004d28 <ssd1306_WriteString>
  	    	        	ssd1306_SetCursor(0,22);
 8003ae4:	2116      	movs	r1, #22
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f001 f948 	bl	8004d7c <ssd1306_SetCursor>
	    	        	sprintf(message, ">>>>> %02dm", (int)depth);
 8003aec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003aee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003af0:	f7fe f9bc 	bl	8001e6c <__aeabi_d2iz>
 8003af4:	0002      	movs	r2, r0
 8003af6:	49bf      	ldr	r1, [pc, #764]	; (8003df4 <main+0x1818>)
 8003af8:	4bbf      	ldr	r3, [pc, #764]	; (8003df8 <main+0x181c>)
 8003afa:	0018      	movs	r0, r3
 8003afc:	f004 ffce 	bl	8008a9c <siprintf>
  	    	        	ssd1306_WriteString(message, Font_11x18, White);
 8003b00:	4abb      	ldr	r2, [pc, #748]	; (8003df0 <main+0x1814>)
 8003b02:	48bd      	ldr	r0, [pc, #756]	; (8003df8 <main+0x181c>)
 8003b04:	2301      	movs	r3, #1
 8003b06:	6811      	ldr	r1, [r2, #0]
 8003b08:	6852      	ldr	r2, [r2, #4]
 8003b0a:	f001 f90d 	bl	8004d28 <ssd1306_WriteString>
  	    	        	//ssd1306_SetCursor(0,44);
	    	        	//sprintf(message, "activated!!!");
  	    	        	//ssd1306_WriteString(message, Font_11x18, White);
  	    	        	ssd1306_UpdateScreen();   
 8003b0e:	f000 ffcb 	bl	8004aa8 <ssd1306_UpdateScreen>
	    				HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen((const char *)message), 500);
	    				*/
                                                                                                                                                                      
	    				// write depth of activation 
	    	        	//sprintf(message, "%02d", (int)depth);
	    	        	sprintf(message, "%02d.%01d", (int)depth, (int)((depth - (int)depth)*10.0));
 8003b12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b16:	f7fe f9a9 	bl	8001e6c <__aeabi_d2iz>
 8003b1a:	0005      	movs	r5, r0
 8003b1c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b20:	f7fe f9a4 	bl	8001e6c <__aeabi_d2iz>
 8003b24:	0003      	movs	r3, r0
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7fe f9d6 	bl	8001ed8 <__aeabi_i2d>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	000c      	movs	r4, r1
 8003b30:	001a      	movs	r2, r3
 8003b32:	0023      	movs	r3, r4
 8003b34:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b38:	f7fd fe50 	bl	80017dc <__aeabi_dsub>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	000c      	movs	r4, r1
 8003b40:	0018      	movs	r0, r3
 8003b42:	0021      	movs	r1, r4
 8003b44:	2200      	movs	r2, #0
 8003b46:	4bad      	ldr	r3, [pc, #692]	; (8003dfc <main+0x1820>)
 8003b48:	f7fd fbd6 	bl	80012f8 <__aeabi_dmul>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	000c      	movs	r4, r1
 8003b50:	0018      	movs	r0, r3
 8003b52:	0021      	movs	r1, r4
 8003b54:	f7fe f98a 	bl	8001e6c <__aeabi_d2iz>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	49a9      	ldr	r1, [pc, #676]	; (8003e00 <main+0x1824>)
 8003b5c:	48a6      	ldr	r0, [pc, #664]	; (8003df8 <main+0x181c>)
 8003b5e:	002a      	movs	r2, r5
 8003b60:	f004 ff9c 	bl	8008a9c <siprintf>
	    	       		sprintf(temperature_message, "%02d", (int)(actual_temperature/100.0));
 8003b64:	2200      	movs	r2, #0
 8003b66:	4ba7      	ldr	r3, [pc, #668]	; (8003e04 <main+0x1828>)
 8003b68:	6a38      	ldr	r0, [r7, #32]
 8003b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b6c:	f7fc ffba 	bl	8000ae4 <__aeabi_ddiv>
 8003b70:	0003      	movs	r3, r0
 8003b72:	000c      	movs	r4, r1
 8003b74:	0018      	movs	r0, r3
 8003b76:	0021      	movs	r1, r4
 8003b78:	f7fe f978 	bl	8001e6c <__aeabi_d2iz>
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	49a2      	ldr	r1, [pc, #648]	; (8003e08 <main+0x182c>)
 8003b80:	4ba2      	ldr	r3, [pc, #648]	; (8003e0c <main+0x1830>)
 8003b82:	0018      	movs	r0, r3
 8003b84:	f004 ff8a 	bl	8008a9c <siprintf>
	    				b0 = message[0];
 8003b88:	4b9b      	ldr	r3, [pc, #620]	; (8003df8 <main+0x181c>)
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	1cfb      	adds	r3, r7, #3
 8003b8e:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003b90:	4b9f      	ldr	r3, [pc, #636]	; (8003e10 <main+0x1834>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	2567      	movs	r5, #103	; 0x67
 8003b96:	197b      	adds	r3, r7, r5
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	b299      	uxth	r1, r3
 8003b9c:	2464      	movs	r4, #100	; 0x64
 8003b9e:	193b      	adds	r3, r7, r4
 8003ba0:	881a      	ldrh	r2, [r3, #0]
 8003ba2:	2364      	movs	r3, #100	; 0x64
 8003ba4:	9302      	str	r3, [sp, #8]
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	1cfb      	adds	r3, r7, #3
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2302      	movs	r3, #2
 8003bb0:	f002 fa80 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f001 fbe0 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	881a      	ldrh	r2, [r3, #0]
 8003bc0:	193b      	adds	r3, r7, r4
 8003bc2:	3201      	adds	r2, #1
 8003bc4:	801a      	strh	r2, [r3, #0]
	    				b0 = message[1];
 8003bc6:	4b8c      	ldr	r3, [pc, #560]	; (8003df8 <main+0x181c>)
 8003bc8:	785a      	ldrb	r2, [r3, #1]
 8003bca:	1cfb      	adds	r3, r7, #3
 8003bcc:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003bce:	4b90      	ldr	r3, [pc, #576]	; (8003e10 <main+0x1834>)
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	197b      	adds	r3, r7, r5
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b299      	uxth	r1, r3
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	881a      	ldrh	r2, [r3, #0]
 8003bdc:	2364      	movs	r3, #100	; 0x64
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	2301      	movs	r3, #1
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	1cfb      	adds	r3, r7, #3
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2302      	movs	r3, #2
 8003bea:	f002 fa63 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f001 fbc3 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003bf6:	193b      	adds	r3, r7, r4
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	193b      	adds	r3, r7, r4
 8003bfc:	3201      	adds	r2, #1
 8003bfe:	801a      	strh	r2, [r3, #0]
	    				//b0 = message[2];
	    				//HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
	    				//HAL_Delay(write_delay);
	    				//eeprom_debug_address++;
	    				b0 = message[3];
 8003c00:	4b7d      	ldr	r3, [pc, #500]	; (8003df8 <main+0x181c>)
 8003c02:	78da      	ldrb	r2, [r3, #3]
 8003c04:	1cfb      	adds	r3, r7, #3
 8003c06:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003c08:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <main+0x1834>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	197b      	adds	r3, r7, r5
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b299      	uxth	r1, r3
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	2364      	movs	r3, #100	; 0x64
 8003c18:	9302      	str	r3, [sp, #8]
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	1cfb      	adds	r3, r7, #3
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2302      	movs	r3, #2
 8003c24:	f002 fa46 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f001 fba6 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003c30:	193b      	adds	r3, r7, r4
 8003c32:	881a      	ldrh	r2, [r3, #0]
 8003c34:	193b      	adds	r3, r7, r4
 8003c36:	3201      	adds	r2, #1
 8003c38:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[0];
 8003c3a:	4b74      	ldr	r3, [pc, #464]	; (8003e0c <main+0x1830>)
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	1cfb      	adds	r3, r7, #3
 8003c40:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003c42:	4b73      	ldr	r3, [pc, #460]	; (8003e10 <main+0x1834>)
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	197b      	adds	r3, r7, r5
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b299      	uxth	r1, r3
 8003c4c:	193b      	adds	r3, r7, r4
 8003c4e:	881a      	ldrh	r2, [r3, #0]
 8003c50:	2364      	movs	r3, #100	; 0x64
 8003c52:	9302      	str	r3, [sp, #8]
 8003c54:	2301      	movs	r3, #1
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	1cfb      	adds	r3, r7, #3
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	f002 fa29 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f001 fb89 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	3201      	adds	r2, #1
 8003c72:	801a      	strh	r2, [r3, #0]
	    				b0 = temperature_message[1];
 8003c74:	4b65      	ldr	r3, [pc, #404]	; (8003e0c <main+0x1830>)
 8003c76:	785a      	ldrb	r2, [r3, #1]
 8003c78:	1cfb      	adds	r3, r7, #3
 8003c7a:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003c7c:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <main+0x1834>)
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	197b      	adds	r3, r7, r5
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b299      	uxth	r1, r3
 8003c86:	193b      	adds	r3, r7, r4
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	2364      	movs	r3, #100	; 0x64
 8003c8c:	9302      	str	r3, [sp, #8]
 8003c8e:	2301      	movs	r3, #1
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	1cfb      	adds	r3, r7, #3
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	2302      	movs	r3, #2
 8003c98:	f002 fa0c 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f001 fb6c 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003ca4:	193b      	adds	r3, r7, r4
 8003ca6:	881a      	ldrh	r2, [r3, #0]
 8003ca8:	193b      	adds	r3, r7, r4
 8003caa:	3201      	adds	r2, #1
 8003cac:	801a      	strh	r2, [r3, #0]
	    				b0 = '$';
 8003cae:	1cfb      	adds	r3, r7, #3
 8003cb0:	2224      	movs	r2, #36	; 0x24
 8003cb2:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003cb4:	4b56      	ldr	r3, [pc, #344]	; (8003e10 <main+0x1834>)
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	197b      	adds	r3, r7, r5
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b299      	uxth	r1, r3
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	2364      	movs	r3, #100	; 0x64
 8003cc4:	9302      	str	r3, [sp, #8]
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	1cfb      	adds	r3, r7, #3
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	2302      	movs	r3, #2
 8003cd0:	f002 f9f0 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f001 fb50 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003cdc:	193b      	adds	r3, r7, r4
 8003cde:	881a      	ldrh	r2, [r3, #0]
 8003ce0:	193b      	adds	r3, r7, r4
 8003ce2:	3201      	adds	r2, #1
 8003ce4:	801a      	strh	r2, [r3, #0]
	    				b0 = '$';
 8003ce6:	1cfb      	adds	r3, r7, #3
 8003ce8:	2224      	movs	r2, #36	; 0x24
 8003cea:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003cec:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <main+0x1834>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	197b      	adds	r3, r7, r5
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	b299      	uxth	r1, r3
 8003cf6:	193b      	adds	r3, r7, r4
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	2364      	movs	r3, #100	; 0x64
 8003cfc:	9302      	str	r3, [sp, #8]
 8003cfe:	2301      	movs	r3, #1
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	1cfb      	adds	r3, r7, #3
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2302      	movs	r3, #2
 8003d08:	f002 f9d4 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f001 fb34 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003d14:	193b      	adds	r3, r7, r4
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	193b      	adds	r3, r7, r4
 8003d1a:	3201      	adds	r2, #1
 8003d1c:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 8003d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d20:	3301      	adds	r3, #1
 8003d22:	663b      	str	r3, [r7, #96]	; 0x60
	    				b0 = '$';
 8003d24:	1cfb      	adds	r3, r7, #3
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003d2a:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <main+0x1834>)
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	197b      	adds	r3, r7, r5
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	b299      	uxth	r1, r3
 8003d34:	193b      	adds	r3, r7, r4
 8003d36:	881a      	ldrh	r2, [r3, #0]
 8003d38:	2364      	movs	r3, #100	; 0x64
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	1cfb      	adds	r3, r7, #3
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	2302      	movs	r3, #2
 8003d46:	f002 f9b5 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f001 fb15 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003d52:	193b      	adds	r3, r7, r4
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	3201      	adds	r2, #1
 8003d5a:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 8003d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d5e:	3301      	adds	r3, #1
 8003d60:	663b      	str	r3, [r7, #96]	; 0x60
	    				b0 = '$';
 8003d62:	1cfb      	adds	r3, r7, #3
 8003d64:	2224      	movs	r2, #36	; 0x24
 8003d66:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003d68:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <main+0x1834>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	197b      	adds	r3, r7, r5
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b299      	uxth	r1, r3
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	881a      	ldrh	r2, [r3, #0]
 8003d76:	2364      	movs	r3, #100	; 0x64
 8003d78:	9302      	str	r3, [sp, #8]
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	1cfb      	adds	r3, r7, #3
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2302      	movs	r3, #2
 8003d84:	f002 f996 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f001 faf6 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003d90:	193b      	adds	r3, r7, r4
 8003d92:	881a      	ldrh	r2, [r3, #0]
 8003d94:	193b      	adds	r3, r7, r4
 8003d96:	3201      	adds	r2, #1
 8003d98:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 8003d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	663b      	str	r3, [r7, #96]	; 0x60
	    				b0 = '$';
 8003da0:	1cfb      	adds	r3, r7, #3
 8003da2:	2224      	movs	r2, #36	; 0x24
 8003da4:	701a      	strb	r2, [r3, #0]
	    				HAL_I2C_Mem_Write(at24c32_i2c_handle, at24c32_shifted_address, eeprom_debug_address, I2C_MEMADD_SIZE_16BIT, &b0, 1, 100);
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <main+0x1834>)
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	197b      	adds	r3, r7, r5
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b299      	uxth	r1, r3
 8003db0:	193b      	adds	r3, r7, r4
 8003db2:	881a      	ldrh	r2, [r3, #0]
 8003db4:	2364      	movs	r3, #100	; 0x64
 8003db6:	9302      	str	r3, [sp, #8]
 8003db8:	2301      	movs	r3, #1
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	1cfb      	adds	r3, r7, #3
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	f002 f977 	bl	80060b4 <HAL_I2C_Mem_Write>
	    				HAL_Delay(write_delay);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f001 fad7 	bl	800537c <HAL_Delay>
	    				eeprom_debug_address++;
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	881a      	ldrh	r2, [r3, #0]
 8003dd2:	193b      	adds	r3, r7, r4
 8003dd4:	3201      	adds	r2, #1
 8003dd6:	801a      	strh	r2, [r3, #0]
	    				eeprom_number_of_records++;
 8003dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dda:	3301      	adds	r3, #1
 8003ddc:	663b      	str	r3, [r7, #96]	; 0x60
	    	if(one_second_timer_get_flag())
 8003dde:	f7ff f905 	bl	8002fec <main+0xa10>
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	50000400 	.word	0x50000400
 8003de8:	08009364 	.word	0x08009364
 8003dec:	20000104 	.word	0x20000104
 8003df0:	20000010 	.word	0x20000010
 8003df4:	080093d4 	.word	0x080093d4
 8003df8:	200000c4 	.word	0x200000c4
 8003dfc:	40240000 	.word	0x40240000
 8003e00:	080093c0 	.word	0x080093c0
 8003e04:	40590000 	.word	0x40590000
 8003e08:	080093cc 	.word	0x080093cc
 8003e0c:	20000144 	.word	0x20000144
 8003e10:	2000001c 	.word	0x2000001c

08003e14 <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b09b      	sub	sp, #108	; 0x6c
 8003e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e1a:	2434      	movs	r4, #52	; 0x34
 8003e1c:	193b      	adds	r3, r7, r4
 8003e1e:	0018      	movs	r0, r3
 8003e20:	2334      	movs	r3, #52	; 0x34
 8003e22:	001a      	movs	r2, r3
 8003e24:	2100      	movs	r1, #0
 8003e26:	f004 fe31 	bl	8008a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	0018      	movs	r0, r3
 8003e30:	2314      	movs	r3, #20
 8003e32:	001a      	movs	r2, r3
 8003e34:	2100      	movs	r1, #0
 8003e36:	f004 fe29 	bl	8008a8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	231c      	movs	r3, #28
 8003e40:	001a      	movs	r2, r3
 8003e42:	2100      	movs	r1, #0
 8003e44:	f004 fe22 	bl	8008a8c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e48:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <SystemClock_Config+0xe4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a2b      	ldr	r2, [pc, #172]	; (8003efc <SystemClock_Config+0xe8>)
 8003e4e:	401a      	ands	r2, r3
 8003e50:	4b29      	ldr	r3, [pc, #164]	; (8003ef8 <SystemClock_Config+0xe4>)
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	0109      	lsls	r1, r1, #4
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e5a:	0021      	movs	r1, r4
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	2202      	movs	r2, #2
 8003e60:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2201      	movs	r2, #1
 8003e66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2210      	movs	r2, #16
 8003e6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2202      	movs	r2, #2
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	2200      	movs	r2, #0
 8003e78:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2280      	movs	r2, #128	; 0x80
 8003e7e:	02d2      	lsls	r2, r2, #11
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	2280      	movs	r2, #128	; 0x80
 8003e86:	03d2      	lsls	r2, r2, #15
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f002 fe49 	bl	8006b24 <HAL_RCC_OscConfig>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d001      	beq.n	8003e9a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003e96:	f000 f833 	bl	8003f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e9a:	2120      	movs	r1, #32
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	220f      	movs	r2, #15
 8003ea0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f003 f998 	bl	80071f4 <HAL_RCC_ClockConfig>
 8003ec4:	1e03      	subs	r3, r0, #0
 8003ec6:	d001      	beq.n	8003ecc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003ec8:	f000 f81a 	bl	8003f00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	2209      	movs	r2, #9
 8003ed0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ed2:	1d3b      	adds	r3, r7, #4
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003ed8:	1d3b      	adds	r3, r7, #4
 8003eda:	2200      	movs	r2, #0
 8003edc:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f003 fb6b 	bl	80075bc <HAL_RCCEx_PeriphCLKConfig>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d001      	beq.n	8003eee <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003eea:	f000 f809 	bl	8003f00 <Error_Handler>
  }
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b01b      	add	sp, #108	; 0x6c
 8003ef4:	bd90      	pop	{r4, r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	40007000 	.word	0x40007000
 8003efc:	ffffe7ff 	.word	0xffffe7ff

08003f00 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <one_second_timer_init>:
#include "one_second_timer_interface.h"
#include "main.h"


void one_second_timer_init()
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	af00      	add	r7, sp, #0

	one_second_timer_reset_flag();
 8003f0e:	f000 f81b 	bl	8003f48 <one_second_timer_reset_flag>

    MX_TIM2_Init();
 8003f12:	f001 f805 	bl	8004f20 <MX_TIM2_Init>
	
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <one_second_timer_start>:
void one_second_timer_start()
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <one_second_timer_start+0x14>)
 8003f22:	0018      	movs	r0, r3
 8003f24:	f003 fd16 	bl	8007954 <HAL_TIM_Base_Start_IT>
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	20000760 	.word	0x20000760

08003f34 <one_second_timer_set_flag>:
}



void one_second_timer_set_flag()
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
	one_second_timer_flag = 1;
 8003f38:	4b02      	ldr	r3, [pc, #8]	; (8003f44 <one_second_timer_set_flag+0x10>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000184 	.word	0x20000184

08003f48 <one_second_timer_reset_flag>:
void one_second_timer_reset_flag()
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
	one_second_timer_flag = 0;
 8003f4c:	4b02      	ldr	r3, [pc, #8]	; (8003f58 <one_second_timer_reset_flag+0x10>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000184 	.word	0x20000184

08003f5c <one_second_timer_get_flag>:
int one_second_timer_get_flag()
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
	return one_second_timer_flag;
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <one_second_timer_get_flag+0x10>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	20000184 	.word	0x20000184

08003f70 <one_second_timer_increment_counter>:


void one_second_timer_increment_counter()
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
	seconds_counter++;
 8003f74:	4b03      	ldr	r3, [pc, #12]	; (8003f84 <one_second_timer_increment_counter+0x14>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	4b02      	ldr	r3, [pc, #8]	; (8003f84 <one_second_timer_increment_counter+0x14>)
 8003f7c:	601a      	str	r2, [r3, #0]
}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000188 	.word	0x20000188

08003f88 <write_byte>:
#include "pressure_sensor_object.h"

//****************************************************************************
uint8_t write_byte(uint8_t data)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	0002      	movs	r2, r0
 8003f90:	1dfb      	adds	r3, r7, #7
 8003f92:	701a      	strb	r2, [r3, #0]

	uint8_t data_out;
    uint8_t read_data;

	// wait for spi transmitter readiness
	while ((SPI1->SR & SPI_SR_TXE) == RESET );
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <write_byte+0x4c>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d0fa      	beq.n	8003f96 <write_byte+0xe>
	data_out = data;
 8003fa0:	210f      	movs	r1, #15
 8003fa2:	187b      	adds	r3, r7, r1
 8003fa4:	1dfa      	adds	r2, r7, #7
 8003fa6:	7812      	ldrb	r2, [r2, #0]
 8003fa8:	701a      	strb	r2, [r3, #0]
    SPI1->DR = data_out;
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <write_byte+0x4c>)
 8003fac:	187a      	adds	r2, r7, r1
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	60da      	str	r2, [r3, #12]
    // wait while a transmission complete
	while ((SPI1->SR & SPI_SR_RXNE) == RESET );
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <write_byte+0x4c>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d0fa      	beq.n	8003fb4 <write_byte+0x2c>
    read_data = SPI1->DR;
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <write_byte+0x4c>)
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	210e      	movs	r1, #14
 8003fc4:	187b      	adds	r3, r7, r1
 8003fc6:	701a      	strb	r2, [r3, #0]
	
	return read_data;
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	781b      	ldrb	r3, [r3, #0]

	
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40013000 	.word	0x40013000

08003fd8 <pressure_sensor_object_init>:

//****************************************************************************
void pressure_sensor_object_init()
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0

	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	//                 RESET
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	// reset spi1 cs pin
    spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset
 8003fde:	23a0      	movs	r3, #160	; 0xa0
 8003fe0:	05db      	lsls	r3, r3, #23
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	0352      	lsls	r2, r2, #13
 8003fe6:	619a      	str	r2, [r3, #24]
	// transmit 0x1e                             	
	write_byte( 0x1e);                         	
 8003fe8:	201e      	movs	r0, #30
 8003fea:	f7ff ffcd 	bl	8003f88 <write_byte>
	// set spi1 cs pin                           	
    spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set
 8003fee:	23a0      	movs	r3, #160	; 0xa0
 8003ff0:	05db      	lsls	r3, r3, #23
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	619a      	str	r2, [r3, #24]
	HAL_Delay(3);
 8003ff6:	2003      	movs	r0, #3
 8003ff8:	f001 f9c0 	bl	800537c <HAL_Delay>
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


	for(i=1; i<7; i++)
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	607b      	str	r3, [r7, #4]
 8004000:	e037      	b.n	8004072 <pressure_sensor_object_init+0x9a>
	{
		//send read prom command
		// reset spi1 cs pin
    	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset
 8004002:	23a0      	movs	r3, #160	; 0xa0
 8004004:	05db      	lsls	r3, r3, #23
 8004006:	2280      	movs	r2, #128	; 0x80
 8004008:	0352      	lsls	r2, r2, #13
 800400a:	619a      	str	r2, [r3, #24]
		// transmit command with address 
		write_byte( 0xa0 + (((uint8_t)i)<<1));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	18db      	adds	r3, r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3b60      	subs	r3, #96	; 0x60
 8004016:	b2db      	uxtb	r3, r3
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff ffb5 	bl	8003f88 <write_byte>

		// read ms byte
		sensor_prom[i] = write_byte(0x55);
 800401e:	2055      	movs	r0, #85	; 0x55
 8004020:	f7ff ffb2 	bl	8003f88 <write_byte>
 8004024:	0003      	movs	r3, r0
 8004026:	b299      	uxth	r1, r3
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <pressure_sensor_object_init+0xa8>)
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	0052      	lsls	r2, r2, #1
 800402e:	52d1      	strh	r1, [r2, r3]
		sensor_prom[i] <<= 8;
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <pressure_sensor_object_init+0xa8>)
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	0052      	lsls	r2, r2, #1
 8004036:	5ad3      	ldrh	r3, [r2, r3]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	b299      	uxth	r1, r3
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <pressure_sensor_object_init+0xa8>)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	0052      	lsls	r2, r2, #1
 8004042:	52d1      	strh	r1, [r2, r3]
		// read ls byte
		sensor_prom[i] += write_byte(0x55);
 8004044:	2055      	movs	r0, #85	; 0x55
 8004046:	f7ff ff9f 	bl	8003f88 <write_byte>
 800404a:	0003      	movs	r3, r0
 800404c:	0019      	movs	r1, r3
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <pressure_sensor_object_init+0xa8>)
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	0052      	lsls	r2, r2, #1
 8004054:	5ad2      	ldrh	r2, [r2, r3]
 8004056:	b28b      	uxth	r3, r1
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	b299      	uxth	r1, r3
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <pressure_sensor_object_init+0xa8>)
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	0052      	lsls	r2, r2, #1
 8004062:	52d1      	strh	r1, [r2, r3]

		// set spi1 cs pin
    	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set
 8004064:	23a0      	movs	r3, #160	; 0xa0
 8004066:	05db      	lsls	r3, r3, #23
 8004068:	2210      	movs	r2, #16
 800406a:	619a      	str	r2, [r3, #24]
	for(i=1; i<7; i++)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3301      	adds	r3, #1
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b06      	cmp	r3, #6
 8004076:	ddc4      	ble.n	8004002 <pressure_sensor_object_init+0x2a>
	}
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200001c0 	.word	0x200001c0

08004084 <pressure_sensor_measure_pressure_temperature>:



void pressure_sensor_measure_pressure_temperature()
{	
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	b08d      	sub	sp, #52	; 0x34
 8004088:	af00      	add	r7, sp, #0
	uint32_t aux_p = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int i;
	                                                                                        	
	for(i=0; i<PRESSURE_OVERSAMPLING; i++)                                                  	
 800408e:	2300      	movs	r3, #0
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
 8004092:	e047      	b.n	8004124 <pressure_sensor_measure_pressure_temperature+0xa0>
    {
	                                                                                        	
		//send start conversion D1 OSR 1024 command                                         	
        // reset spi1 cs pin                                                                	
		spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset	
 8004094:	23a0      	movs	r3, #160	; 0xa0
 8004096:	05db      	lsls	r3, r3, #23
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	0352      	lsls	r2, r2, #13
 800409c:	619a      	str	r2, [r3, #24]
	    // transmit command                                                                 	
	    write_byte(0x44);                                                                   	
 800409e:	2044      	movs	r0, #68	; 0x44
 80040a0:	f7ff ff72 	bl	8003f88 <write_byte>
        // set spi1 cs pin                                                                  	
		spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set       	
 80040a4:	23a0      	movs	r3, #160	; 0xa0
 80040a6:	05db      	lsls	r3, r3, #23
 80040a8:	2210      	movs	r2, #16
 80040aa:	619a      	str	r2, [r3, #24]
	    // pause 3 mS                                                                       	
        HAL_Delay(3);                                                                           
 80040ac:	2003      	movs	r0, #3
 80040ae:	f001 f965 	bl	800537c <HAL_Delay>
	                                                                                        	
	    //send read adc command                                                             	
        // reset spi1 cs pin                                                                	
		spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset	
 80040b2:	23a0      	movs	r3, #160	; 0xa0
 80040b4:	05db      	lsls	r3, r3, #23
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	0352      	lsls	r2, r2, #13
 80040ba:	619a      	str	r2, [r3, #24]
	    // transmit command                                                                 	
        write_byte(0x00);                                                                       
 80040bc:	2000      	movs	r0, #0
 80040be:	f7ff ff63 	bl	8003f88 <write_byte>
	                                                                                        	
	    // read ms byte                                                                     	
	    pressure = write_byte(0x55);                                                        	
 80040c2:	2055      	movs	r0, #85	; 0x55
 80040c4:	f7ff ff60 	bl	8003f88 <write_byte>
 80040c8:	0003      	movs	r3, r0
 80040ca:	001a      	movs	r2, r3
 80040cc:	4b93      	ldr	r3, [pc, #588]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 80040ce:	601a      	str	r2, [r3, #0]
	    pressure <<= 8;                                                                     	
 80040d0:	4b92      	ldr	r3, [pc, #584]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	021a      	lsls	r2, r3, #8
 80040d6:	4b91      	ldr	r3, [pc, #580]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 80040d8:	601a      	str	r2, [r3, #0]
	    // read ls byte                                                                     	
	    pressure += write_byte(0x55);                                                       	
 80040da:	2055      	movs	r0, #85	; 0x55
 80040dc:	f7ff ff54 	bl	8003f88 <write_byte>
 80040e0:	0003      	movs	r3, r0
 80040e2:	001a      	movs	r2, r3
 80040e4:	4b8d      	ldr	r3, [pc, #564]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	18d2      	adds	r2, r2, r3
 80040ea:	4b8c      	ldr	r3, [pc, #560]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 80040ec:	601a      	str	r2, [r3, #0]
	    pressure <<= 8;                                                                     	
 80040ee:	4b8b      	ldr	r3, [pc, #556]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	4b89      	ldr	r3, [pc, #548]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 80040f6:	601a      	str	r2, [r3, #0]
	    // read ls byte                                                                     	
	    pressure += write_byte(0x55);                                                       	
 80040f8:	2055      	movs	r0, #85	; 0x55
 80040fa:	f7ff ff45 	bl	8003f88 <write_byte>
 80040fe:	0003      	movs	r3, r0
 8004100:	001a      	movs	r2, r3
 8004102:	4b86      	ldr	r3, [pc, #536]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	18d2      	adds	r2, r2, r3
 8004108:	4b84      	ldr	r3, [pc, #528]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 800410a:	601a      	str	r2, [r3, #0]
        // set spi1 cs pin                                                                  	
    	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set
 800410c:	23a0      	movs	r3, #160	; 0xa0
 800410e:	05db      	lsls	r3, r3, #23
 8004110:	2210      	movs	r2, #16
 8004112:	619a      	str	r2, [r3, #24]
	                                                                                        	
    	aux_p += pressure;
 8004114:	4b81      	ldr	r3, [pc, #516]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800411a:	18d3      	adds	r3, r2, r3
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(i=0; i<PRESSURE_OVERSAMPLING; i++)                                                  	
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	3301      	adds	r3, #1
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b63      	cmp	r3, #99	; 0x63
 8004128:	ddb4      	ble.n	8004094 <pressure_sensor_measure_pressure_temperature+0x10>
	                                                                                        	
    }
	                                                                                        	
    pressure = aux_p/PRESSURE_OVERSAMPLING;
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	2164      	movs	r1, #100	; 0x64
 800412e:	0018      	movs	r0, r3
 8004130:	f7fb fff2 	bl	8000118 <__udivsi3>
 8004134:	0003      	movs	r3, r0
 8004136:	001a      	movs	r2, r3
 8004138:	4b78      	ldr	r3, [pc, #480]	; (800431c <pressure_sensor_measure_pressure_temperature+0x298>)
 800413a:	601a      	str	r2, [r3, #0]
	                                                                                        	
	//----------------------------------------------------                                  	
	                                                                                        	
	//send start conversion D2 OSR 1024 command                                             	
    // reset spi1 cs pin                                                                    	
	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset 	
 800413c:	23a0      	movs	r3, #160	; 0xa0
 800413e:	05db      	lsls	r3, r3, #23
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	0352      	lsls	r2, r2, #13
 8004144:	619a      	str	r2, [r3, #24]
	// transmit command                                                                     	
	write_byte(0x54);                                                                       	
 8004146:	2054      	movs	r0, #84	; 0x54
 8004148:	f7ff ff1e 	bl	8003f88 <write_byte>
    // set spi1 cs pin                                                                      	
	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set           	
 800414c:	23a0      	movs	r3, #160	; 0xa0
 800414e:	05db      	lsls	r3, r3, #23
 8004150:	2210      	movs	r2, #16
 8004152:	619a      	str	r2, [r3, #24]
	// pause 3 mS                                                                           	
    HAL_Delay(3);
 8004154:	2003      	movs	r0, #3
 8004156:	f001 f911 	bl	800537c <HAL_Delay>
	                                                                                        	
	//send read adc command                                                                 	
    // reset spi1 cs pin                                                                    	
	spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)(spi1_cs_pressure_Pin << 16); 	// reset 	
 800415a:	23a0      	movs	r3, #160	; 0xa0
 800415c:	05db      	lsls	r3, r3, #23
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	0352      	lsls	r2, r2, #13
 8004162:	619a      	str	r2, [r3, #24]
	// transmit command                                                                     	
    write_byte(0x00);
 8004164:	2000      	movs	r0, #0
 8004166:	f7ff ff0f 	bl	8003f88 <write_byte>
	                                                                                        	
	// read ms byte                                                                         	
	temperature = write_byte(0x55);                                                         	
 800416a:	2055      	movs	r0, #85	; 0x55
 800416c:	f7ff ff0c 	bl	8003f88 <write_byte>
 8004170:	0003      	movs	r3, r0
 8004172:	001a      	movs	r2, r3
 8004174:	4b6a      	ldr	r3, [pc, #424]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 8004176:	601a      	str	r2, [r3, #0]
	temperature <<= 8;                                                                      	
 8004178:	4b69      	ldr	r3, [pc, #420]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	021a      	lsls	r2, r3, #8
 800417e:	4b68      	ldr	r3, [pc, #416]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 8004180:	601a      	str	r2, [r3, #0]
	// read ls byte                                                                         	
	temperature += write_byte(0x55);                                                        	
 8004182:	2055      	movs	r0, #85	; 0x55
 8004184:	f7ff ff00 	bl	8003f88 <write_byte>
 8004188:	0003      	movs	r3, r0
 800418a:	001a      	movs	r2, r3
 800418c:	4b64      	ldr	r3, [pc, #400]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	18d2      	adds	r2, r2, r3
 8004192:	4b63      	ldr	r3, [pc, #396]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 8004194:	601a      	str	r2, [r3, #0]
	temperature <<= 8;                                                                      	
 8004196:	4b62      	ldr	r3, [pc, #392]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	021a      	lsls	r2, r3, #8
 800419c:	4b60      	ldr	r3, [pc, #384]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 800419e:	601a      	str	r2, [r3, #0]
	// read ls byte                                                                         	
	temperature += write_byte(0x55);                                                        	
 80041a0:	2055      	movs	r0, #85	; 0x55
 80041a2:	f7ff fef1 	bl	8003f88 <write_byte>
 80041a6:	0003      	movs	r3, r0
 80041a8:	001a      	movs	r2, r3
 80041aa:	4b5d      	ldr	r3, [pc, #372]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	18d2      	adds	r2, r2, r3
 80041b0:	4b5b      	ldr	r3, [pc, #364]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 80041b2:	601a      	str	r2, [r3, #0]
    // set spi1 cs pin                                                                      	
    spi1_cs_pressure_GPIO_Port->BSRR = (uint32_t)spi1_cs_pressure_Pin ;	// set
 80041b4:	23a0      	movs	r3, #160	; 0xa0
 80041b6:	05db      	lsls	r3, r3, #23
 80041b8:	2210      	movs	r2, #16
 80041ba:	619a      	str	r2, [r3, #24]
	                                                                                        	
    //---------------------------------------------------
	                                                                                        	
	dT = (double)temperature - (double)sensor_prom[5]*DEG_2_8;                              	
 80041bc:	4b58      	ldr	r3, [pc, #352]	; (8004320 <pressure_sensor_measure_pressure_temperature+0x29c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fd fec3 	bl	8001f4c <__aeabi_ui2d>
 80041c6:	0004      	movs	r4, r0
 80041c8:	000d      	movs	r5, r1
 80041ca:	4b56      	ldr	r3, [pc, #344]	; (8004324 <pressure_sensor_measure_pressure_temperature+0x2a0>)
 80041cc:	895b      	ldrh	r3, [r3, #10]
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7fd febc 	bl	8001f4c <__aeabi_ui2d>
 80041d4:	2200      	movs	r2, #0
 80041d6:	4b54      	ldr	r3, [pc, #336]	; (8004328 <pressure_sensor_measure_pressure_temperature+0x2a4>)
 80041d8:	f7fd f88e 	bl	80012f8 <__aeabi_dmul>
 80041dc:	0002      	movs	r2, r0
 80041de:	000b      	movs	r3, r1
 80041e0:	0020      	movs	r0, r4
 80041e2:	0029      	movs	r1, r5
 80041e4:	f7fd fafa 	bl	80017dc <__aeabi_dsub>
 80041e8:	0003      	movs	r3, r0
 80041ea:	000c      	movs	r4, r1
 80041ec:	4a4f      	ldr	r2, [pc, #316]	; (800432c <pressure_sensor_measure_pressure_temperature+0x2a8>)
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	6054      	str	r4, [r2, #4]
    actual_temperature = 2000 + (dT*((double)sensor_prom[6]))/DEG_2_23;
 80041f2:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <pressure_sensor_measure_pressure_temperature+0x2a0>)
 80041f4:	899b      	ldrh	r3, [r3, #12]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7fd fea8 	bl	8001f4c <__aeabi_ui2d>
 80041fc:	4b4b      	ldr	r3, [pc, #300]	; (800432c <pressure_sensor_measure_pressure_temperature+0x2a8>)
 80041fe:	685c      	ldr	r4, [r3, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	001a      	movs	r2, r3
 8004204:	0023      	movs	r3, r4
 8004206:	f7fd f877 	bl	80012f8 <__aeabi_dmul>
 800420a:	0003      	movs	r3, r0
 800420c:	000c      	movs	r4, r1
 800420e:	0018      	movs	r0, r3
 8004210:	0021      	movs	r1, r4
 8004212:	2200      	movs	r2, #0
 8004214:	4b46      	ldr	r3, [pc, #280]	; (8004330 <pressure_sensor_measure_pressure_temperature+0x2ac>)
 8004216:	f7fc fc65 	bl	8000ae4 <__aeabi_ddiv>
 800421a:	0003      	movs	r3, r0
 800421c:	000c      	movs	r4, r1
 800421e:	0018      	movs	r0, r3
 8004220:	0021      	movs	r1, r4
 8004222:	2200      	movs	r2, #0
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <pressure_sensor_measure_pressure_temperature+0x2b0>)
 8004226:	f7fc f941 	bl	80004ac <__aeabi_dadd>
 800422a:	0003      	movs	r3, r0
 800422c:	000c      	movs	r4, r1
 800422e:	4a42      	ldr	r2, [pc, #264]	; (8004338 <pressure_sensor_measure_pressure_temperature+0x2b4>)
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	6054      	str	r4, [r2, #4]
	                                                                                        	
	OFF = ((double)sensor_prom[2])*DEG_2_18 + (((double)sensor_prom[4])*dT)/DEG_2_5;        	
 8004234:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <pressure_sensor_measure_pressure_temperature+0x2a0>)
 8004236:	889b      	ldrh	r3, [r3, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f7fd fe87 	bl	8001f4c <__aeabi_ui2d>
 800423e:	2200      	movs	r2, #0
 8004240:	4b3e      	ldr	r3, [pc, #248]	; (800433c <pressure_sensor_measure_pressure_temperature+0x2b8>)
 8004242:	f7fd f859 	bl	80012f8 <__aeabi_dmul>
 8004246:	0003      	movs	r3, r0
 8004248:	000c      	movs	r4, r1
 800424a:	001d      	movs	r5, r3
 800424c:	0026      	movs	r6, r4
 800424e:	4b35      	ldr	r3, [pc, #212]	; (8004324 <pressure_sensor_measure_pressure_temperature+0x2a0>)
 8004250:	891b      	ldrh	r3, [r3, #8]
 8004252:	0018      	movs	r0, r3
 8004254:	f7fd fe7a 	bl	8001f4c <__aeabi_ui2d>
 8004258:	4b34      	ldr	r3, [pc, #208]	; (800432c <pressure_sensor_measure_pressure_temperature+0x2a8>)
 800425a:	685c      	ldr	r4, [r3, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	001a      	movs	r2, r3
 8004260:	0023      	movs	r3, r4
 8004262:	f7fd f849 	bl	80012f8 <__aeabi_dmul>
 8004266:	0003      	movs	r3, r0
 8004268:	000c      	movs	r4, r1
 800426a:	0018      	movs	r0, r3
 800426c:	0021      	movs	r1, r4
 800426e:	2200      	movs	r2, #0
 8004270:	4b33      	ldr	r3, [pc, #204]	; (8004340 <pressure_sensor_measure_pressure_temperature+0x2bc>)
 8004272:	f7fc fc37 	bl	8000ae4 <__aeabi_ddiv>
 8004276:	0003      	movs	r3, r0
 8004278:	000c      	movs	r4, r1
 800427a:	001a      	movs	r2, r3
 800427c:	0023      	movs	r3, r4
 800427e:	0028      	movs	r0, r5
 8004280:	0031      	movs	r1, r6
 8004282:	f7fc f913 	bl	80004ac <__aeabi_dadd>
 8004286:	0003      	movs	r3, r0
 8004288:	000c      	movs	r4, r1
 800428a:	4a2e      	ldr	r2, [pc, #184]	; (8004344 <pressure_sensor_measure_pressure_temperature+0x2c0>)
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	6054      	str	r4, [r2, #4]
    SENS = ((double)sensor_prom[1])*DEG_2_17 + (((double)sensor_prom[3])*dT)/DEG_2_7;
 8004290:	4b24      	ldr	r3, [pc, #144]	; (8004324 <pressure_sensor_measure_pressure_temperature+0x2a0>)
 8004292:	885b      	ldrh	r3, [r3, #2]
 8004294:	0018      	movs	r0, r3
 8004296:	f7fd fe59 	bl	8001f4c <__aeabi_ui2d>
 800429a:	2200      	movs	r2, #0
 800429c:	2382      	movs	r3, #130	; 0x82
 800429e:	05db      	lsls	r3, r3, #23
 80042a0:	f7fd f82a 	bl	80012f8 <__aeabi_dmul>
 80042a4:	0003      	movs	r3, r0
 80042a6:	000c      	movs	r4, r1
 80042a8:	001d      	movs	r5, r3
 80042aa:	0026      	movs	r6, r4
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <pressure_sensor_measure_pressure_temperature+0x2a0>)
 80042ae:	88db      	ldrh	r3, [r3, #6]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7fd fe4b 	bl	8001f4c <__aeabi_ui2d>
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <pressure_sensor_measure_pressure_temperature+0x2a8>)
 80042b8:	685c      	ldr	r4, [r3, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	001a      	movs	r2, r3
 80042be:	0023      	movs	r3, r4
 80042c0:	f7fd f81a 	bl	80012f8 <__aeabi_dmul>
 80042c4:	0003      	movs	r3, r0
 80042c6:	000c      	movs	r4, r1
 80042c8:	0018      	movs	r0, r3
 80042ca:	0021      	movs	r1, r4
 80042cc:	2200      	movs	r2, #0
 80042ce:	4b1e      	ldr	r3, [pc, #120]	; (8004348 <pressure_sensor_measure_pressure_temperature+0x2c4>)
 80042d0:	f7fc fc08 	bl	8000ae4 <__aeabi_ddiv>
 80042d4:	0003      	movs	r3, r0
 80042d6:	000c      	movs	r4, r1
 80042d8:	001a      	movs	r2, r3
 80042da:	0023      	movs	r3, r4
 80042dc:	0028      	movs	r0, r5
 80042de:	0031      	movs	r1, r6
 80042e0:	f7fc f8e4 	bl	80004ac <__aeabi_dadd>
 80042e4:	0003      	movs	r3, r0
 80042e6:	000c      	movs	r4, r1
 80042e8:	4a18      	ldr	r2, [pc, #96]	; (800434c <pressure_sensor_measure_pressure_temperature+0x2c8>)
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	6054      	str	r4, [r2, #4]
	double T2;                                                                              	
	double SENS2;                                                                           	
    double OFF2;
                                                                                            
	                                                                                        	
	if(actual_temperature >= 2000)                                                          	
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <pressure_sensor_measure_pressure_temperature+0x2b4>)
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <pressure_sensor_measure_pressure_temperature+0x2b0>)
 80042f8:	f7fb ffce 	bl	8000298 <__aeabi_dcmpge>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d027      	beq.n	8004350 <pressure_sensor_measure_pressure_temperature+0x2cc>
	{                                                                                       	
		T2 = 0;                                                                             	
 8004300:	2300      	movs	r3, #0
 8004302:	2400      	movs	r4, #0
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	627c      	str	r4, [r7, #36]	; 0x24
		SENS2 = 0;                                                                          	
 8004308:	2300      	movs	r3, #0
 800430a:	2400      	movs	r4, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	61fc      	str	r4, [r7, #28]
		OFF2 = 0;                                                                           	
 8004310:	2300      	movs	r3, #0
 8004312:	2400      	movs	r4, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	617c      	str	r4, [r7, #20]
 8004318:	e0a6      	b.n	8004468 <pressure_sensor_measure_pressure_temperature+0x3e4>
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	2000018c 	.word	0x2000018c
 8004320:	20000190 	.word	0x20000190
 8004324:	200001c0 	.word	0x200001c0
 8004328:	40700000 	.word	0x40700000
 800432c:	20000198 	.word	0x20000198
 8004330:	41600000 	.word	0x41600000
 8004334:	409f4000 	.word	0x409f4000
 8004338:	200001a0 	.word	0x200001a0
 800433c:	41100000 	.word	0x41100000
 8004340:	40400000 	.word	0x40400000
 8004344:	200001a8 	.word	0x200001a8
 8004348:	40600000 	.word	0x40600000
 800434c:	200001b0 	.word	0x200001b0
	}                                                                                       	
	else                                                                                    	
	{                                                                                       	
		T2 = 3.0 * dT * dT / DEG_2_33;                                                      	
 8004350:	4b6f      	ldr	r3, [pc, #444]	; (8004510 <pressure_sensor_measure_pressure_temperature+0x48c>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	4b6e      	ldr	r3, [pc, #440]	; (8004514 <pressure_sensor_measure_pressure_temperature+0x490>)
 800435a:	f7fc ffcd 	bl	80012f8 <__aeabi_dmul>
 800435e:	0003      	movs	r3, r0
 8004360:	000c      	movs	r4, r1
 8004362:	0018      	movs	r0, r3
 8004364:	0021      	movs	r1, r4
 8004366:	4b6a      	ldr	r3, [pc, #424]	; (8004510 <pressure_sensor_measure_pressure_temperature+0x48c>)
 8004368:	685c      	ldr	r4, [r3, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	001a      	movs	r2, r3
 800436e:	0023      	movs	r3, r4
 8004370:	f7fc ffc2 	bl	80012f8 <__aeabi_dmul>
 8004374:	0003      	movs	r3, r0
 8004376:	000c      	movs	r4, r1
 8004378:	0018      	movs	r0, r3
 800437a:	0021      	movs	r1, r4
 800437c:	2200      	movs	r2, #0
 800437e:	2384      	movs	r3, #132	; 0x84
 8004380:	05db      	lsls	r3, r3, #23
 8004382:	f7fc fbaf 	bl	8000ae4 <__aeabi_ddiv>
 8004386:	0003      	movs	r3, r0
 8004388:	000c      	movs	r4, r1
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	627c      	str	r4, [r7, #36]	; 0x24
		double aux_dt = (actual_temperature - 2000);                                        	
 800438e:	4b62      	ldr	r3, [pc, #392]	; (8004518 <pressure_sensor_measure_pressure_temperature+0x494>)
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	4b61      	ldr	r3, [pc, #388]	; (800451c <pressure_sensor_measure_pressure_temperature+0x498>)
 8004398:	f7fd fa20 	bl	80017dc <__aeabi_dsub>
 800439c:	0003      	movs	r3, r0
 800439e:	000c      	movs	r4, r1
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	60fc      	str	r4, [r7, #12]
		OFF2 = 3.0 * aux_dt * aux_dt / 8.0;                                                 	
 80043a4:	2200      	movs	r2, #0
 80043a6:	4b5b      	ldr	r3, [pc, #364]	; (8004514 <pressure_sensor_measure_pressure_temperature+0x490>)
 80043a8:	68b8      	ldr	r0, [r7, #8]
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	f7fc ffa4 	bl	80012f8 <__aeabi_dmul>
 80043b0:	0003      	movs	r3, r0
 80043b2:	000c      	movs	r4, r1
 80043b4:	0018      	movs	r0, r3
 80043b6:	0021      	movs	r1, r4
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f7fc ff9c 	bl	80012f8 <__aeabi_dmul>
 80043c0:	0003      	movs	r3, r0
 80043c2:	000c      	movs	r4, r1
 80043c4:	0018      	movs	r0, r3
 80043c6:	0021      	movs	r1, r4
 80043c8:	2200      	movs	r2, #0
 80043ca:	4b55      	ldr	r3, [pc, #340]	; (8004520 <pressure_sensor_measure_pressure_temperature+0x49c>)
 80043cc:	f7fc fb8a 	bl	8000ae4 <__aeabi_ddiv>
 80043d0:	0003      	movs	r3, r0
 80043d2:	000c      	movs	r4, r1
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	617c      	str	r4, [r7, #20]
    	SENS2 = 7.0 * aux_dt * aux_dt / 8.0;
 80043d8:	2200      	movs	r2, #0
 80043da:	4b52      	ldr	r3, [pc, #328]	; (8004524 <pressure_sensor_measure_pressure_temperature+0x4a0>)
 80043dc:	68b8      	ldr	r0, [r7, #8]
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	f7fc ff8a 	bl	80012f8 <__aeabi_dmul>
 80043e4:	0003      	movs	r3, r0
 80043e6:	000c      	movs	r4, r1
 80043e8:	0018      	movs	r0, r3
 80043ea:	0021      	movs	r1, r4
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f7fc ff82 	bl	80012f8 <__aeabi_dmul>
 80043f4:	0003      	movs	r3, r0
 80043f6:	000c      	movs	r4, r1
 80043f8:	0018      	movs	r0, r3
 80043fa:	0021      	movs	r1, r4
 80043fc:	2200      	movs	r2, #0
 80043fe:	4b48      	ldr	r3, [pc, #288]	; (8004520 <pressure_sensor_measure_pressure_temperature+0x49c>)
 8004400:	f7fc fb70 	bl	8000ae4 <__aeabi_ddiv>
 8004404:	0003      	movs	r3, r0
 8004406:	000c      	movs	r4, r1
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	61fc      	str	r4, [r7, #28]
	                                                                                        	
		if(actual_temperature < -1500)                                                      	
 800440c:	4b42      	ldr	r3, [pc, #264]	; (8004518 <pressure_sensor_measure_pressure_temperature+0x494>)
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	4b44      	ldr	r3, [pc, #272]	; (8004528 <pressure_sensor_measure_pressure_temperature+0x4a4>)
 8004416:	f7fb ff21 	bl	800025c <__aeabi_dcmplt>
 800441a:	1e03      	subs	r3, r0, #0
 800441c:	d024      	beq.n	8004468 <pressure_sensor_measure_pressure_temperature+0x3e4>
		{                                                                                   	
			double aux_dt = actual_temperature + 1500;                                      	
 800441e:	4b3e      	ldr	r3, [pc, #248]	; (8004518 <pressure_sensor_measure_pressure_temperature+0x494>)
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	4b41      	ldr	r3, [pc, #260]	; (800452c <pressure_sensor_measure_pressure_temperature+0x4a8>)
 8004428:	f7fc f840 	bl	80004ac <__aeabi_dadd>
 800442c:	0003      	movs	r3, r0
 800442e:	000c      	movs	r4, r1
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	607c      	str	r4, [r7, #4]
			SENS2 = SENS2 + 3.0 * aux_dt * aux_dt;                                          	
 8004434:	2200      	movs	r2, #0
 8004436:	4b37      	ldr	r3, [pc, #220]	; (8004514 <pressure_sensor_measure_pressure_temperature+0x490>)
 8004438:	6838      	ldr	r0, [r7, #0]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	f7fc ff5c 	bl	80012f8 <__aeabi_dmul>
 8004440:	0003      	movs	r3, r0
 8004442:	000c      	movs	r4, r1
 8004444:	0018      	movs	r0, r3
 8004446:	0021      	movs	r1, r4
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f7fc ff54 	bl	80012f8 <__aeabi_dmul>
 8004450:	0003      	movs	r3, r0
 8004452:	000c      	movs	r4, r1
 8004454:	001a      	movs	r2, r3
 8004456:	0023      	movs	r3, r4
 8004458:	69b8      	ldr	r0, [r7, #24]
 800445a:	69f9      	ldr	r1, [r7, #28]
 800445c:	f7fc f826 	bl	80004ac <__aeabi_dadd>
 8004460:	0003      	movs	r3, r0
 8004462:	000c      	movs	r4, r1
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	61fc      	str	r4, [r7, #28]
		}                                                                                   	
    }
	                                                                                        	
	actual_temperature = actual_temperature - T2;                                           	
 8004468:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <pressure_sensor_measure_pressure_temperature+0x494>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	6859      	ldr	r1, [r3, #4]
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f7fd f9b3 	bl	80017dc <__aeabi_dsub>
 8004476:	0003      	movs	r3, r0
 8004478:	000c      	movs	r4, r1
 800447a:	4a27      	ldr	r2, [pc, #156]	; (8004518 <pressure_sensor_measure_pressure_temperature+0x494>)
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	6054      	str	r4, [r2, #4]
	                                                                                        	
	OFF = OFF - OFF2;                                                                       	
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <pressure_sensor_measure_pressure_temperature+0x4ac>)
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f7fd f9a7 	bl	80017dc <__aeabi_dsub>
 800448e:	0003      	movs	r3, r0
 8004490:	000c      	movs	r4, r1
 8004492:	4a27      	ldr	r2, [pc, #156]	; (8004530 <pressure_sensor_measure_pressure_temperature+0x4ac>)
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	6054      	str	r4, [r2, #4]
    SENS = SENS - SENS2;
 8004498:	4b26      	ldr	r3, [pc, #152]	; (8004534 <pressure_sensor_measure_pressure_temperature+0x4b0>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f7fd f99b 	bl	80017dc <__aeabi_dsub>
 80044a6:	0003      	movs	r3, r0
 80044a8:	000c      	movs	r4, r1
 80044aa:	4a22      	ldr	r2, [pc, #136]	; (8004534 <pressure_sensor_measure_pressure_temperature+0x4b0>)
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	6054      	str	r4, [r2, #4]
	                                                                                        	
	P = (((double)pressure*SENS)/DEG_2_21 - OFF)/DEG_2_15;                                  
 80044b0:	4b21      	ldr	r3, [pc, #132]	; (8004538 <pressure_sensor_measure_pressure_temperature+0x4b4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7fd fd49 	bl	8001f4c <__aeabi_ui2d>
 80044ba:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <pressure_sensor_measure_pressure_temperature+0x4b0>)
 80044bc:	685c      	ldr	r4, [r3, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	001a      	movs	r2, r3
 80044c2:	0023      	movs	r3, r4
 80044c4:	f7fc ff18 	bl	80012f8 <__aeabi_dmul>
 80044c8:	0003      	movs	r3, r0
 80044ca:	000c      	movs	r4, r1
 80044cc:	0018      	movs	r0, r3
 80044ce:	0021      	movs	r1, r4
 80044d0:	2200      	movs	r2, #0
 80044d2:	4b1a      	ldr	r3, [pc, #104]	; (800453c <pressure_sensor_measure_pressure_temperature+0x4b8>)
 80044d4:	f7fc fb06 	bl	8000ae4 <__aeabi_ddiv>
 80044d8:	0003      	movs	r3, r0
 80044da:	000c      	movs	r4, r1
 80044dc:	0018      	movs	r0, r3
 80044de:	0021      	movs	r1, r4
 80044e0:	4b13      	ldr	r3, [pc, #76]	; (8004530 <pressure_sensor_measure_pressure_temperature+0x4ac>)
 80044e2:	685c      	ldr	r4, [r3, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	001a      	movs	r2, r3
 80044e8:	0023      	movs	r3, r4
 80044ea:	f7fd f977 	bl	80017dc <__aeabi_dsub>
 80044ee:	0003      	movs	r3, r0
 80044f0:	000c      	movs	r4, r1
 80044f2:	0018      	movs	r0, r3
 80044f4:	0021      	movs	r1, r4
 80044f6:	2200      	movs	r2, #0
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <pressure_sensor_measure_pressure_temperature+0x4bc>)
 80044fa:	f7fc faf3 	bl	8000ae4 <__aeabi_ddiv>
 80044fe:	0003      	movs	r3, r0
 8004500:	000c      	movs	r4, r1
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <pressure_sensor_measure_pressure_temperature+0x4c0>)
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	6054      	str	r4, [r2, #4]


}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	b00d      	add	sp, #52	; 0x34
 800450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004510:	20000198 	.word	0x20000198
 8004514:	40080000 	.word	0x40080000
 8004518:	200001a0 	.word	0x200001a0
 800451c:	409f4000 	.word	0x409f4000
 8004520:	40200000 	.word	0x40200000
 8004524:	401c0000 	.word	0x401c0000
 8004528:	c0977000 	.word	0xc0977000
 800452c:	40977000 	.word	0x40977000
 8004530:	200001a8 	.word	0x200001a8
 8004534:	200001b0 	.word	0x200001b0
 8004538:	2000018c 	.word	0x2000018c
 800453c:	41400000 	.word	0x41400000
 8004540:	40e00000 	.word	0x40e00000
 8004544:	200001b8 	.word	0x200001b8

08004548 <pressure_sensor_get_pressure>:




double pressure_sensor_get_pressure()
{
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	af00      	add	r7, sp, #0
	return P;
 800454c:	4b03      	ldr	r3, [pc, #12]	; (800455c <pressure_sensor_get_pressure+0x14>)
 800454e:	685c      	ldr	r4, [r3, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
}
 8004552:	0018      	movs	r0, r3
 8004554:	0021      	movs	r1, r4
 8004556:	46bd      	mov	sp, r7
 8004558:	bd90      	pop	{r4, r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	200001b8 	.word	0x200001b8

08004560 <pressure_sensor_get_temperature>:

double pressure_sensor_get_temperature()
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	af00      	add	r7, sp, #0
	return actual_temperature;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <pressure_sensor_get_temperature+0x14>)
 8004566:	685c      	ldr	r4, [r3, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
}
 800456a:	0018      	movs	r0, r3
 800456c:	0021      	movs	r1, r4
 800456e:	46bd      	mov	sp, r7
 8004570:	bd90      	pop	{r4, r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	200001a0 	.word	0x200001a0

08004578 <rtc_ds3231_get_date>:
#include "rtc_ds3231_interface.h"



void rtc_ds3231_get_date(uint8_t *Date, uint8_t *Month, uint8_t *Year)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
	*Date = date;
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <rtc_ds3231_get_date+0x2c>)
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	701a      	strb	r2, [r3, #0]
	*Month = month;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <rtc_ds3231_get_date+0x30>)
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	701a      	strb	r2, [r3, #0]
	*Year = year;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <rtc_ds3231_get_date+0x34>)
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	701a      	strb	r2, [r3, #0]
}
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	b004      	add	sp, #16
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	200001de 	.word	0x200001de
 80045a8:	200001dd 	.word	0x200001dd
 80045ac:	200001dc 	.word	0x200001dc

080045b0 <rtc_ds3231_get_time>:
void rtc_ds3231_get_time(uint8_t *Hours, uint8_t *Minutes, uint8_t *Seconds)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
	*Hours = hours;
 80045bc:	4b07      	ldr	r3, [pc, #28]	; (80045dc <rtc_ds3231_get_time+0x2c>)
 80045be:	781a      	ldrb	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	701a      	strb	r2, [r3, #0]
	*Minutes = minutes;
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <rtc_ds3231_get_time+0x30>)
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	701a      	strb	r2, [r3, #0]
	*Seconds = seconds;
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <rtc_ds3231_get_time+0x34>)
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	701a      	strb	r2, [r3, #0]
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	200001df 	.word	0x200001df
 80045e0:	200001e0 	.word	0x200001e0
 80045e4:	200001e1 	.word	0x200001e1

080045e8 <rtc_ds3231_set_i2c_handle>:
	HAL_I2C_Mem_Write(ds3231_i2c_handle, ds3231_shifted_address, 0x1, 1, &(ds3231_buffer[1]), data_array_length, 500);
	HAL_I2C_Mem_Write(ds3231_i2c_handle, ds3231_shifted_address, 0x2, 1, &(ds3231_buffer[2]), data_array_length, 500);
}

void rtc_ds3231_set_i2c_handle(I2C_HandleTypeDef *handle)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	ds3231_i2c_handle = handle;
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <rtc_ds3231_set_i2c_handle+0x18>)
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b002      	add	sp, #8
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	200001d8 	.word	0x200001d8

08004604 <rtc_ds3231_action>:


void rtc_ds3231_action()
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af04      	add	r7, sp, #16

	uint16_t data_array_length = 1;
 800460a:	1dbb      	adds	r3, r7, #6
 800460c:	2201      	movs	r2, #1
 800460e:	801a      	strh	r2, [r3, #0]

	uint8_t i2c_status;

	//i2c_status = HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x0, 1, ds3231_buffer, data_array_length, 500);
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x0, 1, &(ds3231_buffer[0]), data_array_length, 500);
 8004610:	4b72      	ldr	r3, [pc, #456]	; (80047dc <rtc_ds3231_action+0x1d8>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	4b72      	ldr	r3, [pc, #456]	; (80047e0 <rtc_ds3231_action+0x1dc>)
 8004616:	8819      	ldrh	r1, [r3, #0]
 8004618:	23fa      	movs	r3, #250	; 0xfa
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	9302      	str	r3, [sp, #8]
 800461e:	1dbb      	adds	r3, r7, #6
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	4b6f      	ldr	r3, [pc, #444]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2301      	movs	r3, #1
 800462a:	2200      	movs	r2, #0
 800462c:	f001 fe70 	bl	8006310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x1, 1, &(ds3231_buffer[1]), data_array_length, 500);
 8004630:	4b6a      	ldr	r3, [pc, #424]	; (80047dc <rtc_ds3231_action+0x1d8>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <rtc_ds3231_action+0x1dc>)
 8004636:	8819      	ldrh	r1, [r3, #0]
 8004638:	23fa      	movs	r3, #250	; 0xfa
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	9302      	str	r3, [sp, #8]
 800463e:	1dbb      	adds	r3, r7, #6
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	4b68      	ldr	r3, [pc, #416]	; (80047e8 <rtc_ds3231_action+0x1e4>)
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2301      	movs	r3, #1
 800464a:	2201      	movs	r2, #1
 800464c:	f001 fe60 	bl	8006310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x2, 1, &(ds3231_buffer[2]), data_array_length, 500);
 8004650:	4b62      	ldr	r3, [pc, #392]	; (80047dc <rtc_ds3231_action+0x1d8>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	4b62      	ldr	r3, [pc, #392]	; (80047e0 <rtc_ds3231_action+0x1dc>)
 8004656:	8819      	ldrh	r1, [r3, #0]
 8004658:	23fa      	movs	r3, #250	; 0xfa
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	9302      	str	r3, [sp, #8]
 800465e:	1dbb      	adds	r3, r7, #6
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	4b61      	ldr	r3, [pc, #388]	; (80047ec <rtc_ds3231_action+0x1e8>)
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2301      	movs	r3, #1
 800466a:	2202      	movs	r2, #2
 800466c:	f001 fe50 	bl	8006310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x3, 1, &(ds3231_buffer[3]), data_array_length, 500);
 8004670:	4b5a      	ldr	r3, [pc, #360]	; (80047dc <rtc_ds3231_action+0x1d8>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	4b5a      	ldr	r3, [pc, #360]	; (80047e0 <rtc_ds3231_action+0x1dc>)
 8004676:	8819      	ldrh	r1, [r3, #0]
 8004678:	23fa      	movs	r3, #250	; 0xfa
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	9302      	str	r3, [sp, #8]
 800467e:	1dbb      	adds	r3, r7, #6
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	4b5a      	ldr	r3, [pc, #360]	; (80047f0 <rtc_ds3231_action+0x1ec>)
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	2301      	movs	r3, #1
 800468a:	2203      	movs	r2, #3
 800468c:	f001 fe40 	bl	8006310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x4, 1, &(ds3231_buffer[4]), data_array_length, 500);
 8004690:	4b52      	ldr	r3, [pc, #328]	; (80047dc <rtc_ds3231_action+0x1d8>)
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	4b52      	ldr	r3, [pc, #328]	; (80047e0 <rtc_ds3231_action+0x1dc>)
 8004696:	8819      	ldrh	r1, [r3, #0]
 8004698:	23fa      	movs	r3, #250	; 0xfa
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	1dbb      	adds	r3, r7, #6
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	4b53      	ldr	r3, [pc, #332]	; (80047f4 <rtc_ds3231_action+0x1f0>)
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2301      	movs	r3, #1
 80046aa:	2204      	movs	r2, #4
 80046ac:	f001 fe30 	bl	8006310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x5, 1, &(ds3231_buffer[5]), data_array_length, 500);
 80046b0:	4b4a      	ldr	r3, [pc, #296]	; (80047dc <rtc_ds3231_action+0x1d8>)
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <rtc_ds3231_action+0x1dc>)
 80046b6:	8819      	ldrh	r1, [r3, #0]
 80046b8:	23fa      	movs	r3, #250	; 0xfa
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	9302      	str	r3, [sp, #8]
 80046be:	1dbb      	adds	r3, r7, #6
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <rtc_ds3231_action+0x1f4>)
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2301      	movs	r3, #1
 80046ca:	2205      	movs	r2, #5
 80046cc:	f001 fe20 	bl	8006310 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(ds3231_i2c_handle, ds3231_shifted_address, 0x6, 1, &(ds3231_buffer[6]), data_array_length, 500);
 80046d0:	4b42      	ldr	r3, [pc, #264]	; (80047dc <rtc_ds3231_action+0x1d8>)
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	4b42      	ldr	r3, [pc, #264]	; (80047e0 <rtc_ds3231_action+0x1dc>)
 80046d6:	8819      	ldrh	r1, [r3, #0]
 80046d8:	23fa      	movs	r3, #250	; 0xfa
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	9302      	str	r3, [sp, #8]
 80046de:	1dbb      	adds	r3, r7, #6
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	4b45      	ldr	r3, [pc, #276]	; (80047fc <rtc_ds3231_action+0x1f8>)
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	2301      	movs	r3, #1
 80046ea:	2206      	movs	r2, #6
 80046ec:	f001 fe10 	bl	8006310 <HAL_I2C_Mem_Read>
	
	seconds = 10*(ds3231_buffer[0]>>4) + (ds3231_buffer[0] & 0x0f);
 80046f0:	4b3c      	ldr	r3, [pc, #240]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	1c1a      	adds	r2, r3, #0
 80046fa:	0092      	lsls	r2, r2, #2
 80046fc:	18d3      	adds	r3, r2, r3
 80046fe:	18db      	adds	r3, r3, r3
 8004700:	b2da      	uxtb	r2, r3
 8004702:	4b38      	ldr	r3, [pc, #224]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	210f      	movs	r1, #15
 8004708:	400b      	ands	r3, r1
 800470a:	b2db      	uxtb	r3, r3
 800470c:	18d3      	adds	r3, r2, r3
 800470e:	b2da      	uxtb	r2, r3
 8004710:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <rtc_ds3231_action+0x1fc>)
 8004712:	701a      	strb	r2, [r3, #0]
	minutes = 10*(ds3231_buffer[1]>>4) + (ds3231_buffer[1] & 0x0f);
 8004714:	4b33      	ldr	r3, [pc, #204]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	b2db      	uxtb	r3, r3
 800471c:	1c1a      	adds	r2, r3, #0
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	18d3      	adds	r3, r2, r3
 8004722:	18db      	adds	r3, r3, r3
 8004724:	b2da      	uxtb	r2, r3
 8004726:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	210f      	movs	r1, #15
 800472c:	400b      	ands	r3, r1
 800472e:	b2db      	uxtb	r3, r3
 8004730:	18d3      	adds	r3, r2, r3
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b33      	ldr	r3, [pc, #204]	; (8004804 <rtc_ds3231_action+0x200>)
 8004736:	701a      	strb	r2, [r3, #0]
	hours = 10*((ds3231_buffer[2]>>4) & 0x03) + (ds3231_buffer[2] & 0x0f);
 8004738:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 800473a:	789b      	ldrb	r3, [r3, #2]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2203      	movs	r2, #3
 8004742:	4013      	ands	r3, r2
 8004744:	b2db      	uxtb	r3, r3
 8004746:	1c1a      	adds	r2, r3, #0
 8004748:	0092      	lsls	r2, r2, #2
 800474a:	18d3      	adds	r3, r2, r3
 800474c:	18db      	adds	r3, r3, r3
 800474e:	b2da      	uxtb	r2, r3
 8004750:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 8004752:	789b      	ldrb	r3, [r3, #2]
 8004754:	210f      	movs	r1, #15
 8004756:	400b      	ands	r3, r1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	18d3      	adds	r3, r2, r3
 800475c:	b2da      	uxtb	r2, r3
 800475e:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <rtc_ds3231_action+0x204>)
 8004760:	701a      	strb	r2, [r3, #0]
	date = 10*(ds3231_buffer[4]>>4) + (ds3231_buffer[4] & 0x0f);
 8004762:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 8004764:	791b      	ldrb	r3, [r3, #4]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	b2db      	uxtb	r3, r3
 800476a:	1c1a      	adds	r2, r3, #0
 800476c:	0092      	lsls	r2, r2, #2
 800476e:	18d3      	adds	r3, r2, r3
 8004770:	18db      	adds	r3, r3, r3
 8004772:	b2da      	uxtb	r2, r3
 8004774:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 8004776:	791b      	ldrb	r3, [r3, #4]
 8004778:	210f      	movs	r1, #15
 800477a:	400b      	ands	r3, r1
 800477c:	b2db      	uxtb	r3, r3
 800477e:	18d3      	adds	r3, r2, r3
 8004780:	b2da      	uxtb	r2, r3
 8004782:	4b22      	ldr	r3, [pc, #136]	; (800480c <rtc_ds3231_action+0x208>)
 8004784:	701a      	strb	r2, [r3, #0]
	month = 10*((ds3231_buffer[5]>>4) & 0x03) + (ds3231_buffer[5] & 0x0f);
 8004786:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 8004788:	795b      	ldrb	r3, [r3, #5]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2203      	movs	r2, #3
 8004790:	4013      	ands	r3, r2
 8004792:	b2db      	uxtb	r3, r3
 8004794:	1c1a      	adds	r2, r3, #0
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	18d3      	adds	r3, r2, r3
 800479a:	18db      	adds	r3, r3, r3
 800479c:	b2da      	uxtb	r2, r3
 800479e:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 80047a0:	795b      	ldrb	r3, [r3, #5]
 80047a2:	210f      	movs	r1, #15
 80047a4:	400b      	ands	r3, r1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	18d3      	adds	r3, r2, r3
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	4b18      	ldr	r3, [pc, #96]	; (8004810 <rtc_ds3231_action+0x20c>)
 80047ae:	701a      	strb	r2, [r3, #0]
	year = 10*(ds3231_buffer[6]>>4) + (ds3231_buffer[6] & 0x0f);
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 80047b2:	799b      	ldrb	r3, [r3, #6]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	1c1a      	adds	r2, r3, #0
 80047ba:	0092      	lsls	r2, r2, #2
 80047bc:	18d3      	adds	r3, r2, r3
 80047be:	18db      	adds	r3, r3, r3
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <rtc_ds3231_action+0x1e0>)
 80047c4:	799b      	ldrb	r3, [r3, #6]
 80047c6:	210f      	movs	r1, #15
 80047c8:	400b      	ands	r3, r1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	18d3      	adds	r3, r2, r3
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	4b10      	ldr	r3, [pc, #64]	; (8004814 <rtc_ds3231_action+0x210>)
 80047d2:	701a      	strb	r2, [r3, #0]
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b002      	add	sp, #8
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	200001d8 	.word	0x200001d8
 80047e0:	20000020 	.word	0x20000020
 80047e4:	200001d0 	.word	0x200001d0
 80047e8:	200001d1 	.word	0x200001d1
 80047ec:	200001d2 	.word	0x200001d2
 80047f0:	200001d3 	.word	0x200001d3
 80047f4:	200001d4 	.word	0x200001d4
 80047f8:	200001d5 	.word	0x200001d5
 80047fc:	200001d6 	.word	0x200001d6
 8004800:	200001e1 	.word	0x200001e1
 8004804:	200001e0 	.word	0x200001e0
 8004808:	200001df 	.word	0x200001df
 800480c:	200001de 	.word	0x200001de
 8004810:	200001dd 	.word	0x200001dd
 8004814:	200001dc 	.word	0x200001dc

08004818 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <MX_SPI1_Init+0x68>)
 800481e:	4a19      	ldr	r2, [pc, #100]	; (8004884 <MX_SPI1_Init+0x6c>)
 8004820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <MX_SPI1_Init+0x68>)
 8004824:	2282      	movs	r2, #130	; 0x82
 8004826:	0052      	lsls	r2, r2, #1
 8004828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800482a:	4b15      	ldr	r3, [pc, #84]	; (8004880 <MX_SPI1_Init+0x68>)
 800482c:	2200      	movs	r2, #0
 800482e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <MX_SPI1_Init+0x68>)
 8004832:	2200      	movs	r2, #0
 8004834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <MX_SPI1_Init+0x68>)
 8004838:	2200      	movs	r2, #0
 800483a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800483c:	4b10      	ldr	r3, [pc, #64]	; (8004880 <MX_SPI1_Init+0x68>)
 800483e:	2200      	movs	r2, #0
 8004840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004842:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <MX_SPI1_Init+0x68>)
 8004844:	2280      	movs	r2, #128	; 0x80
 8004846:	02d2      	lsls	r2, r2, #11
 8004848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <MX_SPI1_Init+0x68>)
 800484c:	2200      	movs	r2, #0
 800484e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <MX_SPI1_Init+0x68>)
 8004852:	2200      	movs	r2, #0
 8004854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <MX_SPI1_Init+0x68>)
 8004858:	2200      	movs	r2, #0
 800485a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <MX_SPI1_Init+0x68>)
 800485e:	2200      	movs	r2, #0
 8004860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <MX_SPI1_Init+0x68>)
 8004864:	2207      	movs	r2, #7
 8004866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <MX_SPI1_Init+0x68>)
 800486a:	0018      	movs	r0, r3
 800486c:	f002 ffdc 	bl	8007828 <HAL_SPI_Init>
 8004870:	1e03      	subs	r3, r0, #0
 8004872:	d001      	beq.n	8004878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004874:	f7ff fb44 	bl	8003f00 <Error_Handler>
  }

}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	20000708 	.word	0x20000708
 8004884:	40013000 	.word	0x40013000

08004888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004890:	230c      	movs	r3, #12
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	0018      	movs	r0, r3
 8004896:	2314      	movs	r3, #20
 8004898:	001a      	movs	r2, r3
 800489a:	2100      	movs	r1, #0
 800489c:	f004 f8f6 	bl	8008a8c <memset>
  if(spiHandle->Instance==SPI1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a18      	ldr	r2, [pc, #96]	; (8004908 <HAL_SPI_MspInit+0x80>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d129      	bne.n	80048fe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048aa:	4b18      	ldr	r3, [pc, #96]	; (800490c <HAL_SPI_MspInit+0x84>)
 80048ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <HAL_SPI_MspInit+0x84>)
 80048b0:	2180      	movs	r1, #128	; 0x80
 80048b2:	0149      	lsls	r1, r1, #5
 80048b4:	430a      	orrs	r2, r1
 80048b6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b8:	4b14      	ldr	r3, [pc, #80]	; (800490c <HAL_SPI_MspInit+0x84>)
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	4b13      	ldr	r3, [pc, #76]	; (800490c <HAL_SPI_MspInit+0x84>)
 80048be:	2101      	movs	r1, #1
 80048c0:	430a      	orrs	r2, r1
 80048c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80048c4:	4b11      	ldr	r3, [pc, #68]	; (800490c <HAL_SPI_MspInit+0x84>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	2201      	movs	r2, #1
 80048ca:	4013      	ands	r3, r2
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80048d0:	210c      	movs	r1, #12
 80048d2:	187b      	adds	r3, r7, r1
 80048d4:	22f0      	movs	r2, #240	; 0xf0
 80048d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d8:	187b      	adds	r3, r7, r1
 80048da:	2202      	movs	r2, #2
 80048dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048de:	187b      	adds	r3, r7, r1
 80048e0:	2200      	movs	r2, #0
 80048e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	2203      	movs	r2, #3
 80048e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80048ea:	187b      	adds	r3, r7, r1
 80048ec:	2200      	movs	r2, #0
 80048ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f0:	187a      	adds	r2, r7, r1
 80048f2:	23a0      	movs	r3, #160	; 0xa0
 80048f4:	05db      	lsls	r3, r3, #23
 80048f6:	0011      	movs	r1, r2
 80048f8:	0018      	movs	r0, r3
 80048fa:	f001 f9b1 	bl	8005c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	46bd      	mov	sp, r7
 8004902:	b008      	add	sp, #32
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	40013000 	.word	0x40013000
 800490c:	40021000 	.word	0x40021000

08004910 <ssd1306_set_i2c_port>:

// Screen object
static SSD1306_t SSD1306;

void ssd1306_set_i2c_port(I2C_HandleTypeDef *port, int display_number)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
	SSD1306_I2C_PORT = port;
 800491a:	4b08      	ldr	r3, [pc, #32]	; (800493c <ssd1306_set_i2c_port+0x2c>)
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]

	if(display_number == 1)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d103      	bne.n	800492e <ssd1306_set_i2c_port+0x1e>
		SSD1306_Buffer = SSD1306_Buffer1;
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <ssd1306_set_i2c_port+0x30>)
 8004928:	4a06      	ldr	r2, [pc, #24]	; (8004944 <ssd1306_set_i2c_port+0x34>)
 800492a:	601a      	str	r2, [r3, #0]
	else
		SSD1306_Buffer = SSD1306_Buffer2;
}
 800492c:	e002      	b.n	8004934 <ssd1306_set_i2c_port+0x24>
		SSD1306_Buffer = SSD1306_Buffer2;
 800492e:	4b04      	ldr	r3, [pc, #16]	; (8004940 <ssd1306_set_i2c_port+0x30>)
 8004930:	4a05      	ldr	r2, [pc, #20]	; (8004948 <ssd1306_set_i2c_port+0x38>)
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	b002      	add	sp, #8
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000704 	.word	0x20000704
 8004940:	200001e4 	.word	0x200001e4
 8004944:	200001e8 	.word	0x200001e8
 8004948:	200005e8 	.word	0x200005e8

0800494c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af04      	add	r7, sp, #16
 8004952:	0002      	movs	r2, r0
 8004954:	1dfb      	adds	r3, r7, #7
 8004956:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8004958:	4b08      	ldr	r3, [pc, #32]	; (800497c <ssd1306_WriteCommand+0x30>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	230a      	movs	r3, #10
 800495e:	9302      	str	r3, [sp, #8]
 8004960:	2301      	movs	r3, #1
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	1dfb      	adds	r3, r7, #7
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2301      	movs	r3, #1
 800496a:	2200      	movs	r2, #0
 800496c:	2178      	movs	r1, #120	; 0x78
 800496e:	f001 fba1 	bl	80060b4 <HAL_I2C_Mem_Write>
}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	b002      	add	sp, #8
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	20000704 	.word	0x20000704

08004980 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8004984:	2064      	movs	r0, #100	; 0x64
 8004986:	f000 fcf9 	bl	800537c <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800498a:	20ae      	movs	r0, #174	; 0xae
 800498c:	f7ff ffde 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8004990:	2020      	movs	r0, #32
 8004992:	f7ff ffdb 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004996:	2010      	movs	r0, #16
 8004998:	f7ff ffd8 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800499c:	20b0      	movs	r0, #176	; 0xb0
 800499e:	f7ff ffd5 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80049a2:	20c8      	movs	r0, #200	; 0xc8
 80049a4:	f7ff ffd2 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80049a8:	2000      	movs	r0, #0
 80049aa:	f7ff ffcf 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80049ae:	2010      	movs	r0, #16
 80049b0:	f7ff ffcc 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80049b4:	2040      	movs	r0, #64	; 0x40
 80049b6:	f7ff ffc9 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80049ba:	2081      	movs	r0, #129	; 0x81
 80049bc:	f7ff ffc6 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80049c0:	20ff      	movs	r0, #255	; 0xff
 80049c2:	f7ff ffc3 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80049c6:	20a1      	movs	r0, #161	; 0xa1
 80049c8:	f7ff ffc0 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80049cc:	20a6      	movs	r0, #166	; 0xa6
 80049ce:	f7ff ffbd 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80049d2:	20a8      	movs	r0, #168	; 0xa8
 80049d4:	f7ff ffba 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80049d8:	203f      	movs	r0, #63	; 0x3f
 80049da:	f7ff ffb7 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80049de:	20a4      	movs	r0, #164	; 0xa4
 80049e0:	f7ff ffb4 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80049e4:	20d3      	movs	r0, #211	; 0xd3
 80049e6:	f7ff ffb1 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80049ea:	2000      	movs	r0, #0
 80049ec:	f7ff ffae 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80049f0:	20d5      	movs	r0, #213	; 0xd5
 80049f2:	f7ff ffab 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80049f6:	20f0      	movs	r0, #240	; 0xf0
 80049f8:	f7ff ffa8 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80049fc:	20d9      	movs	r0, #217	; 0xd9
 80049fe:	f7ff ffa5 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8004a02:	2022      	movs	r0, #34	; 0x22
 8004a04:	f7ff ffa2 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8004a08:	20da      	movs	r0, #218	; 0xda
 8004a0a:	f7ff ff9f 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8004a0e:	2012      	movs	r0, #18
 8004a10:	f7ff ff9c 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8004a14:	20db      	movs	r0, #219	; 0xdb
 8004a16:	f7ff ff99 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004a1a:	2020      	movs	r0, #32
 8004a1c:	f7ff ff96 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004a20:	208d      	movs	r0, #141	; 0x8d
 8004a22:	f7ff ff93 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8004a26:	2014      	movs	r0, #20
 8004a28:	f7ff ff90 	bl	800494c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004a2c:	20af      	movs	r0, #175	; 0xaf
 8004a2e:	f7ff ff8d 	bl	800494c <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8004a32:	2000      	movs	r0, #0
 8004a34:	f000 f812 	bl	8004a5c <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8004a38:	f000 f836 	bl	8004aa8 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <ssd1306_Init+0xd8>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <ssd1306_Init+0xd8>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <ssd1306_Init+0xd8>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8004a4e:	2301      	movs	r3, #1
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	200005ec 	.word	0x200005ec

08004a5c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	0002      	movs	r2, r0
 8004a64:	1dfb      	adds	r3, r7, #7
 8004a66:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	uint32_t i;

	//for(i = 0; i < sizeof(SSD1306_Buffer); i++)
	for(i = 0; i < SIZEOF_BUFFER; i++)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e00f      	b.n	8004a8e <ssd1306_Fill+0x32>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004a6e:	1dfb      	adds	r3, r7, #7
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <ssd1306_Fill+0x1e>
 8004a76:	2100      	movs	r1, #0
 8004a78:	e000      	b.n	8004a7c <ssd1306_Fill+0x20>
 8004a7a:	21ff      	movs	r1, #255	; 0xff
 8004a7c:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <ssd1306_Fill+0x44>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	18d3      	adds	r3, r2, r3
 8004a84:	1c0a      	adds	r2, r1, #0
 8004a86:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < SIZEOF_BUFFER; i++)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <ssd1306_Fill+0x48>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d9eb      	bls.n	8004a6e <ssd1306_Fill+0x12>
	}
}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b004      	add	sp, #16
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	200001e4 	.word	0x200001e4
 8004aa4:	000003ff 	.word	0x000003ff

08004aa8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8004aae:	1dfb      	adds	r3, r7, #7
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e023      	b.n	8004afe <ssd1306_UpdateScreen+0x56>
		ssd1306_WriteCommand(0xB0 + i);
 8004ab6:	1dfb      	adds	r3, r7, #7
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	3b50      	subs	r3, #80	; 0x50
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7ff ff44 	bl	800494c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f7ff ff41 	bl	800494c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8004aca:	2010      	movs	r0, #16
 8004acc:	f7ff ff3e 	bl	800494c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <ssd1306_UpdateScreen+0x68>)
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <ssd1306_UpdateScreen+0x6c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	1dfa      	adds	r2, r7, #7
 8004ada:	7812      	ldrb	r2, [r2, #0]
 8004adc:	01d2      	lsls	r2, r2, #7
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	2264      	movs	r2, #100	; 0x64
 8004ae2:	9202      	str	r2, [sp, #8]
 8004ae4:	2280      	movs	r2, #128	; 0x80
 8004ae6:	9201      	str	r2, [sp, #4]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	2301      	movs	r3, #1
 8004aec:	2240      	movs	r2, #64	; 0x40
 8004aee:	2178      	movs	r1, #120	; 0x78
 8004af0:	f001 fae0 	bl	80060b4 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8004af4:	1dfb      	adds	r3, r7, #7
 8004af6:	781a      	ldrb	r2, [r3, #0]
 8004af8:	1dfb      	adds	r3, r7, #7
 8004afa:	3201      	adds	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	1dfb      	adds	r3, r7, #7
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b07      	cmp	r3, #7
 8004b04:	d9d7      	bls.n	8004ab6 <ssd1306_UpdateScreen+0xe>
	}
}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	b002      	add	sp, #8
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	20000704 	.word	0x20000704
 8004b14:	200001e4 	.word	0x200001e4

08004b18 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	0004      	movs	r4, r0
 8004b20:	0008      	movs	r0, r1
 8004b22:	0011      	movs	r1, r2
 8004b24:	1dfb      	adds	r3, r7, #7
 8004b26:	1c22      	adds	r2, r4, #0
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	1dbb      	adds	r3, r7, #6
 8004b2c:	1c02      	adds	r2, r0, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	1d7b      	adds	r3, r7, #5
 8004b32:	1c0a      	adds	r2, r1, #0
 8004b34:	701a      	strb	r2, [r3, #0]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8004b36:	1dfb      	adds	r3, r7, #7
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	db5a      	blt.n	8004bf6 <ssd1306_DrawPixel+0xde>
 8004b40:	1dbb      	adds	r3, r7, #6
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b3f      	cmp	r3, #63	; 0x3f
 8004b46:	d856      	bhi.n	8004bf6 <ssd1306_DrawPixel+0xde>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8004b48:	4b2d      	ldr	r3, [pc, #180]	; (8004c00 <ssd1306_DrawPixel+0xe8>)
 8004b4a:	791b      	ldrb	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <ssd1306_DrawPixel+0x46>
	{
		color = (SSD1306_COLOR)!color;
 8004b50:	1d7b      	adds	r3, r7, #5
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	425a      	negs	r2, r3
 8004b56:	4153      	adcs	r3, r2
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	1d7b      	adds	r3, r7, #5
 8004b5c:	701a      	strb	r2, [r3, #0]
	}
	
	// Draw in the right color
	if (color == White)
 8004b5e:	1d7b      	adds	r3, r7, #5
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d122      	bne.n	8004bac <ssd1306_DrawPixel+0x94>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <ssd1306_DrawPixel+0xec>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	1dfa      	adds	r2, r7, #7
 8004b6c:	7811      	ldrb	r1, [r2, #0]
 8004b6e:	1dba      	adds	r2, r7, #6
 8004b70:	7812      	ldrb	r2, [r2, #0]
 8004b72:	08d2      	lsrs	r2, r2, #3
 8004b74:	b2d0      	uxtb	r0, r2
 8004b76:	0002      	movs	r2, r0
 8004b78:	01d2      	lsls	r2, r2, #7
 8004b7a:	188a      	adds	r2, r1, r2
 8004b7c:	189b      	adds	r3, r3, r2
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b25a      	sxtb	r2, r3
 8004b82:	1dbb      	adds	r3, r7, #6
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2107      	movs	r1, #7
 8004b88:	400b      	ands	r3, r1
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	4099      	lsls	r1, r3
 8004b8e:	000b      	movs	r3, r1
 8004b90:	b25b      	sxtb	r3, r3
 8004b92:	4313      	orrs	r3, r2
 8004b94:	b25c      	sxtb	r4, r3
 8004b96:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <ssd1306_DrawPixel+0xec>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1dfa      	adds	r2, r7, #7
 8004b9c:	7811      	ldrb	r1, [r2, #0]
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	01d2      	lsls	r2, r2, #7
 8004ba2:	188a      	adds	r2, r1, r2
 8004ba4:	189b      	adds	r3, r3, r2
 8004ba6:	b2e2      	uxtb	r2, r4
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e025      	b.n	8004bf8 <ssd1306_DrawPixel+0xe0>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004bac:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <ssd1306_DrawPixel+0xec>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	1dfa      	adds	r2, r7, #7
 8004bb2:	7811      	ldrb	r1, [r2, #0]
 8004bb4:	1dba      	adds	r2, r7, #6
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	08d2      	lsrs	r2, r2, #3
 8004bba:	b2d0      	uxtb	r0, r2
 8004bbc:	0002      	movs	r2, r0
 8004bbe:	01d2      	lsls	r2, r2, #7
 8004bc0:	188a      	adds	r2, r1, r2
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b25b      	sxtb	r3, r3
 8004bc8:	1dba      	adds	r2, r7, #6
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	2107      	movs	r1, #7
 8004bce:	400a      	ands	r2, r1
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4091      	lsls	r1, r2
 8004bd4:	000a      	movs	r2, r1
 8004bd6:	b252      	sxtb	r2, r2
 8004bd8:	43d2      	mvns	r2, r2
 8004bda:	b252      	sxtb	r2, r2
 8004bdc:	4013      	ands	r3, r2
 8004bde:	b25c      	sxtb	r4, r3
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <ssd1306_DrawPixel+0xec>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	1dfa      	adds	r2, r7, #7
 8004be6:	7811      	ldrb	r1, [r2, #0]
 8004be8:	0002      	movs	r2, r0
 8004bea:	01d2      	lsls	r2, r2, #7
 8004bec:	188a      	adds	r2, r1, r2
 8004bee:	189b      	adds	r3, r3, r2
 8004bf0:	b2e2      	uxtb	r2, r4
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	e000      	b.n	8004bf8 <ssd1306_DrawPixel+0xe0>
		return;
 8004bf6:	46c0      	nop			; (mov r8, r8)
	}
}
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b003      	add	sp, #12
 8004bfc:	bd90      	pop	{r4, r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	200005ec 	.word	0x200005ec
 8004c04:	200001e4 	.word	0x200001e4

08004c08 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b089      	sub	sp, #36	; 0x24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	0004      	movs	r4, r0
 8004c10:	1d38      	adds	r0, r7, #4
 8004c12:	6001      	str	r1, [r0, #0]
 8004c14:	6042      	str	r2, [r0, #4]
 8004c16:	0019      	movs	r1, r3
 8004c18:	230f      	movs	r3, #15
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	1c22      	adds	r2, r4, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	230e      	movs	r3, #14
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	1c0a      	adds	r2, r1, #0
 8004c26:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004c28:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <ssd1306_WriteChar+0x11c>)
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	18d3      	adds	r3, r2, r3
 8004c34:	2b7f      	cmp	r3, #127	; 0x7f
 8004c36:	dc07      	bgt.n	8004c48 <ssd1306_WriteChar+0x40>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8004c38:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <ssd1306_WriteChar+0x11c>)
 8004c3a:	885b      	ldrh	r3, [r3, #2]
 8004c3c:	001a      	movs	r2, r3
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	18d3      	adds	r3, r2, r3
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8004c44:	2b3f      	cmp	r3, #63	; 0x3f
 8004c46:	dd01      	ble.n	8004c4c <ssd1306_WriteChar+0x44>
	{
		// Not enough space on current line
		return 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e066      	b.n	8004d1a <ssd1306_WriteChar+0x112>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
 8004c50:	e051      	b.n	8004cf6 <ssd1306_WriteChar+0xee>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004c52:	1d3b      	adds	r3, r7, #4
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	230f      	movs	r3, #15
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	3b20      	subs	r3, #32
 8004c5e:	1d39      	adds	r1, r7, #4
 8004c60:	7849      	ldrb	r1, [r1, #1]
 8004c62:	434b      	muls	r3, r1
 8004c64:	0019      	movs	r1, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	18cb      	adds	r3, r1, r3
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	18d3      	adds	r3, r2, r3
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	e035      	b.n	8004ce4 <ssd1306_WriteChar+0xdc>
		{
			if ((b << j) & 0x8000) 
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	4013      	ands	r3, r2
 8004c84:	d014      	beq.n	8004cb0 <ssd1306_WriteChar+0xa8>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <ssd1306_WriteChar+0x11c>)
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	18d3      	adds	r3, r2, r3
 8004c92:	b2d8      	uxtb	r0, r3
 8004c94:	4b23      	ldr	r3, [pc, #140]	; (8004d24 <ssd1306_WriteChar+0x11c>)
 8004c96:	885b      	ldrh	r3, [r3, #2]
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	18d3      	adds	r3, r2, r3
 8004ca0:	b2d9      	uxtb	r1, r3
 8004ca2:	230e      	movs	r3, #14
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	001a      	movs	r2, r3
 8004caa:	f7ff ff35 	bl	8004b18 <ssd1306_DrawPixel>
 8004cae:	e016      	b.n	8004cde <ssd1306_WriteChar+0xd6>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <ssd1306_WriteChar+0x11c>)
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	18d3      	adds	r3, r2, r3
 8004cbc:	b2d8      	uxtb	r0, r3
 8004cbe:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <ssd1306_WriteChar+0x11c>)
 8004cc0:	885b      	ldrh	r3, [r3, #2]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	18d3      	adds	r3, r2, r3
 8004cca:	b2d9      	uxtb	r1, r3
 8004ccc:	230e      	movs	r3, #14
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	425a      	negs	r2, r3
 8004cd4:	4153      	adcs	r3, r2
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	001a      	movs	r2, r3
 8004cda:	f7ff ff1d 	bl	8004b18 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	1d3b      	adds	r3, r7, #4
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	001a      	movs	r2, r3
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d3c3      	bcc.n	8004c78 <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	1d3b      	adds	r3, r7, #4
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	001a      	movs	r2, r3
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d3a7      	bcc.n	8004c52 <ssd1306_WriteChar+0x4a>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <ssd1306_WriteChar+0x11c>)
 8004d04:	881a      	ldrh	r2, [r3, #0]
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	18d3      	adds	r3, r2, r3
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <ssd1306_WriteChar+0x11c>)
 8004d12:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 8004d14:	230f      	movs	r3, #15
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	781b      	ldrb	r3, [r3, #0]
}
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b009      	add	sp, #36	; 0x24
 8004d20:	bd90      	pop	{r4, r7, pc}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	200005ec 	.word	0x200005ec

08004d28 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	1d38      	adds	r0, r7, #4
 8004d32:	6001      	str	r1, [r0, #0]
 8004d34:	6042      	str	r2, [r0, #4]
 8004d36:	001a      	movs	r2, r3
 8004d38:	1cfb      	adds	r3, r7, #3
 8004d3a:	701a      	strb	r2, [r3, #0]
	// Write until null-byte
	while (*str) 
 8004d3c:	e014      	b.n	8004d68 <ssd1306_WriteString+0x40>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	7818      	ldrb	r0, [r3, #0]
 8004d42:	1cfb      	adds	r3, r7, #3
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	1d3a      	adds	r2, r7, #4
 8004d48:	6811      	ldr	r1, [r2, #0]
 8004d4a:	6852      	ldr	r2, [r2, #4]
 8004d4c:	f7ff ff5c 	bl	8004c08 <ssd1306_WriteChar>
 8004d50:	0003      	movs	r3, r0
 8004d52:	001a      	movs	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d002      	beq.n	8004d62 <ssd1306_WriteString+0x3a>
		{
			// Char could not be written
			return *str;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	e008      	b.n	8004d74 <ssd1306_WriteString+0x4c>
		}
		
		// Next char
		str++;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e6      	bne.n	8004d3e <ssd1306_WriteString+0x16>
	}
	
	// Everything ok
	return *str;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	781b      	ldrb	r3, [r3, #0]
}
 8004d74:	0018      	movs	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b004      	add	sp, #16
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	0002      	movs	r2, r0
 8004d84:	1dfb      	adds	r3, r7, #7
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	1dbb      	adds	r3, r7, #6
 8004d8a:	1c0a      	adds	r2, r1, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
	SSD1306.CurrentX = x;
 8004d8e:	1dfb      	adds	r3, r7, #7
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <ssd1306_SetCursor+0x30>)
 8004d96:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8004d98:	1dbb      	adds	r3, r7, #6
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	4b03      	ldr	r3, [pc, #12]	; (8004dac <ssd1306_SetCursor+0x30>)
 8004da0:	805a      	strh	r2, [r3, #2]
}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b002      	add	sp, #8
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	200005ec 	.word	0x200005ec

08004db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <HAL_MspInit+0x24>)
 8004db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_MspInit+0x24>)
 8004dba:	2101      	movs	r1, #1
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dc0:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <HAL_MspInit+0x24>)
 8004dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc4:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <HAL_MspInit+0x24>)
 8004dc6:	2180      	movs	r1, #128	; 0x80
 8004dc8:	0549      	lsls	r1, r1, #21
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <NMI_Handler>:

/**
* @brief This function handles Non maskable Interrupt.
*/
void NMI_Handler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004de6:	e7fe      	b.n	8004de6 <HardFault_Handler+0x4>

08004de8 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e00:	f000 faa6 	bl	8005350 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004e04:	f000 ff20 	bl	8005c48 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e08:	46c0      	nop			; (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <TIM2_IRQHandler+0x14>)
 8004e16:	0018      	movs	r0, r3
 8004e18:	f002 fdbe 	bl	8007998 <HAL_TIM_IRQHandler>


}
 8004e1c:	46c0      	nop			; (mov r8, r8)
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	20000760 	.word	0x20000760

08004e28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	
	if(htim->Instance==TIM2)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	05db      	lsls	r3, r3, #23
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d103      	bne.n	8004e44 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//HAL_GPIO_TogglePin(GPIOC, led0_Pin);
		one_second_timer_increment_counter();
 8004e3c:	f7ff f898 	bl	8003f70 <one_second_timer_increment_counter>
		one_second_timer_set_flag();
 8004e40:	f7ff f878 	bl	8003f34 <one_second_timer_set_flag>
	}
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <_sbrk+0x50>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <_sbrk+0x16>
		heap_end = &end;
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <_sbrk+0x50>)
 8004e5e:	4a10      	ldr	r2, [pc, #64]	; (8004ea0 <_sbrk+0x54>)
 8004e60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004e62:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <_sbrk+0x50>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <_sbrk+0x50>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	18d3      	adds	r3, r2, r3
 8004e70:	466a      	mov	r2, sp
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d907      	bls.n	8004e86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004e76:	f003 fddf 	bl	8008a38 <__errno>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	220c      	movs	r2, #12
 8004e7e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004e80:	2301      	movs	r3, #1
 8004e82:	425b      	negs	r3, r3
 8004e84:	e006      	b.n	8004e94 <_sbrk+0x48>
	}

	heap_end += incr;
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <_sbrk+0x50>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	18d2      	adds	r2, r2, r3
 8004e8e:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <_sbrk+0x50>)
 8004e90:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004e92:	68fb      	ldr	r3, [r7, #12]
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b004      	add	sp, #16
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	200005f4 	.word	0x200005f4
 8004ea0:	20000828 	.word	0x20000828

08004ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004ea8:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <SystemInit+0x64>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b16      	ldr	r3, [pc, #88]	; (8004f08 <SystemInit+0x64>)
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	0049      	lsls	r1, r1, #1
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004eb6:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <SystemInit+0x64>)
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <SystemInit+0x64>)
 8004ebc:	4913      	ldr	r1, [pc, #76]	; (8004f0c <SystemInit+0x68>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004ec2:	4b11      	ldr	r3, [pc, #68]	; (8004f08 <SystemInit+0x64>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <SystemInit+0x64>)
 8004ec8:	4911      	ldr	r1, [pc, #68]	; (8004f10 <SystemInit+0x6c>)
 8004eca:	400a      	ands	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004ece:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <SystemInit+0x64>)
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <SystemInit+0x64>)
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	438a      	bics	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004eda:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <SystemInit+0x64>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <SystemInit+0x64>)
 8004ee0:	490c      	ldr	r1, [pc, #48]	; (8004f14 <SystemInit+0x70>)
 8004ee2:	400a      	ands	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004ee6:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <SystemInit+0x64>)
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <SystemInit+0x64>)
 8004eec:	490a      	ldr	r1, [pc, #40]	; (8004f18 <SystemInit+0x74>)
 8004eee:	400a      	ands	r2, r1
 8004ef0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <SystemInit+0x64>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ef8:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <SystemInit+0x78>)
 8004efa:	2280      	movs	r2, #128	; 0x80
 8004efc:	0512      	lsls	r2, r2, #20
 8004efe:	609a      	str	r2, [r3, #8]
#endif
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	88ff400c 	.word	0x88ff400c
 8004f10:	fef6fff6 	.word	0xfef6fff6
 8004f14:	fffbffff 	.word	0xfffbffff
 8004f18:	ff02ffff 	.word	0xff02ffff
 8004f1c:	e000ed00 	.word	0xe000ed00

08004f20 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8004f26:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <MX_TIM2_Init+0x88>)
 8004f28:	2280      	movs	r2, #128	; 0x80
 8004f2a:	05d2      	lsls	r2, r2, #23
 8004f2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <MX_TIM2_Init+0x88>)
 8004f30:	22fa      	movs	r2, #250	; 0xfa
 8004f32:	01d2      	lsls	r2, r2, #7
 8004f34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f36:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <MX_TIM2_Init+0x88>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <MX_TIM2_Init+0x88>)
 8004f3e:	22fa      	movs	r2, #250	; 0xfa
 8004f40:	0092      	lsls	r2, r2, #2
 8004f42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f44:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <MX_TIM2_Init+0x88>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004f4a:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <MX_TIM2_Init+0x88>)
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f002 fcd5 	bl	80078fc <HAL_TIM_Base_Init>
 8004f52:	1e03      	subs	r3, r0, #0
 8004f54:	d001      	beq.n	8004f5a <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 8004f56:	f7fe ffd3 	bl	8003f00 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f5a:	2108      	movs	r1, #8
 8004f5c:	187b      	adds	r3, r7, r1
 8004f5e:	2280      	movs	r2, #128	; 0x80
 8004f60:	0152      	lsls	r2, r2, #5
 8004f62:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f64:	187a      	adds	r2, r7, r1
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <MX_TIM2_Init+0x88>)
 8004f68:	0011      	movs	r1, r2
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f002 fdfc 	bl	8007b68 <HAL_TIM_ConfigClockSource>
 8004f70:	1e03      	subs	r3, r0, #0
 8004f72:	d001      	beq.n	8004f78 <MX_TIM2_Init+0x58>
  {
	  Error_Handler();
 8004f74:	f7fe ffc4 	bl	8003f00 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f78:	003b      	movs	r3, r7
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f7e:	003b      	movs	r3, r7
 8004f80:	2200      	movs	r2, #0
 8004f82:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f84:	003a      	movs	r2, r7
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <MX_TIM2_Init+0x88>)
 8004f88:	0011      	movs	r1, r2
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f002 ffb8 	bl	8007f00 <HAL_TIMEx_MasterConfigSynchronization>
 8004f90:	1e03      	subs	r3, r0, #0
 8004f92:	d001      	beq.n	8004f98 <MX_TIM2_Init+0x78>
  {
	  Error_Handler();
 8004f94:	f7fe ffb4 	bl	8003f00 <Error_Handler>
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8004f98:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <MX_TIM2_Init+0x88>)
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f002 fcda 	bl	8007954 <HAL_TIM_Base_Start_IT>
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b006      	add	sp, #24
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000760 	.word	0x20000760

08004fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	05db      	lsls	r3, r3, #23
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d10d      	bne.n	8004fdc <HAL_TIM_Base_MspInit+0x30>
  {
    
	/* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <HAL_TIM_Base_MspInit+0x38>)
 8004fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <HAL_TIM_Base_MspInit+0x38>)
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2107      	movs	r1, #7
 8004fd0:	200f      	movs	r0, #15
 8004fd2:	f000 fe07 	bl	8005be4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004fd6:	200f      	movs	r0, #15
 8004fd8:	f000 fe19 	bl	8005c0e <HAL_NVIC_EnableIRQ>
  }
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40021000 	.word	0x40021000

08004fe8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004fec:	4b14      	ldr	r3, [pc, #80]	; (8005040 <MX_USART1_UART_Init+0x58>)
 8004fee:	4a15      	ldr	r2, [pc, #84]	; (8005044 <MX_USART1_UART_Init+0x5c>)
 8004ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <MX_USART1_UART_Init+0x58>)
 8004ff4:	22e1      	movs	r2, #225	; 0xe1
 8004ff6:	0252      	lsls	r2, r2, #9
 8004ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ffa:	4b11      	ldr	r3, [pc, #68]	; (8005040 <MX_USART1_UART_Init+0x58>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <MX_USART1_UART_Init+0x58>)
 8005002:	2200      	movs	r2, #0
 8005004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005006:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <MX_USART1_UART_Init+0x58>)
 8005008:	2200      	movs	r2, #0
 800500a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800500c:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <MX_USART1_UART_Init+0x58>)
 800500e:	220c      	movs	r2, #12
 8005010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <MX_USART1_UART_Init+0x58>)
 8005014:	2200      	movs	r2, #0
 8005016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005018:	4b09      	ldr	r3, [pc, #36]	; (8005040 <MX_USART1_UART_Init+0x58>)
 800501a:	2200      	movs	r2, #0
 800501c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800501e:	4b08      	ldr	r3, [pc, #32]	; (8005040 <MX_USART1_UART_Init+0x58>)
 8005020:	2200      	movs	r2, #0
 8005022:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <MX_USART1_UART_Init+0x58>)
 8005026:	2200      	movs	r2, #0
 8005028:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <MX_USART1_UART_Init+0x58>)
 800502c:	0018      	movs	r0, r3
 800502e:	f002 ffab 	bl	8007f88 <HAL_UART_Init>
 8005032:	1e03      	subs	r3, r0, #0
 8005034:	d001      	beq.n	800503a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005036:	f7fe ff63 	bl	8003f00 <Error_Handler>
  }

}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	2000079c 	.word	0x2000079c
 8005044:	40013800 	.word	0x40013800

08005048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005050:	230c      	movs	r3, #12
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	0018      	movs	r0, r3
 8005056:	2314      	movs	r3, #20
 8005058:	001a      	movs	r2, r3
 800505a:	2100      	movs	r1, #0
 800505c:	f003 fd16 	bl	8008a8c <memset>
  if(uartHandle->Instance==USART1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <HAL_UART_MspInit+0x7c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d128      	bne.n	80050bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800506a:	4b17      	ldr	r3, [pc, #92]	; (80050c8 <HAL_UART_MspInit+0x80>)
 800506c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800506e:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <HAL_UART_MspInit+0x80>)
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	01c9      	lsls	r1, r1, #7
 8005074:	430a      	orrs	r2, r1
 8005076:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <HAL_UART_MspInit+0x80>)
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <HAL_UART_MspInit+0x80>)
 800507e:	2102      	movs	r1, #2
 8005080:	430a      	orrs	r2, r1
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c
 8005084:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <HAL_UART_MspInit+0x80>)
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	2202      	movs	r2, #2
 800508a:	4013      	ands	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005090:	210c      	movs	r1, #12
 8005092:	187b      	adds	r3, r7, r1
 8005094:	22c0      	movs	r2, #192	; 0xc0
 8005096:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005098:	187b      	adds	r3, r7, r1
 800509a:	2202      	movs	r2, #2
 800509c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509e:	187b      	adds	r3, r7, r1
 80050a0:	2200      	movs	r2, #0
 80050a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	2203      	movs	r2, #3
 80050a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	2200      	movs	r2, #0
 80050ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	4a06      	ldr	r2, [pc, #24]	; (80050cc <HAL_UART_MspInit+0x84>)
 80050b4:	0019      	movs	r1, r3
 80050b6:	0010      	movs	r0, r2
 80050b8:	f000 fdd2 	bl	8005c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	b008      	add	sp, #32
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40013800 	.word	0x40013800
 80050c8:	40021000 	.word	0x40021000
 80050cc:	50000400 	.word	0x50000400

080050d0 <voltmeter_measure_voltage>:




void voltmeter_measure_voltage()
{
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
	int i;

	accu_voltage = 0;
 80050d6:	4a4d      	ldr	r2, [pc, #308]	; (800520c <voltmeter_measure_voltage+0x13c>)
 80050d8:	2300      	movs	r3, #0
 80050da:	2400      	movs	r4, #0
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	6054      	str	r4, [r2, #4]

	for(i=0; i<11; i++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e042      	b.n	800516c <voltmeter_measure_voltage+0x9c>
	{
		// measure accu voltage
	    HAL_ADC_Start(&hadc);
 80050e6:	4b4a      	ldr	r3, [pc, #296]	; (8005210 <voltmeter_measure_voltage+0x140>)
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 fad9 	bl	80056a0 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc, 500);
 80050ee:	23fa      	movs	r3, #250	; 0xfa
 80050f0:	005a      	lsls	r2, r3, #1
 80050f2:	4b47      	ldr	r3, [pc, #284]	; (8005210 <voltmeter_measure_voltage+0x140>)
 80050f4:	0011      	movs	r1, r2
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 fb26 	bl	8005748 <HAL_ADC_PollForConversion>
	    uint32_t adc_voltage =  HAL_ADC_GetValue(&hadc);
 80050fc:	4b44      	ldr	r3, [pc, #272]	; (8005210 <voltmeter_measure_voltage+0x140>)
 80050fe:	0018      	movs	r0, r3
 8005100:	f000 fbb8 	bl	8005874 <HAL_ADC_GetValue>
 8005104:	0003      	movs	r3, r0
 8005106:	607b      	str	r3, [r7, #4]
	    adc_voltage *= 3;
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	0013      	movs	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	189b      	adds	r3, r3, r2
 8005110:	607b      	str	r3, [r7, #4]
	    accu_voltage += (double)adc_voltage * voltage_coefficient * 100.0 * 1.0351;
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc ff1a 	bl	8001f4c <__aeabi_ui2d>
 8005118:	4b3e      	ldr	r3, [pc, #248]	; (8005214 <voltmeter_measure_voltage+0x144>)
 800511a:	685c      	ldr	r4, [r3, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	001a      	movs	r2, r3
 8005120:	0023      	movs	r3, r4
 8005122:	f7fc f8e9 	bl	80012f8 <__aeabi_dmul>
 8005126:	0003      	movs	r3, r0
 8005128:	000c      	movs	r4, r1
 800512a:	0018      	movs	r0, r3
 800512c:	0021      	movs	r1, r4
 800512e:	2200      	movs	r2, #0
 8005130:	4b39      	ldr	r3, [pc, #228]	; (8005218 <voltmeter_measure_voltage+0x148>)
 8005132:	f7fc f8e1 	bl	80012f8 <__aeabi_dmul>
 8005136:	0003      	movs	r3, r0
 8005138:	000c      	movs	r4, r1
 800513a:	0018      	movs	r0, r3
 800513c:	0021      	movs	r1, r4
 800513e:	4a37      	ldr	r2, [pc, #220]	; (800521c <voltmeter_measure_voltage+0x14c>)
 8005140:	4b37      	ldr	r3, [pc, #220]	; (8005220 <voltmeter_measure_voltage+0x150>)
 8005142:	f7fc f8d9 	bl	80012f8 <__aeabi_dmul>
 8005146:	0003      	movs	r3, r0
 8005148:	000c      	movs	r4, r1
 800514a:	0018      	movs	r0, r3
 800514c:	0021      	movs	r1, r4
 800514e:	4b2f      	ldr	r3, [pc, #188]	; (800520c <voltmeter_measure_voltage+0x13c>)
 8005150:	685c      	ldr	r4, [r3, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	001a      	movs	r2, r3
 8005156:	0023      	movs	r3, r4
 8005158:	f7fb f9a8 	bl	80004ac <__aeabi_dadd>
 800515c:	0003      	movs	r3, r0
 800515e:	000c      	movs	r4, r1
 8005160:	4a2a      	ldr	r2, [pc, #168]	; (800520c <voltmeter_measure_voltage+0x13c>)
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	6054      	str	r4, [r2, #4]
	for(i=0; i<11; i++)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	3301      	adds	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b0a      	cmp	r3, #10
 8005170:	ddb9      	ble.n	80050e6 <voltmeter_measure_voltage+0x16>
	    
	}

	accu_voltage /= 11;
 8005172:	4b26      	ldr	r3, [pc, #152]	; (800520c <voltmeter_measure_voltage+0x13c>)
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	4b2a      	ldr	r3, [pc, #168]	; (8005224 <voltmeter_measure_voltage+0x154>)
 800517c:	f7fb fcb2 	bl	8000ae4 <__aeabi_ddiv>
 8005180:	0003      	movs	r3, r0
 8005182:	000c      	movs	r4, r1
 8005184:	4a21      	ldr	r2, [pc, #132]	; (800520c <voltmeter_measure_voltage+0x13c>)
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	6054      	str	r4, [r2, #4]
	    
	double current_voltage;
	if (accu_voltage > UP_BOUND)
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <voltmeter_measure_voltage+0x13c>)
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	4b25      	ldr	r3, [pc, #148]	; (8005228 <voltmeter_measure_voltage+0x158>)
 8005194:	f7fb f876 	bl	8000284 <__aeabi_dcmpgt>
 8005198:	1e03      	subs	r3, r0, #0
 800519a:	d004      	beq.n	80051a6 <voltmeter_measure_voltage+0xd6>
	    current_voltage = UP_BOUND;
 800519c:	2300      	movs	r3, #0
 800519e:	4c22      	ldr	r4, [pc, #136]	; (8005228 <voltmeter_measure_voltage+0x158>)
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	60fc      	str	r4, [r7, #12]
 80051a4:	e012      	b.n	80051cc <voltmeter_measure_voltage+0xfc>
	else if (accu_voltage < LOW_BOUND)
 80051a6:	4b19      	ldr	r3, [pc, #100]	; (800520c <voltmeter_measure_voltage+0x13c>)
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	6859      	ldr	r1, [r3, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	4b1f      	ldr	r3, [pc, #124]	; (800522c <voltmeter_measure_voltage+0x15c>)
 80051b0:	f7fb f854 	bl	800025c <__aeabi_dcmplt>
 80051b4:	1e03      	subs	r3, r0, #0
 80051b6:	d004      	beq.n	80051c2 <voltmeter_measure_voltage+0xf2>
	    current_voltage = LOW_BOUND;
 80051b8:	2300      	movs	r3, #0
 80051ba:	4c1c      	ldr	r4, [pc, #112]	; (800522c <voltmeter_measure_voltage+0x15c>)
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	60fc      	str	r4, [r7, #12]
 80051c0:	e004      	b.n	80051cc <voltmeter_measure_voltage+0xfc>
	else
	    current_voltage = accu_voltage;
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <voltmeter_measure_voltage+0x13c>)
 80051c4:	685c      	ldr	r4, [r3, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	60fc      	str	r4, [r7, #12]
	    
	accu_percentage = (current_voltage - LOW_BOUND)/(UP_BOUND - LOW_BOUND)*100.0;
 80051cc:	2200      	movs	r2, #0
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <voltmeter_measure_voltage+0x15c>)
 80051d0:	68b8      	ldr	r0, [r7, #8]
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	f7fc fb02 	bl	80017dc <__aeabi_dsub>
 80051d8:	0003      	movs	r3, r0
 80051da:	000c      	movs	r4, r1
 80051dc:	0018      	movs	r0, r3
 80051de:	0021      	movs	r1, r4
 80051e0:	2200      	movs	r2, #0
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <voltmeter_measure_voltage+0x160>)
 80051e4:	f7fb fc7e 	bl	8000ae4 <__aeabi_ddiv>
 80051e8:	0003      	movs	r3, r0
 80051ea:	000c      	movs	r4, r1
 80051ec:	0018      	movs	r0, r3
 80051ee:	0021      	movs	r1, r4
 80051f0:	2200      	movs	r2, #0
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <voltmeter_measure_voltage+0x148>)
 80051f4:	f7fc f880 	bl	80012f8 <__aeabi_dmul>
 80051f8:	0003      	movs	r3, r0
 80051fa:	000c      	movs	r4, r1
 80051fc:	4a0d      	ldr	r2, [pc, #52]	; (8005234 <voltmeter_measure_voltage+0x164>)
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	6054      	str	r4, [r2, #4]
}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	46bd      	mov	sp, r7
 8005206:	b007      	add	sp, #28
 8005208:	bd90      	pop	{r4, r7, pc}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	200005f8 	.word	0x200005f8
 8005210:	20000610 	.word	0x20000610
 8005214:	20000028 	.word	0x20000028
 8005218:	40590000 	.word	0x40590000
 800521c:	04816f00 	.word	0x04816f00
 8005220:	3ff08fc5 	.word	0x3ff08fc5
 8005224:	40260000 	.word	0x40260000
 8005228:	4089a000 	.word	0x4089a000
 800522c:	4084a000 	.word	0x4084a000
 8005230:	40640000 	.word	0x40640000
 8005234:	20000600 	.word	0x20000600

08005238 <voltmeter_get_voltage>:



double voltmeter_get_voltage()
{
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	af00      	add	r7, sp, #0
	return accu_voltage;
 800523c:	4b03      	ldr	r3, [pc, #12]	; (800524c <voltmeter_get_voltage+0x14>)
 800523e:	685c      	ldr	r4, [r3, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
}
 8005242:	0018      	movs	r0, r3
 8005244:	0021      	movs	r1, r4
 8005246:	46bd      	mov	sp, r7
 8005248:	bd90      	pop	{r4, r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	200005f8 	.word	0x200005f8

08005250 <voltmeter_get_percentage>:



double voltmeter_get_percentage()
{
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	af00      	add	r7, sp, #0
	return accu_percentage;
 8005254:	4b03      	ldr	r3, [pc, #12]	; (8005264 <voltmeter_get_percentage+0x14>)
 8005256:	685c      	ldr	r4, [r3, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
}
 800525a:	0018      	movs	r0, r3
 800525c:	0021      	movs	r1, r4
 800525e:	46bd      	mov	sp, r7
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	20000600 	.word	0x20000600

08005268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005268:	480d      	ldr	r0, [pc, #52]	; (80052a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800526a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800526c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800526e:	e003      	b.n	8005278 <LoopCopyDataInit>

08005270 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005270:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8005272:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005274:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005276:	3104      	adds	r1, #4

08005278 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005278:	480b      	ldr	r0, [pc, #44]	; (80052a8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800527a:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <LoopForever+0xe>)
  adds  r2, r0, r1
 800527c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800527e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005280:	d3f6      	bcc.n	8005270 <CopyDataInit>
  ldr  r2, =_sbss
 8005282:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8005284:	e002      	b.n	800528c <LoopFillZerobss>

08005286 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005286:	2300      	movs	r3, #0
  str  r3, [r2]
 8005288:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800528a:	3204      	adds	r2, #4

0800528c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <LoopForever+0x16>)
  cmp  r2, r3
 800528e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005290:	d3f9      	bcc.n	8005286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005292:	f7ff fe07 	bl	8004ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005296:	f003 fbd5 	bl	8008a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800529a:	f7fd f99f 	bl	80025dc <main>

0800529e <LoopForever>:

LoopForever:
    b LoopForever
 800529e:	e7fe      	b.n	800529e <LoopForever>
   ldr   r0, =_estack
 80052a0:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80052a4:	0800a26c 	.word	0x0800a26c
  ldr  r0, =_sdata
 80052a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80052ac:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80052b0:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80052b4:	20000824 	.word	0x20000824

080052b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052b8:	e7fe      	b.n	80052b8 <ADC1_COMP_IRQHandler>
	...

080052bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052c2:	1dfb      	adds	r3, r7, #7
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_Init+0x3c>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <HAL_Init+0x3c>)
 80052ce:	2140      	movs	r1, #64	; 0x40
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052d4:	2000      	movs	r0, #0
 80052d6:	f000 f811 	bl	80052fc <HAL_InitTick>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80052de:	1dfb      	adds	r3, r7, #7
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e001      	b.n	80052ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80052e6:	f7ff fd63 	bl	8004db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80052ea:	1dfb      	adds	r3, r7, #7
 80052ec:	781b      	ldrb	r3, [r3, #0]
}
 80052ee:	0018      	movs	r0, r3
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b002      	add	sp, #8
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	40022000 	.word	0x40022000

080052fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005304:	230f      	movs	r3, #15
 8005306:	18fb      	adds	r3, r7, r3
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <HAL_InitTick+0x50>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	23fa      	movs	r3, #250	; 0xfa
 8005312:	0099      	lsls	r1, r3, #2
 8005314:	0010      	movs	r0, r2
 8005316:	f7fa feff 	bl	8000118 <__udivsi3>
 800531a:	0003      	movs	r3, r0
 800531c:	0018      	movs	r0, r3
 800531e:	f000 fc86 	bl	8005c2e <HAL_SYSTICK_Config>
 8005322:	1e03      	subs	r3, r0, #0
 8005324:	d004      	beq.n	8005330 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8005326:	230f      	movs	r3, #15
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	2201      	movs	r2, #1
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e006      	b.n	800533e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	2301      	movs	r3, #1
 8005334:	425b      	negs	r3, r3
 8005336:	2200      	movs	r2, #0
 8005338:	0018      	movs	r0, r3
 800533a:	f000 fc53 	bl	8005be4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800533e:	230f      	movs	r3, #15
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	781b      	ldrb	r3, [r3, #0]
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b004      	add	sp, #16
 800534a:	bd80      	pop	{r7, pc}
 800534c:	20000024 	.word	0x20000024

08005350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  uwTick++;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_IncTick+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	4b02      	ldr	r3, [pc, #8]	; (8005364 <HAL_IncTick+0x14>)
 800535c:	601a      	str	r2, [r3, #0]
}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	2000081c 	.word	0x2000081c

08005368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  return uwTick;
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <HAL_GetTick+0x10>)
 800536e:	681b      	ldr	r3, [r3, #0]
}
 8005370:	0018      	movs	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	2000081c 	.word	0x2000081c

0800537c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005384:	f7ff fff0 	bl	8005368 <HAL_GetTick>
 8005388:	0003      	movs	r3, r0
 800538a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3301      	adds	r3, #1
 8005394:	d002      	beq.n	800539c <HAL_Delay+0x20>
  {
    wait++;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3301      	adds	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	f7ff ffe3 	bl	8005368 <HAL_GetTick>
 80053a2:	0002      	movs	r2, r0
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d8f7      	bhi.n	800539e <HAL_Delay+0x22>
  {
  }
}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b004      	add	sp, #16
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e159      	b.n	800567e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2250      	movs	r2, #80	; 0x50
 80053dc:	2100      	movs	r1, #0
 80053de:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7fc fe72 	bl	80020cc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	2210      	movs	r2, #16
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d005      	beq.n	8005400 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2204      	movs	r2, #4
 80053fc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80053fe:	d00b      	beq.n	8005418 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	2210      	movs	r2, #16
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2250      	movs	r2, #80	; 0x50
 8005410:	2100      	movs	r1, #0
 8005412:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e132      	b.n	800567e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	4a9a      	ldr	r2, [pc, #616]	; (8005688 <HAL_ADC_Init+0x2d0>)
 800541e:	4013      	ands	r3, r2
 8005420:	2202      	movs	r2, #2
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2203      	movs	r2, #3
 8005430:	4013      	ands	r3, r2
 8005432:	2b01      	cmp	r3, #1
 8005434:	d108      	bne.n	8005448 <HAL_ADC_Init+0x90>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	4013      	ands	r3, r2
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_ADC_Init+0x90>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <HAL_ADC_Init+0x92>
 8005448:	2300      	movs	r3, #0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d149      	bne.n	80054e2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	23c0      	movs	r3, #192	; 0xc0
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	429a      	cmp	r2, r3
 8005458:	d00b      	beq.n	8005472 <HAL_ADC_Init+0xba>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	05db      	lsls	r3, r3, #23
 8005462:	429a      	cmp	r2, r3
 8005464:	d005      	beq.n	8005472 <HAL_ADC_Init+0xba>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	2380      	movs	r3, #128	; 0x80
 800546c:	061b      	lsls	r3, r3, #24
 800546e:	429a      	cmp	r2, r3
 8005470:	d111      	bne.n	8005496 <HAL_ADC_Init+0xde>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	0092      	lsls	r2, r2, #2
 800547e:	0892      	lsrs	r2, r2, #2
 8005480:	611a      	str	r2, [r3, #16]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6919      	ldr	r1, [r3, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	611a      	str	r2, [r3, #16]
 8005494:	e014      	b.n	80054c0 <HAL_ADC_Init+0x108>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	0092      	lsls	r2, r2, #2
 80054a2:	0892      	lsrs	r2, r2, #2
 80054a4:	611a      	str	r2, [r3, #16]
 80054a6:	4b79      	ldr	r3, [pc, #484]	; (800568c <HAL_ADC_Init+0x2d4>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b78      	ldr	r3, [pc, #480]	; (800568c <HAL_ADC_Init+0x2d4>)
 80054ac:	4978      	ldr	r1, [pc, #480]	; (8005690 <HAL_ADC_Init+0x2d8>)
 80054ae:	400a      	ands	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	4b76      	ldr	r3, [pc, #472]	; (800568c <HAL_ADC_Init+0x2d4>)
 80054b4:	6819      	ldr	r1, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	4b74      	ldr	r3, [pc, #464]	; (800568c <HAL_ADC_Init+0x2d4>)
 80054bc:	430a      	orrs	r2, r1
 80054be:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2118      	movs	r1, #24
 80054cc:	438a      	bics	r2, r1
 80054ce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80054e2:	4b6a      	ldr	r3, [pc, #424]	; (800568c <HAL_ADC_Init+0x2d4>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b69      	ldr	r3, [pc, #420]	; (800568c <HAL_ADC_Init+0x2d4>)
 80054e8:	496a      	ldr	r1, [pc, #424]	; (8005694 <HAL_ADC_Init+0x2dc>)
 80054ea:	400a      	ands	r2, r1
 80054ec:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80054ee:	4b67      	ldr	r3, [pc, #412]	; (800568c <HAL_ADC_Init+0x2d4>)
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f6:	065a      	lsls	r2, r3, #25
 80054f8:	4b64      	ldr	r3, [pc, #400]	; (800568c <HAL_ADC_Init+0x2d4>)
 80054fa:	430a      	orrs	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	055b      	lsls	r3, r3, #21
 8005508:	4013      	ands	r3, r2
 800550a:	d108      	bne.n	800551e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	0549      	lsls	r1, r1, #21
 800551a:	430a      	orrs	r2, r1
 800551c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	495b      	ldr	r1, [pc, #364]	; (8005698 <HAL_ADC_Init+0x2e0>)
 800552a:	400a      	ands	r2, r1
 800552c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68d9      	ldr	r1, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d101      	bne.n	8005544 <HAL_ADC_Init+0x18c>
 8005540:	2304      	movs	r3, #4
 8005542:	e000      	b.n	8005546 <HAL_ADC_Init+0x18e>
 8005544:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005546:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2020      	movs	r0, #32
 800554c:	5c1b      	ldrb	r3, [r3, r0]
 800554e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005550:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	202c      	movs	r0, #44	; 0x2c
 8005556:	5c1b      	ldrb	r3, [r3, r0]
 8005558:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800555a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005560:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8005568:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005570:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800557e:	23c2      	movs	r3, #194	; 0xc2
 8005580:	33ff      	adds	r3, #255	; 0xff
 8005582:	429a      	cmp	r2, r3
 8005584:	d00b      	beq.n	800559e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68d9      	ldr	r1, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2221      	movs	r2, #33	; 0x21
 80055a2:	5c9b      	ldrb	r3, [r3, r2]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d11a      	bne.n	80055de <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	5c9b      	ldrb	r3, [r3, r2]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2180      	movs	r1, #128	; 0x80
 80055be:	0249      	lsls	r1, r1, #9
 80055c0:	430a      	orrs	r2, r1
 80055c2:	60da      	str	r2, [r3, #12]
 80055c4:	e00b      	b.n	80055de <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	2220      	movs	r2, #32
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	2201      	movs	r2, #1
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d11f      	bne.n	8005626 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	492a      	ldr	r1, [pc, #168]	; (800569c <HAL_ADC_Init+0x2e4>)
 80055f2:	400a      	ands	r2, r1
 80055f4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6919      	ldr	r1, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005604:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800560a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2101      	movs	r1, #1
 8005620:	430a      	orrs	r2, r1
 8005622:	611a      	str	r2, [r3, #16]
 8005624:	e00e      	b.n	8005644 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2201      	movs	r2, #1
 800562e:	4013      	ands	r3, r2
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2101      	movs	r1, #1
 8005640:	438a      	bics	r2, r1
 8005642:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2107      	movs	r1, #7
 8005650:	438a      	bics	r2, r1
 8005652:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6959      	ldr	r1, [r3, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005670:	2203      	movs	r2, #3
 8005672:	4393      	bics	r3, r2
 8005674:	2201      	movs	r2, #1
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b002      	add	sp, #8
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	fffffefd 	.word	0xfffffefd
 800568c:	40012708 	.word	0x40012708
 8005690:	ffc3ffff 	.word	0xffc3ffff
 8005694:	fdffffff 	.word	0xfdffffff
 8005698:	fffe0219 	.word	0xfffe0219
 800569c:	fffffc03 	.word	0xfffffc03

080056a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056a8:	230f      	movs	r3, #15
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2204      	movs	r2, #4
 80056b8:	4013      	ands	r3, r2
 80056ba:	d138      	bne.n	800572e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2250      	movs	r2, #80	; 0x50
 80056c0:	5c9b      	ldrb	r3, [r3, r2]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_ADC_Start+0x2a>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e038      	b.n	800573c <HAL_ADC_Start+0x9c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2250      	movs	r2, #80	; 0x50
 80056ce:	2101      	movs	r1, #1
 80056d0:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d007      	beq.n	80056ea <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80056da:	230f      	movs	r3, #15
 80056dc:	18fc      	adds	r4, r7, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0018      	movs	r0, r3
 80056e2:	f000 f959 	bl	8005998 <ADC_Enable>
 80056e6:	0003      	movs	r3, r0
 80056e8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80056ea:	230f      	movs	r3, #15
 80056ec:	18fb      	adds	r3, r7, r3
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d120      	bne.n	8005736 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	4a12      	ldr	r2, [pc, #72]	; (8005744 <HAL_ADC_Start+0xa4>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	2280      	movs	r2, #128	; 0x80
 80056fe:	0052      	lsls	r2, r2, #1
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2250      	movs	r2, #80	; 0x50
 8005710:	2100      	movs	r1, #0
 8005712:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	221c      	movs	r2, #28
 800571a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2104      	movs	r1, #4
 8005728:	430a      	orrs	r2, r1
 800572a:	609a      	str	r2, [r3, #8]
 800572c:	e003      	b.n	8005736 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800572e:	230f      	movs	r3, #15
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	2202      	movs	r2, #2
 8005734:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005736:	230f      	movs	r3, #15
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	781b      	ldrb	r3, [r3, #0]
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b005      	add	sp, #20
 8005742:	bd90      	pop	{r4, r7, pc}
 8005744:	fffff0fe 	.word	0xfffff0fe

08005748 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b08      	cmp	r3, #8
 8005760:	d102      	bne.n	8005768 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8005762:	2308      	movs	r3, #8
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	e014      	b.n	8005792 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	4013      	ands	r3, r2
 8005772:	2b01      	cmp	r3, #1
 8005774:	d10b      	bne.n	800578e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	2220      	movs	r2, #32
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2250      	movs	r2, #80	; 0x50
 8005786:	2100      	movs	r1, #0
 8005788:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e06c      	b.n	8005868 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800578e:	230c      	movs	r3, #12
 8005790:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005792:	f7ff fde9 	bl	8005368 <HAL_GetTick>
 8005796:	0003      	movs	r3, r0
 8005798:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800579a:	e019      	b.n	80057d0 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	3301      	adds	r3, #1
 80057a0:	d016      	beq.n	80057d0 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <HAL_ADC_PollForConversion+0x70>
 80057a8:	f7ff fdde 	bl	8005368 <HAL_GetTick>
 80057ac:	0002      	movs	r2, r0
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d20b      	bcs.n	80057d0 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057bc:	2204      	movs	r2, #4
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2250      	movs	r2, #80	; 0x50
 80057c8:	2100      	movs	r1, #0
 80057ca:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e04b      	b.n	8005868 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4013      	ands	r3, r2
 80057da:	d0df      	beq.n	800579c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	2280      	movs	r2, #128	; 0x80
 80057e2:	0092      	lsls	r2, r2, #2
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	23c0      	movs	r3, #192	; 0xc0
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	4013      	ands	r3, r2
 80057f6:	d12e      	bne.n	8005856 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d129      	bne.n	8005856 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2208      	movs	r2, #8
 800580a:	4013      	ands	r3, r2
 800580c:	2b08      	cmp	r3, #8
 800580e:	d122      	bne.n	8005856 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2204      	movs	r2, #4
 8005818:	4013      	ands	r3, r2
 800581a:	d110      	bne.n	800583e <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	210c      	movs	r1, #12
 8005828:	438a      	bics	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <HAL_ADC_PollForConversion+0x128>)
 8005832:	4013      	ands	r3, r2
 8005834:	2201      	movs	r2, #1
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
 800583c:	e00b      	b.n	8005856 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005842:	2220      	movs	r2, #32
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	2201      	movs	r2, #1
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	220c      	movs	r2, #12
 8005864:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	0018      	movs	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	b004      	add	sp, #16
 800586e:	bd80      	pop	{r7, pc}
 8005870:	fffffefe 	.word	0xfffffefe

08005874 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005882:	0018      	movs	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	b002      	add	sp, #8
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2250      	movs	r2, #80	; 0x50
 800589a:	5c9b      	ldrb	r3, [r3, r2]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0x18>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e06c      	b.n	800597e <HAL_ADC_ConfigChannel+0xf2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2250      	movs	r2, #80	; 0x50
 80058a8:	2101      	movs	r1, #1
 80058aa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2204      	movs	r2, #4
 80058b4:	4013      	ands	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058bc:	2220      	movs	r2, #32
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2250      	movs	r2, #80	; 0x50
 80058c8:	2100      	movs	r1, #0
 80058ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e056      	b.n	800597e <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a2c      	ldr	r2, [pc, #176]	; (8005988 <HAL_ADC_ConfigChannel+0xfc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d028      	beq.n	800592c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	035b      	lsls	r3, r3, #13
 80058e6:	0b5a      	lsrs	r2, r3, #13
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	2380      	movs	r3, #128	; 0x80
 80058f6:	02db      	lsls	r3, r3, #11
 80058f8:	4013      	ands	r3, r2
 80058fa:	d009      	beq.n	8005910 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80058fc:	4b23      	ldr	r3, [pc, #140]	; (800598c <HAL_ADC_ConfigChannel+0x100>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4b22      	ldr	r3, [pc, #136]	; (800598c <HAL_ADC_ConfigChannel+0x100>)
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	0409      	lsls	r1, r1, #16
 8005906:	430a      	orrs	r2, r1
 8005908:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800590a:	200a      	movs	r0, #10
 800590c:	f000 f8a4 	bl	8005a58 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	029b      	lsls	r3, r3, #10
 8005918:	4013      	ands	r3, r2
 800591a:	d02b      	beq.n	8005974 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800591c:	4b1b      	ldr	r3, [pc, #108]	; (800598c <HAL_ADC_ConfigChannel+0x100>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	4b1a      	ldr	r3, [pc, #104]	; (800598c <HAL_ADC_ConfigChannel+0x100>)
 8005922:	2180      	movs	r1, #128	; 0x80
 8005924:	03c9      	lsls	r1, r1, #15
 8005926:	430a      	orrs	r2, r1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e023      	b.n	8005974 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	035b      	lsls	r3, r3, #13
 8005938:	0b5b      	lsrs	r3, r3, #13
 800593a:	43d9      	mvns	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	400a      	ands	r2, r1
 8005942:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	02db      	lsls	r3, r3, #11
 800594c:	4013      	ands	r3, r2
 800594e:	d005      	beq.n	800595c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005950:	4b0e      	ldr	r3, [pc, #56]	; (800598c <HAL_ADC_ConfigChannel+0x100>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4b0d      	ldr	r3, [pc, #52]	; (800598c <HAL_ADC_ConfigChannel+0x100>)
 8005956:	490e      	ldr	r1, [pc, #56]	; (8005990 <HAL_ADC_ConfigChannel+0x104>)
 8005958:	400a      	ands	r2, r1
 800595a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	029b      	lsls	r3, r3, #10
 8005964:	4013      	ands	r3, r2
 8005966:	d005      	beq.n	8005974 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_ADC_ConfigChannel+0x100>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	4b07      	ldr	r3, [pc, #28]	; (800598c <HAL_ADC_ConfigChannel+0x100>)
 800596e:	4909      	ldr	r1, [pc, #36]	; (8005994 <HAL_ADC_ConfigChannel+0x108>)
 8005970:	400a      	ands	r2, r1
 8005972:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2250      	movs	r2, #80	; 0x50
 8005978:	2100      	movs	r1, #0
 800597a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	0018      	movs	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	00001001 	.word	0x00001001
 800598c:	40012708 	.word	0x40012708
 8005990:	ff7fffff 	.word	0xff7fffff
 8005994:	ffbfffff 	.word	0xffbfffff

08005998 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2203      	movs	r2, #3
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d108      	bne.n	80059c4 <ADC_Enable+0x2c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <ADC_Enable+0x2c>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <ADC_Enable+0x2e>
 80059c4:	2300      	movs	r3, #0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d13f      	bne.n	8005a4a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <ADC_Enable+0xbc>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	d00d      	beq.n	80059f2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059da:	2210      	movs	r2, #16
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e6:	2201      	movs	r2, #1
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e02c      	b.n	8005a4c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2101      	movs	r1, #1
 80059fe:	430a      	orrs	r2, r1
 8005a00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8005a02:	2001      	movs	r0, #1
 8005a04:	f000 f828 	bl	8005a58 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a08:	f7ff fcae 	bl	8005368 <HAL_GetTick>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005a10:	e014      	b.n	8005a3c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a12:	f7ff fca9 	bl	8005368 <HAL_GetTick>
 8005a16:	0002      	movs	r2, r0
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b0a      	cmp	r3, #10
 8005a1e:	d90d      	bls.n	8005a3c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a24:	2210      	movs	r2, #16
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	2201      	movs	r2, #1
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e007      	b.n	8005a4c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2201      	movs	r2, #1
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d1e3      	bne.n	8005a12 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b004      	add	sp, #16
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	80000017 	.word	0x80000017

08005a58 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <ADC_DelayMicroSecond+0x34>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	490a      	ldr	r1, [pc, #40]	; (8005a90 <ADC_DelayMicroSecond+0x38>)
 8005a66:	0018      	movs	r0, r3
 8005a68:	f7fa fb56 	bl	8000118 <__udivsi3>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	001a      	movs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4353      	muls	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8005a76:	e002      	b.n	8005a7e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f9      	bne.n	8005a78 <ADC_DelayMicroSecond+0x20>
  } 
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b004      	add	sp, #16
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000024 	.word	0x20000024
 8005a90:	000f4240 	.word	0x000f4240

08005a94 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	0002      	movs	r2, r0
 8005a9c:	1dfb      	adds	r3, r7, #7
 8005a9e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005aa0:	1dfb      	adds	r3, r7, #7
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	001a      	movs	r2, r3
 8005aa6:	231f      	movs	r3, #31
 8005aa8:	401a      	ands	r2, r3
 8005aaa:	4b04      	ldr	r3, [pc, #16]	; (8005abc <NVIC_EnableIRQ+0x28>)
 8005aac:	2101      	movs	r1, #1
 8005aae:	4091      	lsls	r1, r2
 8005ab0:	000a      	movs	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	e000e100 	.word	0xe000e100

08005ac0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	0002      	movs	r2, r0
 8005ac8:	6039      	str	r1, [r7, #0]
 8005aca:	1dfb      	adds	r3, r7, #7
 8005acc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8005ace:	1dfb      	adds	r3, r7, #7
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad4:	d932      	bls.n	8005b3c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ad6:	4a2f      	ldr	r2, [pc, #188]	; (8005b94 <NVIC_SetPriority+0xd4>)
 8005ad8:	1dfb      	adds	r3, r7, #7
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	0019      	movs	r1, r3
 8005ade:	230f      	movs	r3, #15
 8005ae0:	400b      	ands	r3, r1
 8005ae2:	3b08      	subs	r3, #8
 8005ae4:	089b      	lsrs	r3, r3, #2
 8005ae6:	3306      	adds	r3, #6
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	18d3      	adds	r3, r2, r3
 8005aec:	3304      	adds	r3, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	1dfa      	adds	r2, r7, #7
 8005af2:	7812      	ldrb	r2, [r2, #0]
 8005af4:	0011      	movs	r1, r2
 8005af6:	2203      	movs	r2, #3
 8005af8:	400a      	ands	r2, r1
 8005afa:	00d2      	lsls	r2, r2, #3
 8005afc:	21ff      	movs	r1, #255	; 0xff
 8005afe:	4091      	lsls	r1, r2
 8005b00:	000a      	movs	r2, r1
 8005b02:	43d2      	mvns	r2, r2
 8005b04:	401a      	ands	r2, r3
 8005b06:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	019b      	lsls	r3, r3, #6
 8005b0c:	22ff      	movs	r2, #255	; 0xff
 8005b0e:	401a      	ands	r2, r3
 8005b10:	1dfb      	adds	r3, r7, #7
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	0018      	movs	r0, r3
 8005b16:	2303      	movs	r3, #3
 8005b18:	4003      	ands	r3, r0
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b1e:	481d      	ldr	r0, [pc, #116]	; (8005b94 <NVIC_SetPriority+0xd4>)
 8005b20:	1dfb      	adds	r3, r7, #7
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	001c      	movs	r4, r3
 8005b26:	230f      	movs	r3, #15
 8005b28:	4023      	ands	r3, r4
 8005b2a:	3b08      	subs	r3, #8
 8005b2c:	089b      	lsrs	r3, r3, #2
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	3306      	adds	r3, #6
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	18c3      	adds	r3, r0, r3
 8005b36:	3304      	adds	r3, #4
 8005b38:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005b3a:	e027      	b.n	8005b8c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b3c:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <NVIC_SetPriority+0xd8>)
 8005b3e:	1dfb      	adds	r3, r7, #7
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	33c0      	adds	r3, #192	; 0xc0
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	589b      	ldr	r3, [r3, r2]
 8005b4c:	1dfa      	adds	r2, r7, #7
 8005b4e:	7812      	ldrb	r2, [r2, #0]
 8005b50:	0011      	movs	r1, r2
 8005b52:	2203      	movs	r2, #3
 8005b54:	400a      	ands	r2, r1
 8005b56:	00d2      	lsls	r2, r2, #3
 8005b58:	21ff      	movs	r1, #255	; 0xff
 8005b5a:	4091      	lsls	r1, r2
 8005b5c:	000a      	movs	r2, r1
 8005b5e:	43d2      	mvns	r2, r2
 8005b60:	401a      	ands	r2, r3
 8005b62:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	019b      	lsls	r3, r3, #6
 8005b68:	22ff      	movs	r2, #255	; 0xff
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	1dfb      	adds	r3, r7, #7
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	0018      	movs	r0, r3
 8005b72:	2303      	movs	r3, #3
 8005b74:	4003      	ands	r3, r0
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b7a:	4807      	ldr	r0, [pc, #28]	; (8005b98 <NVIC_SetPriority+0xd8>)
 8005b7c:	1dfb      	adds	r3, r7, #7
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b25b      	sxtb	r3, r3
 8005b82:	089b      	lsrs	r3, r3, #2
 8005b84:	430a      	orrs	r2, r1
 8005b86:	33c0      	adds	r3, #192	; 0xc0
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	501a      	str	r2, [r3, r0]
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b003      	add	sp, #12
 8005b92:	bd90      	pop	{r4, r7, pc}
 8005b94:	e000ed00 	.word	0xe000ed00
 8005b98:	e000e100 	.word	0xe000e100

08005b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <SysTick_Config+0x40>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e010      	b.n	8005bd4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <SysTick_Config+0x44>)
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bba:	2301      	movs	r3, #1
 8005bbc:	425b      	negs	r3, r3
 8005bbe:	2103      	movs	r1, #3
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f7ff ff7d 	bl	8005ac0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <SysTick_Config+0x44>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bcc:	4b04      	ldr	r3, [pc, #16]	; (8005be0 <SysTick_Config+0x44>)
 8005bce:	2207      	movs	r2, #7
 8005bd0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b002      	add	sp, #8
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	00ffffff 	.word	0x00ffffff
 8005be0:	e000e010 	.word	0xe000e010

08005be4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]
 8005bee:	210f      	movs	r1, #15
 8005bf0:	187b      	adds	r3, r7, r1
 8005bf2:	1c02      	adds	r2, r0, #0
 8005bf4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	187b      	adds	r3, r7, r1
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	0011      	movs	r1, r2
 8005c00:	0018      	movs	r0, r3
 8005c02:	f7ff ff5d 	bl	8005ac0 <NVIC_SetPriority>
}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b004      	add	sp, #16
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	0002      	movs	r2, r0
 8005c16:	1dfb      	adds	r3, r7, #7
 8005c18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c1a:	1dfb      	adds	r3, r7, #7
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	0018      	movs	r0, r3
 8005c22:	f7ff ff37 	bl	8005a94 <NVIC_EnableIRQ>
}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b002      	add	sp, #8
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f7ff ffaf 	bl	8005b9c <SysTick_Config>
 8005c3e:	0003      	movs	r3, r0
}
 8005c40:	0018      	movs	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b002      	add	sp, #8
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005c4c:	f000 f803 	bl	8005c56 <HAL_SYSTICK_Callback>
}
 8005c50:	46c0      	nop			; (mov r8, r8)
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005c5a:	46c0      	nop			; (mov r8, r8)
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005c76:	e14f      	b.n	8005f18 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4091      	lsls	r1, r2
 8005c82:	000a      	movs	r2, r1
 8005c84:	4013      	ands	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d100      	bne.n	8005c90 <HAL_GPIO_Init+0x30>
 8005c8e:	e140      	b.n	8005f12 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d003      	beq.n	8005ca0 <HAL_GPIO_Init+0x40>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b12      	cmp	r3, #18
 8005c9e:	d123      	bne.n	8005ce8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	08da      	lsrs	r2, r3, #3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3208      	adds	r2, #8
 8005ca8:	0092      	lsls	r2, r2, #2
 8005caa:	58d3      	ldr	r3, [r2, r3]
 8005cac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	220f      	movs	r2, #15
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	0013      	movs	r3, r2
 8005cbc:	43da      	mvns	r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2107      	movs	r1, #7
 8005ccc:	400b      	ands	r3, r1
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	0013      	movs	r3, r2
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	08da      	lsrs	r2, r3, #3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3208      	adds	r2, #8
 8005ce2:	0092      	lsls	r2, r2, #2
 8005ce4:	6939      	ldr	r1, [r7, #16]
 8005ce6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d00b      	beq.n	8005d08 <HAL_GPIO_Init+0xa8>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d007      	beq.n	8005d08 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cfc:	2b11      	cmp	r3, #17
 8005cfe:	d003      	beq.n	8005d08 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b12      	cmp	r3, #18
 8005d06:	d130      	bne.n	8005d6a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	2203      	movs	r2, #3
 8005d14:	409a      	lsls	r2, r3
 8005d16:	0013      	movs	r3, r2
 8005d18:	43da      	mvns	r2, r3
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	0013      	movs	r3, r2
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d3e:	2201      	movs	r2, #1
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	409a      	lsls	r2, r3
 8005d44:	0013      	movs	r3, r2
 8005d46:	43da      	mvns	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	2201      	movs	r2, #1
 8005d56:	401a      	ands	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	409a      	lsls	r2, r3
 8005d5c:	0013      	movs	r3, r2
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	2203      	movs	r2, #3
 8005d76:	409a      	lsls	r2, r3
 8005d78:	0013      	movs	r3, r2
 8005d7a:	43da      	mvns	r2, r3
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2203      	movs	r2, #3
 8005d88:	401a      	ands	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	0013      	movs	r3, r2
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	2203      	movs	r2, #3
 8005daa:	409a      	lsls	r2, r3
 8005dac:	0013      	movs	r3, r2
 8005dae:	43da      	mvns	r2, r3
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4013      	ands	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	0013      	movs	r3, r2
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	055b      	lsls	r3, r3, #21
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d100      	bne.n	8005ddc <HAL_GPIO_Init+0x17c>
 8005dda:	e09a      	b.n	8005f12 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ddc:	4b54      	ldr	r3, [pc, #336]	; (8005f30 <HAL_GPIO_Init+0x2d0>)
 8005dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de0:	4b53      	ldr	r3, [pc, #332]	; (8005f30 <HAL_GPIO_Init+0x2d0>)
 8005de2:	2101      	movs	r1, #1
 8005de4:	430a      	orrs	r2, r1
 8005de6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8005de8:	4a52      	ldr	r2, [pc, #328]	; (8005f34 <HAL_GPIO_Init+0x2d4>)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	089b      	lsrs	r3, r3, #2
 8005dee:	3302      	adds	r3, #2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	589b      	ldr	r3, [r3, r2]
 8005df4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2203      	movs	r2, #3
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	220f      	movs	r2, #15
 8005e00:	409a      	lsls	r2, r3
 8005e02:	0013      	movs	r3, r2
 8005e04:	43da      	mvns	r2, r3
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	23a0      	movs	r3, #160	; 0xa0
 8005e10:	05db      	lsls	r3, r3, #23
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d019      	beq.n	8005e4a <HAL_GPIO_Init+0x1ea>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a47      	ldr	r2, [pc, #284]	; (8005f38 <HAL_GPIO_Init+0x2d8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_GPIO_Init+0x1e6>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a46      	ldr	r2, [pc, #280]	; (8005f3c <HAL_GPIO_Init+0x2dc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00d      	beq.n	8005e42 <HAL_GPIO_Init+0x1e2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a45      	ldr	r2, [pc, #276]	; (8005f40 <HAL_GPIO_Init+0x2e0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <HAL_GPIO_Init+0x1de>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a44      	ldr	r2, [pc, #272]	; (8005f44 <HAL_GPIO_Init+0x2e4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_GPIO_Init+0x1da>
 8005e36:	2305      	movs	r3, #5
 8005e38:	e008      	b.n	8005e4c <HAL_GPIO_Init+0x1ec>
 8005e3a:	2306      	movs	r3, #6
 8005e3c:	e006      	b.n	8005e4c <HAL_GPIO_Init+0x1ec>
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e004      	b.n	8005e4c <HAL_GPIO_Init+0x1ec>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e002      	b.n	8005e4c <HAL_GPIO_Init+0x1ec>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <HAL_GPIO_Init+0x1ec>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	2103      	movs	r1, #3
 8005e50:	400a      	ands	r2, r1
 8005e52:	0092      	lsls	r2, r2, #2
 8005e54:	4093      	lsls	r3, r2
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e5c:	4935      	ldr	r1, [pc, #212]	; (8005f34 <HAL_GPIO_Init+0x2d4>)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	089b      	lsrs	r3, r3, #2
 8005e62:	3302      	adds	r3, #2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e6a:	4b37      	ldr	r3, [pc, #220]	; (8005f48 <HAL_GPIO_Init+0x2e8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	43da      	mvns	r2, r3
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4013      	ands	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	025b      	lsls	r3, r3, #9
 8005e82:	4013      	ands	r3, r2
 8005e84:	d003      	beq.n	8005e8e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <HAL_GPIO_Init+0x2e8>)
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005e94:	4b2c      	ldr	r3, [pc, #176]	; (8005f48 <HAL_GPIO_Init+0x2e8>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	43da      	mvns	r2, r3
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	029b      	lsls	r3, r3, #10
 8005eac:	4013      	ands	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005eb8:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <HAL_GPIO_Init+0x2e8>)
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <HAL_GPIO_Init+0x2e8>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	43da      	mvns	r2, r3
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	2380      	movs	r3, #128	; 0x80
 8005ed4:	035b      	lsls	r3, r3, #13
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005ee2:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <HAL_GPIO_Init+0x2e8>)
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005ee8:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <HAL_GPIO_Init+0x2e8>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	43da      	mvns	r2, r3
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	039b      	lsls	r3, r3, #14
 8005f00:	4013      	ands	r3, r2
 8005f02:	d003      	beq.n	8005f0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <HAL_GPIO_Init+0x2e8>)
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	3301      	adds	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	40da      	lsrs	r2, r3
 8005f20:	1e13      	subs	r3, r2, #0
 8005f22:	d000      	beq.n	8005f26 <HAL_GPIO_Init+0x2c6>
 8005f24:	e6a8      	b.n	8005c78 <HAL_GPIO_Init+0x18>
  }
}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b006      	add	sp, #24
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40010000 	.word	0x40010000
 8005f38:	50000400 	.word	0x50000400
 8005f3c:	50000800 	.word	0x50000800
 8005f40:	50000c00 	.word	0x50000c00
 8005f44:	50001c00 	.word	0x50001c00
 8005f48:	40010400 	.word	0x40010400

08005f4c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	0008      	movs	r0, r1
 8005f56:	0011      	movs	r1, r2
 8005f58:	1cbb      	adds	r3, r7, #2
 8005f5a:	1c02      	adds	r2, r0, #0
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	1c7b      	adds	r3, r7, #1
 8005f60:	1c0a      	adds	r2, r1, #0
 8005f62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005f64:	1c7b      	adds	r3, r7, #1
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f6c:	1cbb      	adds	r3, r7, #2
 8005f6e:	881a      	ldrh	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005f74:	e003      	b.n	8005f7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005f76:	1cbb      	adds	r3, r7, #2
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b002      	add	sp, #8
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e082      	b.n	80060a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2241      	movs	r2, #65	; 0x41
 8005f9e:	5c9b      	ldrb	r3, [r3, r2]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2240      	movs	r2, #64	; 0x40
 8005faa:	2100      	movs	r1, #0
 8005fac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f7fc fa9b 	bl	80024ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2241      	movs	r2, #65	; 0x41
 8005fba:	2124      	movs	r1, #36	; 0x24
 8005fbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2101      	movs	r1, #1
 8005fca:	438a      	bics	r2, r1
 8005fcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4934      	ldr	r1, [pc, #208]	; (80060a8 <HAL_I2C_Init+0x120>)
 8005fd8:	400a      	ands	r2, r1
 8005fda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4931      	ldr	r1, [pc, #196]	; (80060ac <HAL_I2C_Init+0x124>)
 8005fe8:	400a      	ands	r2, r1
 8005fea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d108      	bne.n	8006006 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2180      	movs	r1, #128	; 0x80
 8005ffe:	0209      	lsls	r1, r1, #8
 8006000:	430a      	orrs	r2, r1
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	e007      	b.n	8006016 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2184      	movs	r1, #132	; 0x84
 8006010:	0209      	lsls	r1, r1, #8
 8006012:	430a      	orrs	r2, r1
 8006014:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	2b02      	cmp	r3, #2
 800601c:	d104      	bne.n	8006028 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2280      	movs	r2, #128	; 0x80
 8006024:	0112      	lsls	r2, r2, #4
 8006026:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	491f      	ldr	r1, [pc, #124]	; (80060b0 <HAL_I2C_Init+0x128>)
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	491a      	ldr	r1, [pc, #104]	; (80060ac <HAL_I2C_Init+0x124>)
 8006044:	400a      	ands	r2, r1
 8006046:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	431a      	orrs	r2, r3
 8006052:	0011      	movs	r1, r2
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	021a      	lsls	r2, r3, #8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69d9      	ldr	r1, [r3, #28]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1a      	ldr	r2, [r3, #32]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2101      	movs	r1, #1
 800607e:	430a      	orrs	r2, r1
 8006080:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2241      	movs	r2, #65	; 0x41
 800608c:	2120      	movs	r1, #32
 800608e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2242      	movs	r2, #66	; 0x42
 800609a:	2100      	movs	r1, #0
 800609c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	0018      	movs	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b002      	add	sp, #8
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	f0ffffff 	.word	0xf0ffffff
 80060ac:	ffff7fff 	.word	0xffff7fff
 80060b0:	02008000 	.word	0x02008000

080060b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b089      	sub	sp, #36	; 0x24
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	000c      	movs	r4, r1
 80060be:	0010      	movs	r0, r2
 80060c0:	0019      	movs	r1, r3
 80060c2:	230a      	movs	r3, #10
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	1c22      	adds	r2, r4, #0
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	2308      	movs	r3, #8
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	1c02      	adds	r2, r0, #0
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	1dbb      	adds	r3, r7, #6
 80060d4:	1c0a      	adds	r2, r1, #0
 80060d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2241      	movs	r2, #65	; 0x41
 80060dc:	5c9b      	ldrb	r3, [r3, r2]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d000      	beq.n	80060e6 <HAL_I2C_Mem_Write+0x32>
 80060e4:	e10c      	b.n	8006300 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <HAL_I2C_Mem_Write+0x42>
 80060ec:	232c      	movs	r3, #44	; 0x2c
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d105      	bne.n	8006102 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2280      	movs	r2, #128	; 0x80
 80060fa:	0092      	lsls	r2, r2, #2
 80060fc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e0ff      	b.n	8006302 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2240      	movs	r2, #64	; 0x40
 8006106:	5c9b      	ldrb	r3, [r3, r2]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_I2C_Mem_Write+0x5c>
 800610c:	2302      	movs	r3, #2
 800610e:	e0f8      	b.n	8006302 <HAL_I2C_Mem_Write+0x24e>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	2101      	movs	r1, #1
 8006116:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006118:	f7ff f926 	bl	8005368 <HAL_GetTick>
 800611c:	0003      	movs	r3, r0
 800611e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	0219      	lsls	r1, r3, #8
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	2319      	movs	r3, #25
 800612c:	2201      	movs	r2, #1
 800612e:	f000 fb0b 	bl	8006748 <I2C_WaitOnFlagUntilTimeout>
 8006132:	1e03      	subs	r3, r0, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e0e3      	b.n	8006302 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2241      	movs	r2, #65	; 0x41
 800613e:	2121      	movs	r1, #33	; 0x21
 8006140:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2242      	movs	r2, #66	; 0x42
 8006146:	2140      	movs	r1, #64	; 0x40
 8006148:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	222c      	movs	r2, #44	; 0x2c
 800615a:	18ba      	adds	r2, r7, r2
 800615c:	8812      	ldrh	r2, [r2, #0]
 800615e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006166:	1dbb      	adds	r3, r7, #6
 8006168:	881c      	ldrh	r4, [r3, #0]
 800616a:	2308      	movs	r3, #8
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	881a      	ldrh	r2, [r3, #0]
 8006170:	230a      	movs	r3, #10
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	8819      	ldrh	r1, [r3, #0]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	9301      	str	r3, [sp, #4]
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	0023      	movs	r3, r4
 8006182:	f000 f9f9 	bl	8006578 <I2C_RequestMemoryWrite>
 8006186:	1e03      	subs	r3, r0, #0
 8006188:	d005      	beq.n	8006196 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2240      	movs	r2, #64	; 0x40
 800618e:	2100      	movs	r1, #0
 8006190:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e0b5      	b.n	8006302 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	2bff      	cmp	r3, #255	; 0xff
 800619e:	d911      	bls.n	80061c4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	22ff      	movs	r2, #255	; 0xff
 80061a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	045c      	lsls	r4, r3, #17
 80061b0:	230a      	movs	r3, #10
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	8819      	ldrh	r1, [r3, #0]
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	2300      	movs	r3, #0
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	0023      	movs	r3, r4
 80061be:	f000 fbe3 	bl	8006988 <I2C_TransferConfig>
 80061c2:	e012      	b.n	80061ea <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	049c      	lsls	r4, r3, #18
 80061d8:	230a      	movs	r3, #10
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	8819      	ldrh	r1, [r3, #0]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	2300      	movs	r3, #0
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	0023      	movs	r3, r4
 80061e6:	f000 fbcf 	bl	8006988 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f000 fae8 	bl	80067c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80061f6:	1e03      	subs	r3, r0, #0
 80061f8:	d001      	beq.n	80061fe <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e081      	b.n	8006302 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	781a      	ldrb	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d03a      	beq.n	80062ae <HAL_I2C_Mem_Write+0x1fa>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623c:	2b00      	cmp	r3, #0
 800623e:	d136      	bne.n	80062ae <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	0013      	movs	r3, r2
 800624a:	2200      	movs	r2, #0
 800624c:	2180      	movs	r1, #128	; 0x80
 800624e:	f000 fa7b 	bl	8006748 <I2C_WaitOnFlagUntilTimeout>
 8006252:	1e03      	subs	r3, r0, #0
 8006254:	d001      	beq.n	800625a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e053      	b.n	8006302 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	2bff      	cmp	r3, #255	; 0xff
 8006262:	d911      	bls.n	8006288 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	22ff      	movs	r2, #255	; 0xff
 8006268:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626e:	b2da      	uxtb	r2, r3
 8006270:	2380      	movs	r3, #128	; 0x80
 8006272:	045c      	lsls	r4, r3, #17
 8006274:	230a      	movs	r3, #10
 8006276:	18fb      	adds	r3, r7, r3
 8006278:	8819      	ldrh	r1, [r3, #0]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	0023      	movs	r3, r4
 8006282:	f000 fb81 	bl	8006988 <I2C_TransferConfig>
 8006286:	e012      	b.n	80062ae <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	b2da      	uxtb	r2, r3
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	049c      	lsls	r4, r3, #18
 800629c:	230a      	movs	r3, #10
 800629e:	18fb      	adds	r3, r7, r3
 80062a0:	8819      	ldrh	r1, [r3, #0]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	2300      	movs	r3, #0
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	0023      	movs	r3, r4
 80062aa:	f000 fb6d 	bl	8006988 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d198      	bne.n	80061ea <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	0018      	movs	r0, r3
 80062c0:	f000 fac0 	bl	8006844 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062c4:	1e03      	subs	r3, r0, #0
 80062c6:	d001      	beq.n	80062cc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e01a      	b.n	8006302 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2220      	movs	r2, #32
 80062d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	490b      	ldr	r1, [pc, #44]	; (800630c <HAL_I2C_Mem_Write+0x258>)
 80062e0:	400a      	ands	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2241      	movs	r2, #65	; 0x41
 80062e8:	2120      	movs	r1, #32
 80062ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2242      	movs	r2, #66	; 0x42
 80062f0:	2100      	movs	r1, #0
 80062f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2240      	movs	r2, #64	; 0x40
 80062f8:	2100      	movs	r1, #0
 80062fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	e000      	b.n	8006302 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006300:	2302      	movs	r3, #2
  }
}
 8006302:	0018      	movs	r0, r3
 8006304:	46bd      	mov	sp, r7
 8006306:	b007      	add	sp, #28
 8006308:	bd90      	pop	{r4, r7, pc}
 800630a:	46c0      	nop			; (mov r8, r8)
 800630c:	fe00e800 	.word	0xfe00e800

08006310 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006310:	b590      	push	{r4, r7, lr}
 8006312:	b089      	sub	sp, #36	; 0x24
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	000c      	movs	r4, r1
 800631a:	0010      	movs	r0, r2
 800631c:	0019      	movs	r1, r3
 800631e:	230a      	movs	r3, #10
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	1c22      	adds	r2, r4, #0
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	2308      	movs	r3, #8
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	1c02      	adds	r2, r0, #0
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	1dbb      	adds	r3, r7, #6
 8006330:	1c0a      	adds	r2, r1, #0
 8006332:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2241      	movs	r2, #65	; 0x41
 8006338:	5c9b      	ldrb	r3, [r3, r2]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b20      	cmp	r3, #32
 800633e:	d000      	beq.n	8006342 <HAL_I2C_Mem_Read+0x32>
 8006340:	e110      	b.n	8006564 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d004      	beq.n	8006352 <HAL_I2C_Mem_Read+0x42>
 8006348:	232c      	movs	r3, #44	; 0x2c
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d105      	bne.n	800635e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2280      	movs	r2, #128	; 0x80
 8006356:	0092      	lsls	r2, r2, #2
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e103      	b.n	8006566 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2240      	movs	r2, #64	; 0x40
 8006362:	5c9b      	ldrb	r3, [r3, r2]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_I2C_Mem_Read+0x5c>
 8006368:	2302      	movs	r3, #2
 800636a:	e0fc      	b.n	8006566 <HAL_I2C_Mem_Read+0x256>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2240      	movs	r2, #64	; 0x40
 8006370:	2101      	movs	r1, #1
 8006372:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006374:	f7fe fff8 	bl	8005368 <HAL_GetTick>
 8006378:	0003      	movs	r3, r0
 800637a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800637c:	2380      	movs	r3, #128	; 0x80
 800637e:	0219      	lsls	r1, r3, #8
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	2319      	movs	r3, #25
 8006388:	2201      	movs	r2, #1
 800638a:	f000 f9dd 	bl	8006748 <I2C_WaitOnFlagUntilTimeout>
 800638e:	1e03      	subs	r3, r0, #0
 8006390:	d001      	beq.n	8006396 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e0e7      	b.n	8006566 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2241      	movs	r2, #65	; 0x41
 800639a:	2122      	movs	r1, #34	; 0x22
 800639c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2242      	movs	r2, #66	; 0x42
 80063a2:	2140      	movs	r1, #64	; 0x40
 80063a4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	222c      	movs	r2, #44	; 0x2c
 80063b6:	18ba      	adds	r2, r7, r2
 80063b8:	8812      	ldrh	r2, [r2, #0]
 80063ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063c2:	1dbb      	adds	r3, r7, #6
 80063c4:	881c      	ldrh	r4, [r3, #0]
 80063c6:	2308      	movs	r3, #8
 80063c8:	18fb      	adds	r3, r7, r3
 80063ca:	881a      	ldrh	r2, [r3, #0]
 80063cc:	230a      	movs	r3, #10
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	8819      	ldrh	r1, [r3, #0]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	9301      	str	r3, [sp, #4]
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	0023      	movs	r3, r4
 80063de:	f000 f92f 	bl	8006640 <I2C_RequestMemoryRead>
 80063e2:	1e03      	subs	r3, r0, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2240      	movs	r2, #64	; 0x40
 80063ea:	2100      	movs	r1, #0
 80063ec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e0b9      	b.n	8006566 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2bff      	cmp	r3, #255	; 0xff
 80063fa:	d911      	bls.n	8006420 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	22ff      	movs	r2, #255	; 0xff
 8006400:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006406:	b2da      	uxtb	r2, r3
 8006408:	2380      	movs	r3, #128	; 0x80
 800640a:	045c      	lsls	r4, r3, #17
 800640c:	230a      	movs	r3, #10
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	8819      	ldrh	r1, [r3, #0]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	4b56      	ldr	r3, [pc, #344]	; (8006570 <HAL_I2C_Mem_Read+0x260>)
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	0023      	movs	r3, r4
 800641a:	f000 fab5 	bl	8006988 <I2C_TransferConfig>
 800641e:	e012      	b.n	8006446 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642e:	b2da      	uxtb	r2, r3
 8006430:	2380      	movs	r3, #128	; 0x80
 8006432:	049c      	lsls	r4, r3, #18
 8006434:	230a      	movs	r3, #10
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	8819      	ldrh	r1, [r3, #0]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	4b4c      	ldr	r3, [pc, #304]	; (8006570 <HAL_I2C_Mem_Read+0x260>)
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	0023      	movs	r3, r4
 8006442:	f000 faa1 	bl	8006988 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	0013      	movs	r3, r2
 8006450:	2200      	movs	r2, #0
 8006452:	2104      	movs	r1, #4
 8006454:	f000 f978 	bl	8006748 <I2C_WaitOnFlagUntilTimeout>
 8006458:	1e03      	subs	r3, r0, #0
 800645a:	d001      	beq.n	8006460 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e082      	b.n	8006566 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d03a      	beq.n	8006512 <HAL_I2C_Mem_Read+0x202>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d136      	bne.n	8006512 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	0013      	movs	r3, r2
 80064ae:	2200      	movs	r2, #0
 80064b0:	2180      	movs	r1, #128	; 0x80
 80064b2:	f000 f949 	bl	8006748 <I2C_WaitOnFlagUntilTimeout>
 80064b6:	1e03      	subs	r3, r0, #0
 80064b8:	d001      	beq.n	80064be <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e053      	b.n	8006566 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2bff      	cmp	r3, #255	; 0xff
 80064c6:	d911      	bls.n	80064ec <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	22ff      	movs	r2, #255	; 0xff
 80064cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	045c      	lsls	r4, r3, #17
 80064d8:	230a      	movs	r3, #10
 80064da:	18fb      	adds	r3, r7, r3
 80064dc:	8819      	ldrh	r1, [r3, #0]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	2300      	movs	r3, #0
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	0023      	movs	r3, r4
 80064e6:	f000 fa4f 	bl	8006988 <I2C_TransferConfig>
 80064ea:	e012      	b.n	8006512 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	049c      	lsls	r4, r3, #18
 8006500:	230a      	movs	r3, #10
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	8819      	ldrh	r1, [r3, #0]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	2300      	movs	r3, #0
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	0023      	movs	r3, r4
 800650e:	f000 fa3b 	bl	8006988 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d194      	bne.n	8006446 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	0018      	movs	r0, r3
 8006524:	f000 f98e 	bl	8006844 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006528:	1e03      	subs	r3, r0, #0
 800652a:	d001      	beq.n	8006530 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e01a      	b.n	8006566 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2220      	movs	r2, #32
 8006536:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	490c      	ldr	r1, [pc, #48]	; (8006574 <HAL_I2C_Mem_Read+0x264>)
 8006544:	400a      	ands	r2, r1
 8006546:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2241      	movs	r2, #65	; 0x41
 800654c:	2120      	movs	r1, #32
 800654e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2242      	movs	r2, #66	; 0x42
 8006554:	2100      	movs	r1, #0
 8006556:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2240      	movs	r2, #64	; 0x40
 800655c:	2100      	movs	r1, #0
 800655e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	e000      	b.n	8006566 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8006564:	2302      	movs	r3, #2
  }
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b007      	add	sp, #28
 800656c:	bd90      	pop	{r4, r7, pc}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	80002400 	.word	0x80002400
 8006574:	fe00e800 	.word	0xfe00e800

08006578 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006578:	b5b0      	push	{r4, r5, r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af02      	add	r7, sp, #8
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	000c      	movs	r4, r1
 8006582:	0010      	movs	r0, r2
 8006584:	0019      	movs	r1, r3
 8006586:	250a      	movs	r5, #10
 8006588:	197b      	adds	r3, r7, r5
 800658a:	1c22      	adds	r2, r4, #0
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	2308      	movs	r3, #8
 8006590:	18fb      	adds	r3, r7, r3
 8006592:	1c02      	adds	r2, r0, #0
 8006594:	801a      	strh	r2, [r3, #0]
 8006596:	1dbb      	adds	r3, r7, #6
 8006598:	1c0a      	adds	r2, r1, #0
 800659a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800659c:	1dbb      	adds	r3, r7, #6
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	2380      	movs	r3, #128	; 0x80
 80065a4:	045c      	lsls	r4, r3, #17
 80065a6:	197b      	adds	r3, r7, r5
 80065a8:	8819      	ldrh	r1, [r3, #0]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	4b23      	ldr	r3, [pc, #140]	; (800663c <I2C_RequestMemoryWrite+0xc4>)
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	0023      	movs	r3, r4
 80065b2:	f000 f9e9 	bl	8006988 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b8:	6a39      	ldr	r1, [r7, #32]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 f902 	bl	80067c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80065c2:	1e03      	subs	r3, r0, #0
 80065c4:	d001      	beq.n	80065ca <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e033      	b.n	8006632 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065ca:	1dbb      	adds	r3, r7, #6
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d107      	bne.n	80065e2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065d2:	2308      	movs	r3, #8
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	629a      	str	r2, [r3, #40]	; 0x28
 80065e0:	e019      	b.n	8006616 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065e2:	2308      	movs	r3, #8
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	0a1b      	lsrs	r3, r3, #8
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	6a39      	ldr	r1, [r7, #32]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	0018      	movs	r0, r3
 80065fc:	f000 f8e3 	bl	80067c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006600:	1e03      	subs	r3, r0, #0
 8006602:	d001      	beq.n	8006608 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e014      	b.n	8006632 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006608:	2308      	movs	r3, #8
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006616:	6a3a      	ldr	r2, [r7, #32]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	0013      	movs	r3, r2
 8006620:	2200      	movs	r2, #0
 8006622:	2180      	movs	r1, #128	; 0x80
 8006624:	f000 f890 	bl	8006748 <I2C_WaitOnFlagUntilTimeout>
 8006628:	1e03      	subs	r3, r0, #0
 800662a:	d001      	beq.n	8006630 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	0018      	movs	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	b004      	add	sp, #16
 8006638:	bdb0      	pop	{r4, r5, r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	80002000 	.word	0x80002000

08006640 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006640:	b5b0      	push	{r4, r5, r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	000c      	movs	r4, r1
 800664a:	0010      	movs	r0, r2
 800664c:	0019      	movs	r1, r3
 800664e:	250a      	movs	r5, #10
 8006650:	197b      	adds	r3, r7, r5
 8006652:	1c22      	adds	r2, r4, #0
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	2308      	movs	r3, #8
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	1c02      	adds	r2, r0, #0
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	1dbb      	adds	r3, r7, #6
 8006660:	1c0a      	adds	r2, r1, #0
 8006662:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006664:	1dbb      	adds	r3, r7, #6
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b2da      	uxtb	r2, r3
 800666a:	197b      	adds	r3, r7, r5
 800666c:	8819      	ldrh	r1, [r3, #0]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	4b23      	ldr	r3, [pc, #140]	; (8006700 <I2C_RequestMemoryRead+0xc0>)
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	2300      	movs	r3, #0
 8006676:	f000 f987 	bl	8006988 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	6a39      	ldr	r1, [r7, #32]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	0018      	movs	r0, r3
 8006682:	f000 f8a0 	bl	80067c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006686:	1e03      	subs	r3, r0, #0
 8006688:	d001      	beq.n	800668e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e033      	b.n	80066f6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800668e:	1dbb      	adds	r3, r7, #6
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d107      	bne.n	80066a6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006696:	2308      	movs	r3, #8
 8006698:	18fb      	adds	r3, r7, r3
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b2da      	uxtb	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	629a      	str	r2, [r3, #40]	; 0x28
 80066a4:	e019      	b.n	80066da <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066a6:	2308      	movs	r3, #8
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	0a1b      	lsrs	r3, r3, #8
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ba:	6a39      	ldr	r1, [r7, #32]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	0018      	movs	r0, r3
 80066c0:	f000 f881 	bl	80067c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80066c4:	1e03      	subs	r3, r0, #0
 80066c6:	d001      	beq.n	80066cc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e014      	b.n	80066f6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066cc:	2308      	movs	r3, #8
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	0013      	movs	r3, r2
 80066e4:	2200      	movs	r2, #0
 80066e6:	2140      	movs	r1, #64	; 0x40
 80066e8:	f000 f82e 	bl	8006748 <I2C_WaitOnFlagUntilTimeout>
 80066ec:	1e03      	subs	r3, r0, #0
 80066ee:	d001      	beq.n	80066f4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	0018      	movs	r0, r3
 80066f8:	46bd      	mov	sp, r7
 80066fa:	b004      	add	sp, #16
 80066fc:	bdb0      	pop	{r4, r5, r7, pc}
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	80002000 	.word	0x80002000

08006704 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	2202      	movs	r2, #2
 8006714:	4013      	ands	r3, r2
 8006716:	2b02      	cmp	r3, #2
 8006718:	d103      	bne.n	8006722 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	2201      	movs	r2, #1
 800672a:	4013      	ands	r3, r2
 800672c:	2b01      	cmp	r3, #1
 800672e:	d007      	beq.n	8006740 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2101      	movs	r1, #1
 800673c:	430a      	orrs	r2, r1
 800673e:	619a      	str	r2, [r3, #24]
  }
}
 8006740:	46c0      	nop			; (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b002      	add	sp, #8
 8006746:	bd80      	pop	{r7, pc}

08006748 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	1dfb      	adds	r3, r7, #7
 8006756:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006758:	e021      	b.n	800679e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	d01e      	beq.n	800679e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006760:	f7fe fe02 	bl	8005368 <HAL_GetTick>
 8006764:	0002      	movs	r2, r0
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d302      	bcc.n	8006776 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d113      	bne.n	800679e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	2220      	movs	r2, #32
 800677c:	431a      	orrs	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2241      	movs	r2, #65	; 0x41
 8006786:	2120      	movs	r1, #32
 8006788:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2242      	movs	r2, #66	; 0x42
 800678e:	2100      	movs	r1, #0
 8006790:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2240      	movs	r2, #64	; 0x40
 8006796:	2100      	movs	r1, #0
 8006798:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e00f      	b.n	80067be <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	4013      	ands	r3, r2
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	425a      	negs	r2, r3
 80067ae:	4153      	adcs	r3, r2
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	001a      	movs	r2, r3
 80067b4:	1dfb      	adds	r3, r7, #7
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d0ce      	beq.n	800675a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	0018      	movs	r0, r3
 80067c0:	46bd      	mov	sp, r7
 80067c2:	b004      	add	sp, #16
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067d2:	e02b      	b.n	800682c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	0018      	movs	r0, r3
 80067dc:	f000 f86e 	bl	80068bc <I2C_IsAcknowledgeFailed>
 80067e0:	1e03      	subs	r3, r0, #0
 80067e2:	d001      	beq.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e029      	b.n	800683c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3301      	adds	r3, #1
 80067ec:	d01e      	beq.n	800682c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ee:	f7fe fdbb 	bl	8005368 <HAL_GetTick>
 80067f2:	0002      	movs	r2, r0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d302      	bcc.n	8006804 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d113      	bne.n	800682c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006808:	2220      	movs	r2, #32
 800680a:	431a      	orrs	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2241      	movs	r2, #65	; 0x41
 8006814:	2120      	movs	r1, #32
 8006816:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2242      	movs	r2, #66	; 0x42
 800681c:	2100      	movs	r1, #0
 800681e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2240      	movs	r2, #64	; 0x40
 8006824:	2100      	movs	r1, #0
 8006826:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e007      	b.n	800683c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2202      	movs	r2, #2
 8006834:	4013      	ands	r3, r2
 8006836:	2b02      	cmp	r3, #2
 8006838:	d1cc      	bne.n	80067d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b004      	add	sp, #16
 8006842:	bd80      	pop	{r7, pc}

08006844 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006850:	e028      	b.n	80068a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	0018      	movs	r0, r3
 800685a:	f000 f82f 	bl	80068bc <I2C_IsAcknowledgeFailed>
 800685e:	1e03      	subs	r3, r0, #0
 8006860:	d001      	beq.n	8006866 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e026      	b.n	80068b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006866:	f7fe fd7f 	bl	8005368 <HAL_GetTick>
 800686a:	0002      	movs	r2, r0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d113      	bne.n	80068a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006880:	2220      	movs	r2, #32
 8006882:	431a      	orrs	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2241      	movs	r2, #65	; 0x41
 800688c:	2120      	movs	r1, #32
 800688e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2242      	movs	r2, #66	; 0x42
 8006894:	2100      	movs	r1, #0
 8006896:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2240      	movs	r2, #64	; 0x40
 800689c:	2100      	movs	r1, #0
 800689e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e007      	b.n	80068b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2220      	movs	r2, #32
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	d1cf      	bne.n	8006852 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	0018      	movs	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	b004      	add	sp, #16
 80068ba:	bd80      	pop	{r7, pc}

080068bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	2210      	movs	r2, #16
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b10      	cmp	r3, #16
 80068d4:	d151      	bne.n	800697a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068d6:	e021      	b.n	800691c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	3301      	adds	r3, #1
 80068dc:	d01e      	beq.n	800691c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068de:	f7fe fd43 	bl	8005368 <HAL_GetTick>
 80068e2:	0002      	movs	r2, r0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d302      	bcc.n	80068f4 <I2C_IsAcknowledgeFailed+0x38>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d113      	bne.n	800691c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f8:	2220      	movs	r2, #32
 80068fa:	431a      	orrs	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2241      	movs	r2, #65	; 0x41
 8006904:	2120      	movs	r1, #32
 8006906:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2242      	movs	r2, #66	; 0x42
 800690c:	2100      	movs	r1, #0
 800690e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2240      	movs	r2, #64	; 0x40
 8006914:	2100      	movs	r1, #0
 8006916:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e02f      	b.n	800697c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2220      	movs	r2, #32
 8006924:	4013      	ands	r3, r2
 8006926:	2b20      	cmp	r3, #32
 8006928:	d1d6      	bne.n	80068d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2210      	movs	r2, #16
 8006930:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2220      	movs	r2, #32
 8006938:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	0018      	movs	r0, r3
 800693e:	f7ff fee1 	bl	8006704 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	490d      	ldr	r1, [pc, #52]	; (8006984 <I2C_IsAcknowledgeFailed+0xc8>)
 800694e:	400a      	ands	r2, r1
 8006950:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	2204      	movs	r2, #4
 8006958:	431a      	orrs	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2241      	movs	r2, #65	; 0x41
 8006962:	2120      	movs	r1, #32
 8006964:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2242      	movs	r2, #66	; 0x42
 800696a:	2100      	movs	r1, #0
 800696c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2240      	movs	r2, #64	; 0x40
 8006972:	2100      	movs	r1, #0
 8006974:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	0018      	movs	r0, r3
 800697e:	46bd      	mov	sp, r7
 8006980:	b004      	add	sp, #16
 8006982:	bd80      	pop	{r7, pc}
 8006984:	fe00e800 	.word	0xfe00e800

08006988 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006988:	b590      	push	{r4, r7, lr}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	0008      	movs	r0, r1
 8006992:	0011      	movs	r1, r2
 8006994:	607b      	str	r3, [r7, #4]
 8006996:	240a      	movs	r4, #10
 8006998:	193b      	adds	r3, r7, r4
 800699a:	1c02      	adds	r2, r0, #0
 800699c:	801a      	strh	r2, [r3, #0]
 800699e:	2009      	movs	r0, #9
 80069a0:	183b      	adds	r3, r7, r0
 80069a2:	1c0a      	adds	r2, r1, #0
 80069a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	6a3a      	ldr	r2, [r7, #32]
 80069ae:	0d51      	lsrs	r1, r2, #21
 80069b0:	2280      	movs	r2, #128	; 0x80
 80069b2:	00d2      	lsls	r2, r2, #3
 80069b4:	400a      	ands	r2, r1
 80069b6:	490e      	ldr	r1, [pc, #56]	; (80069f0 <I2C_TransferConfig+0x68>)
 80069b8:	430a      	orrs	r2, r1
 80069ba:	43d2      	mvns	r2, r2
 80069bc:	401a      	ands	r2, r3
 80069be:	0011      	movs	r1, r2
 80069c0:	193b      	adds	r3, r7, r4
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	059b      	lsls	r3, r3, #22
 80069c6:	0d9a      	lsrs	r2, r3, #22
 80069c8:	183b      	adds	r3, r7, r0
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	0418      	lsls	r0, r3, #16
 80069ce:	23ff      	movs	r3, #255	; 0xff
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	4003      	ands	r3, r0
 80069d4:	431a      	orrs	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	431a      	orrs	r2, r3
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	46bd      	mov	sp, r7
 80069ea:	b005      	add	sp, #20
 80069ec:	bd90      	pop	{r4, r7, pc}
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	03ff63ff 	.word	0x03ff63ff

080069f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2241      	movs	r2, #65	; 0x41
 8006a02:	5c9b      	ldrb	r3, [r3, r2]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d138      	bne.n	8006a7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2240      	movs	r2, #64	; 0x40
 8006a0e:	5c9b      	ldrb	r3, [r3, r2]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e032      	b.n	8006a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2240      	movs	r2, #64	; 0x40
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2241      	movs	r2, #65	; 0x41
 8006a24:	2124      	movs	r1, #36	; 0x24
 8006a26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2101      	movs	r1, #1
 8006a34:	438a      	bics	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4911      	ldr	r1, [pc, #68]	; (8006a88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006a44:	400a      	ands	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6819      	ldr	r1, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2101      	movs	r1, #1
 8006a64:	430a      	orrs	r2, r1
 8006a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2241      	movs	r2, #65	; 0x41
 8006a6c:	2120      	movs	r1, #32
 8006a6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2240      	movs	r2, #64	; 0x40
 8006a74:	2100      	movs	r1, #0
 8006a76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	0018      	movs	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	b002      	add	sp, #8
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	ffffefff 	.word	0xffffefff

08006a8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2241      	movs	r2, #65	; 0x41
 8006a9a:	5c9b      	ldrb	r3, [r3, r2]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d139      	bne.n	8006b16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2240      	movs	r2, #64	; 0x40
 8006aa6:	5c9b      	ldrb	r3, [r3, r2]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e033      	b.n	8006b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2240      	movs	r2, #64	; 0x40
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2241      	movs	r2, #65	; 0x41
 8006abc:	2124      	movs	r1, #36	; 0x24
 8006abe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2101      	movs	r1, #1
 8006acc:	438a      	bics	r2, r1
 8006ace:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4a11      	ldr	r2, [pc, #68]	; (8006b20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2101      	movs	r1, #1
 8006afe:	430a      	orrs	r2, r1
 8006b00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2241      	movs	r2, #65	; 0x41
 8006b06:	2120      	movs	r1, #32
 8006b08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2240      	movs	r2, #64	; 0x40
 8006b0e:	2100      	movs	r1, #0
 8006b10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e000      	b.n	8006b18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b16:	2302      	movs	r3, #2
  }
}
 8006b18:	0018      	movs	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b004      	add	sp, #16
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	fffff0ff 	.word	0xfffff0ff

08006b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b24:	b5b0      	push	{r4, r5, r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f000 fb58 	bl	80071e8 <HAL_RCC_OscConfig+0x6c4>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b38:	4bcd      	ldr	r3, [pc, #820]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	220c      	movs	r2, #12
 8006b3e:	4013      	ands	r3, r2
 8006b40:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b42:	4bcb      	ldr	r3, [pc, #812]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	2380      	movs	r3, #128	; 0x80
 8006b48:	025b      	lsls	r3, r3, #9
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2201      	movs	r2, #1
 8006b54:	4013      	ands	r3, r2
 8006b56:	d100      	bne.n	8006b5a <HAL_RCC_OscConfig+0x36>
 8006b58:	e07c      	b.n	8006c54 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d007      	beq.n	8006b70 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	2b0c      	cmp	r3, #12
 8006b64:	d111      	bne.n	8006b8a <HAL_RCC_OscConfig+0x66>
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	2380      	movs	r3, #128	; 0x80
 8006b6a:	025b      	lsls	r3, r3, #9
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d10c      	bne.n	8006b8a <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b70:	4bbf      	ldr	r3, [pc, #764]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	029b      	lsls	r3, r3, #10
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d100      	bne.n	8006b7e <HAL_RCC_OscConfig+0x5a>
 8006b7c:	e069      	b.n	8006c52 <HAL_RCC_OscConfig+0x12e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d165      	bne.n	8006c52 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e32e      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	2380      	movs	r3, #128	; 0x80
 8006b90:	025b      	lsls	r3, r3, #9
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x82>
 8006b96:	4bb6      	ldr	r3, [pc, #728]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4bb5      	ldr	r3, [pc, #724]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006b9c:	2180      	movs	r1, #128	; 0x80
 8006b9e:	0249      	lsls	r1, r1, #9
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e027      	b.n	8006bf6 <HAL_RCC_OscConfig+0xd2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	23a0      	movs	r3, #160	; 0xa0
 8006bac:	02db      	lsls	r3, r3, #11
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_RCC_OscConfig+0xac>
 8006bb2:	4baf      	ldr	r3, [pc, #700]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4bae      	ldr	r3, [pc, #696]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006bb8:	2180      	movs	r1, #128	; 0x80
 8006bba:	02c9      	lsls	r1, r1, #11
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	4bab      	ldr	r3, [pc, #684]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	4baa      	ldr	r3, [pc, #680]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006bc6:	2180      	movs	r1, #128	; 0x80
 8006bc8:	0249      	lsls	r1, r1, #9
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e012      	b.n	8006bf6 <HAL_RCC_OscConfig+0xd2>
 8006bd0:	4ba7      	ldr	r3, [pc, #668]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4ba6      	ldr	r3, [pc, #664]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006bd6:	49a7      	ldr	r1, [pc, #668]	; (8006e74 <HAL_RCC_OscConfig+0x350>)
 8006bd8:	400a      	ands	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	4ba4      	ldr	r3, [pc, #656]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	2380      	movs	r3, #128	; 0x80
 8006be2:	025b      	lsls	r3, r3, #9
 8006be4:	4013      	ands	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4ba1      	ldr	r3, [pc, #644]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	4ba0      	ldr	r3, [pc, #640]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006bf0:	49a1      	ldr	r1, [pc, #644]	; (8006e78 <HAL_RCC_OscConfig+0x354>)
 8006bf2:	400a      	ands	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d014      	beq.n	8006c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfe:	f7fe fbb3 	bl	8005368 <HAL_GetTick>
 8006c02:	0003      	movs	r3, r0
 8006c04:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c08:	f7fe fbae 	bl	8005368 <HAL_GetTick>
 8006c0c:	0002      	movs	r2, r0
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b64      	cmp	r3, #100	; 0x64
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e2e6      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c1a:	4b95      	ldr	r3, [pc, #596]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	2380      	movs	r3, #128	; 0x80
 8006c20:	029b      	lsls	r3, r3, #10
 8006c22:	4013      	ands	r3, r2
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0xe4>
 8006c26:	e015      	b.n	8006c54 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c28:	f7fe fb9e 	bl	8005368 <HAL_GetTick>
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c32:	f7fe fb99 	bl	8005368 <HAL_GetTick>
 8006c36:	0002      	movs	r2, r0
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b64      	cmp	r3, #100	; 0x64
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e2d1      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c44:	4b8a      	ldr	r3, [pc, #552]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	029b      	lsls	r3, r3, #10
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d1f0      	bne.n	8006c32 <HAL_RCC_OscConfig+0x10e>
 8006c50:	e000      	b.n	8006c54 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	d100      	bne.n	8006c60 <HAL_RCC_OscConfig+0x13c>
 8006c5e:	e08a      	b.n	8006d76 <HAL_RCC_OscConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d005      	beq.n	8006c78 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	2b0c      	cmp	r3, #12
 8006c70:	d13d      	bne.n	8006cee <HAL_RCC_OscConfig+0x1ca>
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d13a      	bne.n	8006cee <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006c78:	4b7d      	ldr	r3, [pc, #500]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_RCC_OscConfig+0x168>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e2ad      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c8c:	4b78      	ldr	r3, [pc, #480]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	4a7a      	ldr	r2, [pc, #488]	; (8006e7c <HAL_RCC_OscConfig+0x358>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	0019      	movs	r1, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	021a      	lsls	r2, r3, #8
 8006c9c:	4b74      	ldr	r3, [pc, #464]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006ca2:	4b73      	ldr	r3, [pc, #460]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2209      	movs	r2, #9
 8006ca8:	4393      	bics	r3, r2
 8006caa:	0019      	movs	r1, r3
 8006cac:	4b70      	ldr	r3, [pc, #448]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cb4:	f000 fbc8 	bl	8007448 <HAL_RCC_GetSysClockFreq>
 8006cb8:	0001      	movs	r1, r0
 8006cba:	4b6d      	ldr	r3, [pc, #436]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	091b      	lsrs	r3, r3, #4
 8006cc0:	220f      	movs	r2, #15
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	4a6e      	ldr	r2, [pc, #440]	; (8006e80 <HAL_RCC_OscConfig+0x35c>)
 8006cc6:	5cd3      	ldrb	r3, [r2, r3]
 8006cc8:	000a      	movs	r2, r1
 8006cca:	40da      	lsrs	r2, r3
 8006ccc:	4b6d      	ldr	r3, [pc, #436]	; (8006e84 <HAL_RCC_OscConfig+0x360>)
 8006cce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8006cd0:	2513      	movs	r5, #19
 8006cd2:	197c      	adds	r4, r7, r5
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	f7fe fb11 	bl	80052fc <HAL_InitTick>
 8006cda:	0003      	movs	r3, r0
 8006cdc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006cde:	197b      	adds	r3, r7, r5
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d047      	beq.n	8006d76 <HAL_RCC_OscConfig+0x252>
      {
        return status;
 8006ce6:	2313      	movs	r3, #19
 8006ce8:	18fb      	adds	r3, r7, r3
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	e27c      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d027      	beq.n	8006d44 <HAL_RCC_OscConfig+0x220>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006cf4:	4b5e      	ldr	r3, [pc, #376]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2209      	movs	r2, #9
 8006cfa:	4393      	bics	r3, r2
 8006cfc:	0019      	movs	r1, r3
 8006cfe:	4b5c      	ldr	r3, [pc, #368]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d06:	f7fe fb2f 	bl	8005368 <HAL_GetTick>
 8006d0a:	0003      	movs	r3, r0
 8006d0c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x1fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d10:	f7fe fb2a 	bl	8005368 <HAL_GetTick>
 8006d14:	0002      	movs	r2, r0
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e262      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d22:	4b53      	ldr	r3, [pc, #332]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2204      	movs	r2, #4
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d0f1      	beq.n	8006d10 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d2c:	4b50      	ldr	r3, [pc, #320]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4a52      	ldr	r2, [pc, #328]	; (8006e7c <HAL_RCC_OscConfig+0x358>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	0019      	movs	r1, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	021a      	lsls	r2, r3, #8
 8006d3c:	4b4c      	ldr	r3, [pc, #304]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	e018      	b.n	8006d76 <HAL_RCC_OscConfig+0x252>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d44:	4b4a      	ldr	r3, [pc, #296]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	4b49      	ldr	r3, [pc, #292]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	438a      	bics	r2, r1
 8006d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d50:	f7fe fb0a 	bl	8005368 <HAL_GetTick>
 8006d54:	0003      	movs	r3, r0
 8006d56:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d58:	e008      	b.n	8006d6c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d5a:	f7fe fb05 	bl	8005368 <HAL_GetTick>
 8006d5e:	0002      	movs	r2, r0
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e23d      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d6c:	4b40      	ldr	r3, [pc, #256]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2204      	movs	r2, #4
 8006d72:	4013      	ands	r3, r2
 8006d74:	d1f1      	bne.n	8006d5a <HAL_RCC_OscConfig+0x236>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d100      	bne.n	8006d82 <HAL_RCC_OscConfig+0x25e>
 8006d80:	e09e      	b.n	8006ec0 <HAL_RCC_OscConfig+0x39c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13f      	bne.n	8006e08 <HAL_RCC_OscConfig+0x2e4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d88:	4b39      	ldr	r3, [pc, #228]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4013      	ands	r3, r2
 8006d92:	d005      	beq.n	8006da0 <HAL_RCC_OscConfig+0x27c>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_RCC_OscConfig+0x27c>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e223      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006da0:	4b33      	ldr	r3, [pc, #204]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	4a38      	ldr	r2, [pc, #224]	; (8006e88 <HAL_RCC_OscConfig+0x364>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	0019      	movs	r1, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1a      	ldr	r2, [r3, #32]
 8006dae:	4b30      	ldr	r3, [pc, #192]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006db0:	430a      	orrs	r2, r1
 8006db2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006db4:	4b2e      	ldr	r3, [pc, #184]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	0a19      	lsrs	r1, r3, #8
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	061a      	lsls	r2, r3, #24
 8006dc2:	4b2b      	ldr	r3, [pc, #172]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	0b5b      	lsrs	r3, r3, #13
 8006dce:	3301      	adds	r3, #1
 8006dd0:	2280      	movs	r2, #128	; 0x80
 8006dd2:	0212      	lsls	r2, r2, #8
 8006dd4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006dd6:	4b26      	ldr	r3, [pc, #152]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	091b      	lsrs	r3, r3, #4
 8006ddc:	210f      	movs	r1, #15
 8006dde:	400b      	ands	r3, r1
 8006de0:	4927      	ldr	r1, [pc, #156]	; (8006e80 <HAL_RCC_OscConfig+0x35c>)
 8006de2:	5ccb      	ldrb	r3, [r1, r3]
 8006de4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006de6:	4b27      	ldr	r3, [pc, #156]	; (8006e84 <HAL_RCC_OscConfig+0x360>)
 8006de8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8006dea:	2513      	movs	r5, #19
 8006dec:	197c      	adds	r4, r7, r5
 8006dee:	2000      	movs	r0, #0
 8006df0:	f7fe fa84 	bl	80052fc <HAL_InitTick>
 8006df4:	0003      	movs	r3, r0
 8006df6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006df8:	197b      	adds	r3, r7, r5
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05f      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x39c>
        {
          return status;
 8006e00:	2313      	movs	r3, #19
 8006e02:	18fb      	adds	r3, r7, r3
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	e1ef      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d03d      	beq.n	8006e8c <HAL_RCC_OscConfig+0x368>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e10:	4b17      	ldr	r3, [pc, #92]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006e16:	2180      	movs	r1, #128	; 0x80
 8006e18:	0049      	lsls	r1, r1, #1
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e1e:	f7fe faa3 	bl	8005368 <HAL_GetTick>
 8006e22:	0003      	movs	r3, r0
 8006e24:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x316>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e28:	f7fe fa9e 	bl	8005368 <HAL_GetTick>
 8006e2c:	0002      	movs	r2, r0
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x316>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e1d6      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	2380      	movs	r3, #128	; 0x80
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4013      	ands	r3, r2
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0x304>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e46:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4a0f      	ldr	r2, [pc, #60]	; (8006e88 <HAL_RCC_OscConfig+0x364>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	0019      	movs	r1, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1a      	ldr	r2, [r3, #32]
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	0a19      	lsrs	r1, r3, #8
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	061a      	lsls	r2, r3, #24
 8006e68:	4b01      	ldr	r3, [pc, #4]	; (8006e70 <HAL_RCC_OscConfig+0x34c>)
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
 8006e6e:	e027      	b.n	8006ec0 <HAL_RCC_OscConfig+0x39c>
 8006e70:	40021000 	.word	0x40021000
 8006e74:	fffeffff 	.word	0xfffeffff
 8006e78:	fffbffff 	.word	0xfffbffff
 8006e7c:	ffffe0ff 	.word	0xffffe0ff
 8006e80:	0800a1bc 	.word	0x0800a1bc
 8006e84:	20000024 	.word	0x20000024
 8006e88:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e8c:	4bbf      	ldr	r3, [pc, #764]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	4bbe      	ldr	r3, [pc, #760]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006e92:	49bf      	ldr	r1, [pc, #764]	; (8007190 <HAL_RCC_OscConfig+0x66c>)
 8006e94:	400a      	ands	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e98:	f7fe fa66 	bl	8005368 <HAL_GetTick>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006ea0:	e008      	b.n	8006eb4 <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ea2:	f7fe fa61 	bl	8005368 <HAL_GetTick>
 8006ea6:	0002      	movs	r2, r0
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e199      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006eb4:	4bb5      	ldr	r3, [pc, #724]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	2380      	movs	r3, #128	; 0x80
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	d1f0      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	d036      	beq.n	8006f38 <HAL_RCC_OscConfig+0x414>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d019      	beq.n	8006f06 <HAL_RCC_OscConfig+0x3e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed2:	4bae      	ldr	r3, [pc, #696]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ed6:	4bad      	ldr	r3, [pc, #692]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006ed8:	2101      	movs	r1, #1
 8006eda:	430a      	orrs	r2, r1
 8006edc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ede:	f7fe fa43 	bl	8005368 <HAL_GetTick>
 8006ee2:	0003      	movs	r3, r0
 8006ee4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x3d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ee8:	f7fe fa3e 	bl	8005368 <HAL_GetTick>
 8006eec:	0002      	movs	r2, r0
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x3d6>
        {
          return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e176      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006efa:	4ba4      	ldr	r3, [pc, #656]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efe:	2202      	movs	r2, #2
 8006f00:	4013      	ands	r3, r2
 8006f02:	d0f1      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x3c4>
 8006f04:	e018      	b.n	8006f38 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f06:	4ba1      	ldr	r3, [pc, #644]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f0a:	4ba0      	ldr	r3, [pc, #640]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	438a      	bics	r2, r1
 8006f10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f12:	f7fe fa29 	bl	8005368 <HAL_GetTick>
 8006f16:	0003      	movs	r3, r0
 8006f18:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f1c:	f7fe fa24 	bl	8005368 <HAL_GetTick>
 8006f20:	0002      	movs	r2, r0
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e15c      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f2e:	4b97      	ldr	r3, [pc, #604]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f32:	2202      	movs	r2, #2
 8006f34:	4013      	ands	r3, r2
 8006f36:	d1f1      	bne.n	8006f1c <HAL_RCC_OscConfig+0x3f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2204      	movs	r2, #4
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d100      	bne.n	8006f44 <HAL_RCC_OscConfig+0x420>
 8006f42:	e0af      	b.n	80070a4 <HAL_RCC_OscConfig+0x580>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f44:	2327      	movs	r3, #39	; 0x27
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	2200      	movs	r2, #0
 8006f4a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4c:	4b8f      	ldr	r3, [pc, #572]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f50:	2380      	movs	r3, #128	; 0x80
 8006f52:	055b      	lsls	r3, r3, #21
 8006f54:	4013      	ands	r3, r2
 8006f56:	d10a      	bne.n	8006f6e <HAL_RCC_OscConfig+0x44a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f58:	4b8c      	ldr	r3, [pc, #560]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f5c:	4b8b      	ldr	r3, [pc, #556]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006f5e:	2180      	movs	r1, #128	; 0x80
 8006f60:	0549      	lsls	r1, r1, #21
 8006f62:	430a      	orrs	r2, r1
 8006f64:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006f66:	2327      	movs	r3, #39	; 0x27
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f6e:	4b89      	ldr	r3, [pc, #548]	; (8007194 <HAL_RCC_OscConfig+0x670>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	2380      	movs	r3, #128	; 0x80
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4013      	ands	r3, r2
 8006f78:	d11a      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x48c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f7a:	4b86      	ldr	r3, [pc, #536]	; (8007194 <HAL_RCC_OscConfig+0x670>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4b85      	ldr	r3, [pc, #532]	; (8007194 <HAL_RCC_OscConfig+0x670>)
 8006f80:	2180      	movs	r1, #128	; 0x80
 8006f82:	0049      	lsls	r1, r1, #1
 8006f84:	430a      	orrs	r2, r1
 8006f86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f88:	f7fe f9ee 	bl	8005368 <HAL_GetTick>
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f90:	e008      	b.n	8006fa4 <HAL_RCC_OscConfig+0x480>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f92:	f7fe f9e9 	bl	8005368 <HAL_GetTick>
 8006f96:	0002      	movs	r2, r0
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b64      	cmp	r3, #100	; 0x64
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e121      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa4:	4b7b      	ldr	r3, [pc, #492]	; (8007194 <HAL_RCC_OscConfig+0x670>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	4013      	ands	r3, r2
 8006fae:	d0f0      	beq.n	8006f92 <HAL_RCC_OscConfig+0x46e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	2380      	movs	r3, #128	; 0x80
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d107      	bne.n	8006fcc <HAL_RCC_OscConfig+0x4a8>
 8006fbc:	4b73      	ldr	r3, [pc, #460]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fc0:	4b72      	ldr	r3, [pc, #456]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006fc2:	2180      	movs	r1, #128	; 0x80
 8006fc4:	0049      	lsls	r1, r1, #1
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	651a      	str	r2, [r3, #80]	; 0x50
 8006fca:	e031      	b.n	8007030 <HAL_RCC_OscConfig+0x50c>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10c      	bne.n	8006fee <HAL_RCC_OscConfig+0x4ca>
 8006fd4:	4b6d      	ldr	r3, [pc, #436]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fd8:	4b6c      	ldr	r3, [pc, #432]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006fda:	496d      	ldr	r1, [pc, #436]	; (8007190 <HAL_RCC_OscConfig+0x66c>)
 8006fdc:	400a      	ands	r2, r1
 8006fde:	651a      	str	r2, [r3, #80]	; 0x50
 8006fe0:	4b6a      	ldr	r3, [pc, #424]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006fe4:	4b69      	ldr	r3, [pc, #420]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006fe6:	496c      	ldr	r1, [pc, #432]	; (8007198 <HAL_RCC_OscConfig+0x674>)
 8006fe8:	400a      	ands	r2, r1
 8006fea:	651a      	str	r2, [r3, #80]	; 0x50
 8006fec:	e020      	b.n	8007030 <HAL_RCC_OscConfig+0x50c>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	23a0      	movs	r3, #160	; 0xa0
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d10e      	bne.n	8007018 <HAL_RCC_OscConfig+0x4f4>
 8006ffa:	4b64      	ldr	r3, [pc, #400]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8006ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ffe:	4b63      	ldr	r3, [pc, #396]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8007000:	2180      	movs	r1, #128	; 0x80
 8007002:	00c9      	lsls	r1, r1, #3
 8007004:	430a      	orrs	r2, r1
 8007006:	651a      	str	r2, [r3, #80]	; 0x50
 8007008:	4b60      	ldr	r3, [pc, #384]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800700a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800700c:	4b5f      	ldr	r3, [pc, #380]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800700e:	2180      	movs	r1, #128	; 0x80
 8007010:	0049      	lsls	r1, r1, #1
 8007012:	430a      	orrs	r2, r1
 8007014:	651a      	str	r2, [r3, #80]	; 0x50
 8007016:	e00b      	b.n	8007030 <HAL_RCC_OscConfig+0x50c>
 8007018:	4b5c      	ldr	r3, [pc, #368]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800701a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800701c:	4b5b      	ldr	r3, [pc, #364]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800701e:	495c      	ldr	r1, [pc, #368]	; (8007190 <HAL_RCC_OscConfig+0x66c>)
 8007020:	400a      	ands	r2, r1
 8007022:	651a      	str	r2, [r3, #80]	; 0x50
 8007024:	4b59      	ldr	r3, [pc, #356]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8007026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007028:	4b58      	ldr	r3, [pc, #352]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800702a:	495b      	ldr	r1, [pc, #364]	; (8007198 <HAL_RCC_OscConfig+0x674>)
 800702c:	400a      	ands	r2, r1
 800702e:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d015      	beq.n	8007064 <HAL_RCC_OscConfig+0x540>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007038:	f7fe f996 	bl	8005368 <HAL_GetTick>
 800703c:	0003      	movs	r3, r0
 800703e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007040:	e009      	b.n	8007056 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007042:	f7fe f991 	bl	8005368 <HAL_GetTick>
 8007046:	0002      	movs	r2, r0
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	4a53      	ldr	r2, [pc, #332]	; (800719c <HAL_RCC_OscConfig+0x678>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e0c8      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007056:	4b4d      	ldr	r3, [pc, #308]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8007058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800705a:	2380      	movs	r3, #128	; 0x80
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4013      	ands	r3, r2
 8007060:	d0ef      	beq.n	8007042 <HAL_RCC_OscConfig+0x51e>
 8007062:	e014      	b.n	800708e <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007064:	f7fe f980 	bl	8005368 <HAL_GetTick>
 8007068:	0003      	movs	r3, r0
 800706a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800706c:	e009      	b.n	8007082 <HAL_RCC_OscConfig+0x55e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800706e:	f7fe f97b 	bl	8005368 <HAL_GetTick>
 8007072:	0002      	movs	r2, r0
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	4a48      	ldr	r2, [pc, #288]	; (800719c <HAL_RCC_OscConfig+0x678>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e0b2      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007082:	4b42      	ldr	r3, [pc, #264]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8007084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007086:	2380      	movs	r3, #128	; 0x80
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4013      	ands	r3, r2
 800708c:	d1ef      	bne.n	800706e <HAL_RCC_OscConfig+0x54a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800708e:	2327      	movs	r3, #39	; 0x27
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d105      	bne.n	80070a4 <HAL_RCC_OscConfig+0x580>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007098:	4b3c      	ldr	r3, [pc, #240]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800709a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709c:	4b3b      	ldr	r3, [pc, #236]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800709e:	4940      	ldr	r1, [pc, #256]	; (80071a0 <HAL_RCC_OscConfig+0x67c>)
 80070a0:	400a      	ands	r2, r1
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d100      	bne.n	80070ae <HAL_RCC_OscConfig+0x58a>
 80070ac:	e09b      	b.n	80071e6 <HAL_RCC_OscConfig+0x6c2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d064      	beq.n	800717e <HAL_RCC_OscConfig+0x65a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d145      	bne.n	8007148 <HAL_RCC_OscConfig+0x624>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070bc:	4b33      	ldr	r3, [pc, #204]	; (800718c <HAL_RCC_OscConfig+0x668>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <HAL_RCC_OscConfig+0x668>)
 80070c2:	4938      	ldr	r1, [pc, #224]	; (80071a4 <HAL_RCC_OscConfig+0x680>)
 80070c4:	400a      	ands	r2, r1
 80070c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c8:	f7fe f94e 	bl	8005368 <HAL_GetTick>
 80070cc:	0003      	movs	r3, r0
 80070ce:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070d2:	f7fe f949 	bl	8005368 <HAL_GetTick>
 80070d6:	0002      	movs	r2, r0
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e081      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070e4:	4b29      	ldr	r3, [pc, #164]	; (800718c <HAL_RCC_OscConfig+0x668>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	2380      	movs	r3, #128	; 0x80
 80070ea:	049b      	lsls	r3, r3, #18
 80070ec:	4013      	ands	r3, r2
 80070ee:	d1f0      	bne.n	80070d2 <HAL_RCC_OscConfig+0x5ae>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070f0:	4b26      	ldr	r3, [pc, #152]	; (800718c <HAL_RCC_OscConfig+0x668>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4a2c      	ldr	r2, [pc, #176]	; (80071a8 <HAL_RCC_OscConfig+0x684>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	0019      	movs	r1, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	431a      	orrs	r2, r3
 800710a:	4b20      	ldr	r3, [pc, #128]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800710c:	430a      	orrs	r2, r1
 800710e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007110:	4b1e      	ldr	r3, [pc, #120]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b1d      	ldr	r3, [pc, #116]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8007116:	2180      	movs	r1, #128	; 0x80
 8007118:	0449      	lsls	r1, r1, #17
 800711a:	430a      	orrs	r2, r1
 800711c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711e:	f7fe f923 	bl	8005368 <HAL_GetTick>
 8007122:	0003      	movs	r3, r0
 8007124:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007128:	f7fe f91e 	bl	8005368 <HAL_GetTick>
 800712c:	0002      	movs	r2, r0
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e056      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	2380      	movs	r3, #128	; 0x80
 8007140:	049b      	lsls	r3, r3, #18
 8007142:	4013      	ands	r3, r2
 8007144:	d0f0      	beq.n	8007128 <HAL_RCC_OscConfig+0x604>
 8007146:	e04e      	b.n	80071e6 <HAL_RCC_OscConfig+0x6c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007148:	4b10      	ldr	r3, [pc, #64]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <HAL_RCC_OscConfig+0x668>)
 800714e:	4915      	ldr	r1, [pc, #84]	; (80071a4 <HAL_RCC_OscConfig+0x680>)
 8007150:	400a      	ands	r2, r1
 8007152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007154:	f7fe f908 	bl	8005368 <HAL_GetTick>
 8007158:	0003      	movs	r3, r0
 800715a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800715c:	e008      	b.n	8007170 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800715e:	f7fe f903 	bl	8005368 <HAL_GetTick>
 8007162:	0002      	movs	r2, r0
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e03b      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007170:	4b06      	ldr	r3, [pc, #24]	; (800718c <HAL_RCC_OscConfig+0x668>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	2380      	movs	r3, #128	; 0x80
 8007176:	049b      	lsls	r3, r3, #18
 8007178:	4013      	ands	r3, r2
 800717a:	d1f0      	bne.n	800715e <HAL_RCC_OscConfig+0x63a>
 800717c:	e033      	b.n	80071e6 <HAL_RCC_OscConfig+0x6c2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	2b01      	cmp	r3, #1
 8007184:	d112      	bne.n	80071ac <HAL_RCC_OscConfig+0x688>
      {
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e02e      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	40021000 	.word	0x40021000
 8007190:	fffffeff 	.word	0xfffffeff
 8007194:	40007000 	.word	0x40007000
 8007198:	fffffbff 	.word	0xfffffbff
 800719c:	00001388 	.word	0x00001388
 80071a0:	efffffff 	.word	0xefffffff
 80071a4:	feffffff 	.word	0xfeffffff
 80071a8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <HAL_RCC_OscConfig+0x6cc>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	2380      	movs	r3, #128	; 0x80
 80071b6:	025b      	lsls	r3, r3, #9
 80071b8:	401a      	ands	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	429a      	cmp	r2, r3
 80071c0:	d10f      	bne.n	80071e2 <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	23f0      	movs	r3, #240	; 0xf0
 80071c6:	039b      	lsls	r3, r3, #14
 80071c8:	401a      	ands	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d107      	bne.n	80071e2 <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	23c0      	movs	r3, #192	; 0xc0
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	401a      	ands	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80071de:	429a      	cmp	r2, r3
 80071e0:	d001      	beq.n	80071e6 <HAL_RCC_OscConfig+0x6c2>
        {
          return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <HAL_RCC_OscConfig+0x6c4>
        }
      }
    }
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	0018      	movs	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b00a      	add	sp, #40	; 0x28
 80071ee:	bdb0      	pop	{r4, r5, r7, pc}
 80071f0:	40021000 	.word	0x40021000

080071f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071f4:	b5b0      	push	{r4, r5, r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e10d      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007208:	4b88      	ldr	r3, [pc, #544]	; (800742c <HAL_RCC_ClockConfig+0x238>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2201      	movs	r2, #1
 800720e:	4013      	ands	r3, r2
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d911      	bls.n	800723a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007216:	4b85      	ldr	r3, [pc, #532]	; (800742c <HAL_RCC_ClockConfig+0x238>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2201      	movs	r2, #1
 800721c:	4393      	bics	r3, r2
 800721e:	0019      	movs	r1, r3
 8007220:	4b82      	ldr	r3, [pc, #520]	; (800742c <HAL_RCC_ClockConfig+0x238>)
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007228:	4b80      	ldr	r3, [pc, #512]	; (800742c <HAL_RCC_ClockConfig+0x238>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2201      	movs	r2, #1
 800722e:	4013      	ands	r3, r2
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d001      	beq.n	800723a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e0f4      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2202      	movs	r2, #2
 8007240:	4013      	ands	r3, r2
 8007242:	d009      	beq.n	8007258 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007244:	4b7a      	ldr	r3, [pc, #488]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	22f0      	movs	r2, #240	; 0xf0
 800724a:	4393      	bics	r3, r2
 800724c:	0019      	movs	r1, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	4b77      	ldr	r3, [pc, #476]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 8007254:	430a      	orrs	r2, r1
 8007256:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2201      	movs	r2, #1
 800725e:	4013      	ands	r3, r2
 8007260:	d100      	bne.n	8007264 <HAL_RCC_ClockConfig+0x70>
 8007262:	e089      	b.n	8007378 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b02      	cmp	r3, #2
 800726a:	d107      	bne.n	800727c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800726c:	4b70      	ldr	r3, [pc, #448]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	2380      	movs	r3, #128	; 0x80
 8007272:	029b      	lsls	r3, r3, #10
 8007274:	4013      	ands	r3, r2
 8007276:	d120      	bne.n	80072ba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e0d3      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2b03      	cmp	r3, #3
 8007282:	d107      	bne.n	8007294 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007284:	4b6a      	ldr	r3, [pc, #424]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	049b      	lsls	r3, r3, #18
 800728c:	4013      	ands	r3, r2
 800728e:	d114      	bne.n	80072ba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e0c7      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d106      	bne.n	80072aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800729c:	4b64      	ldr	r3, [pc, #400]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2204      	movs	r2, #4
 80072a2:	4013      	ands	r3, r2
 80072a4:	d109      	bne.n	80072ba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e0bc      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80072aa:	4b61      	ldr	r3, [pc, #388]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	2380      	movs	r3, #128	; 0x80
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4013      	ands	r3, r2
 80072b4:	d101      	bne.n	80072ba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e0b4      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ba:	4b5d      	ldr	r3, [pc, #372]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	2203      	movs	r2, #3
 80072c0:	4393      	bics	r3, r2
 80072c2:	0019      	movs	r1, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	4b59      	ldr	r3, [pc, #356]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 80072ca:	430a      	orrs	r2, r1
 80072cc:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072ce:	f7fe f84b 	bl	8005368 <HAL_GetTick>
 80072d2:	0003      	movs	r3, r0
 80072d4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d111      	bne.n	8007302 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80072de:	e009      	b.n	80072f4 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072e0:	f7fe f842 	bl	8005368 <HAL_GetTick>
 80072e4:	0002      	movs	r2, r0
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	4a52      	ldr	r2, [pc, #328]	; (8007434 <HAL_RCC_ClockConfig+0x240>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e097      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80072f4:	4b4e      	ldr	r3, [pc, #312]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	220c      	movs	r2, #12
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d1ef      	bne.n	80072e0 <HAL_RCC_ClockConfig+0xec>
 8007300:	e03a      	b.n	8007378 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2b03      	cmp	r3, #3
 8007308:	d111      	bne.n	800732e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800730a:	e009      	b.n	8007320 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800730c:	f7fe f82c 	bl	8005368 <HAL_GetTick>
 8007310:	0002      	movs	r2, r0
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	4a47      	ldr	r2, [pc, #284]	; (8007434 <HAL_RCC_ClockConfig+0x240>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e081      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007320:	4b43      	ldr	r3, [pc, #268]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	220c      	movs	r2, #12
 8007326:	4013      	ands	r3, r2
 8007328:	2b0c      	cmp	r3, #12
 800732a:	d1ef      	bne.n	800730c <HAL_RCC_ClockConfig+0x118>
 800732c:	e024      	b.n	8007378 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d11b      	bne.n	800736e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007336:	e009      	b.n	800734c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007338:	f7fe f816 	bl	8005368 <HAL_GetTick>
 800733c:	0002      	movs	r2, r0
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	4a3c      	ldr	r2, [pc, #240]	; (8007434 <HAL_RCC_ClockConfig+0x240>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d901      	bls.n	800734c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e06b      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800734c:	4b38      	ldr	r3, [pc, #224]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	220c      	movs	r2, #12
 8007352:	4013      	ands	r3, r2
 8007354:	2b04      	cmp	r3, #4
 8007356:	d1ef      	bne.n	8007338 <HAL_RCC_ClockConfig+0x144>
 8007358:	e00e      	b.n	8007378 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800735a:	f7fe f805 	bl	8005368 <HAL_GetTick>
 800735e:	0002      	movs	r2, r0
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	4a33      	ldr	r2, [pc, #204]	; (8007434 <HAL_RCC_ClockConfig+0x240>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e05a      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800736e:	4b30      	ldr	r3, [pc, #192]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	220c      	movs	r2, #12
 8007374:	4013      	ands	r3, r2
 8007376:	d1f0      	bne.n	800735a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007378:	4b2c      	ldr	r3, [pc, #176]	; (800742c <HAL_RCC_ClockConfig+0x238>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2201      	movs	r2, #1
 800737e:	4013      	ands	r3, r2
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d211      	bcs.n	80073aa <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007386:	4b29      	ldr	r3, [pc, #164]	; (800742c <HAL_RCC_ClockConfig+0x238>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2201      	movs	r2, #1
 800738c:	4393      	bics	r3, r2
 800738e:	0019      	movs	r1, r3
 8007390:	4b26      	ldr	r3, [pc, #152]	; (800742c <HAL_RCC_ClockConfig+0x238>)
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007398:	4b24      	ldr	r3, [pc, #144]	; (800742c <HAL_RCC_ClockConfig+0x238>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2201      	movs	r2, #1
 800739e:	4013      	ands	r3, r2
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d001      	beq.n	80073aa <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e03c      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2204      	movs	r2, #4
 80073b0:	4013      	ands	r3, r2
 80073b2:	d009      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073b4:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4a1f      	ldr	r2, [pc, #124]	; (8007438 <HAL_RCC_ClockConfig+0x244>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	0019      	movs	r1, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	4b1b      	ldr	r3, [pc, #108]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 80073c4:	430a      	orrs	r2, r1
 80073c6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2208      	movs	r2, #8
 80073ce:	4013      	ands	r3, r2
 80073d0:	d00a      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073d2:	4b17      	ldr	r3, [pc, #92]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	4a19      	ldr	r2, [pc, #100]	; (800743c <HAL_RCC_ClockConfig+0x248>)
 80073d8:	4013      	ands	r3, r2
 80073da:	0019      	movs	r1, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	00da      	lsls	r2, r3, #3
 80073e2:	4b13      	ldr	r3, [pc, #76]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 80073e4:	430a      	orrs	r2, r1
 80073e6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073e8:	f000 f82e 	bl	8007448 <HAL_RCC_GetSysClockFreq>
 80073ec:	0001      	movs	r1, r0
 80073ee:	4b10      	ldr	r3, [pc, #64]	; (8007430 <HAL_RCC_ClockConfig+0x23c>)
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	091b      	lsrs	r3, r3, #4
 80073f4:	220f      	movs	r2, #15
 80073f6:	4013      	ands	r3, r2
 80073f8:	4a11      	ldr	r2, [pc, #68]	; (8007440 <HAL_RCC_ClockConfig+0x24c>)
 80073fa:	5cd3      	ldrb	r3, [r2, r3]
 80073fc:	000a      	movs	r2, r1
 80073fe:	40da      	lsrs	r2, r3
 8007400:	4b10      	ldr	r3, [pc, #64]	; (8007444 <HAL_RCC_ClockConfig+0x250>)
 8007402:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8007404:	250b      	movs	r5, #11
 8007406:	197c      	adds	r4, r7, r5
 8007408:	2000      	movs	r0, #0
 800740a:	f7fd ff77 	bl	80052fc <HAL_InitTick>
 800740e:	0003      	movs	r3, r0
 8007410:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007412:	197b      	adds	r3, r7, r5
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800741a:	230b      	movs	r3, #11
 800741c:	18fb      	adds	r3, r7, r3
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	e000      	b.n	8007424 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	0018      	movs	r0, r3
 8007426:	46bd      	mov	sp, r7
 8007428:	b004      	add	sp, #16
 800742a:	bdb0      	pop	{r4, r5, r7, pc}
 800742c:	40022000 	.word	0x40022000
 8007430:	40021000 	.word	0x40021000
 8007434:	00001388 	.word	0x00001388
 8007438:	fffff8ff 	.word	0xfffff8ff
 800743c:	ffffc7ff 	.word	0xffffc7ff
 8007440:	0800a1bc 	.word	0x0800a1bc
 8007444:	20000024 	.word	0x20000024

08007448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800744e:	4b3b      	ldr	r3, [pc, #236]	; (800753c <HAL_RCC_GetSysClockFreq+0xf4>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	220c      	movs	r2, #12
 8007458:	4013      	ands	r3, r2
 800745a:	2b08      	cmp	r3, #8
 800745c:	d00e      	beq.n	800747c <HAL_RCC_GetSysClockFreq+0x34>
 800745e:	2b0c      	cmp	r3, #12
 8007460:	d00f      	beq.n	8007482 <HAL_RCC_GetSysClockFreq+0x3a>
 8007462:	2b04      	cmp	r3, #4
 8007464:	d157      	bne.n	8007516 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007466:	4b35      	ldr	r3, [pc, #212]	; (800753c <HAL_RCC_GetSysClockFreq+0xf4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2210      	movs	r2, #16
 800746c:	4013      	ands	r3, r2
 800746e:	d002      	beq.n	8007476 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8007470:	4b33      	ldr	r3, [pc, #204]	; (8007540 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007472:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8007474:	e05d      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8007476:	4b33      	ldr	r3, [pc, #204]	; (8007544 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007478:	613b      	str	r3, [r7, #16]
      break;
 800747a:	e05a      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800747c:	4b32      	ldr	r3, [pc, #200]	; (8007548 <HAL_RCC_GetSysClockFreq+0x100>)
 800747e:	613b      	str	r3, [r7, #16]
      break;
 8007480:	e057      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	0c9b      	lsrs	r3, r3, #18
 8007486:	220f      	movs	r2, #15
 8007488:	4013      	ands	r3, r2
 800748a:	4a30      	ldr	r2, [pc, #192]	; (800754c <HAL_RCC_GetSysClockFreq+0x104>)
 800748c:	5cd3      	ldrb	r3, [r2, r3]
 800748e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	0d9b      	lsrs	r3, r3, #22
 8007494:	2203      	movs	r2, #3
 8007496:	4013      	ands	r3, r2
 8007498:	3301      	adds	r3, #1
 800749a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800749c:	4b27      	ldr	r3, [pc, #156]	; (800753c <HAL_RCC_GetSysClockFreq+0xf4>)
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	025b      	lsls	r3, r3, #9
 80074a4:	4013      	ands	r3, r2
 80074a6:	d00f      	beq.n	80074c8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	000a      	movs	r2, r1
 80074ac:	0152      	lsls	r2, r2, #5
 80074ae:	1a52      	subs	r2, r2, r1
 80074b0:	0193      	lsls	r3, r2, #6
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	185b      	adds	r3, r3, r1
 80074b8:	025b      	lsls	r3, r3, #9
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	0018      	movs	r0, r3
 80074be:	f7f8 fe2b 	bl	8000118 <__udivsi3>
 80074c2:	0003      	movs	r3, r0
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e023      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80074c8:	4b1c      	ldr	r3, [pc, #112]	; (800753c <HAL_RCC_GetSysClockFreq+0xf4>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2210      	movs	r2, #16
 80074ce:	4013      	ands	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	000a      	movs	r2, r1
 80074d6:	0152      	lsls	r2, r2, #5
 80074d8:	1a52      	subs	r2, r2, r1
 80074da:	0193      	lsls	r3, r2, #6
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	185b      	adds	r3, r3, r1
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	0018      	movs	r0, r3
 80074e8:	f7f8 fe16 	bl	8000118 <__udivsi3>
 80074ec:	0003      	movs	r3, r0
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	e00e      	b.n	8007510 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	000a      	movs	r2, r1
 80074f6:	0152      	lsls	r2, r2, #5
 80074f8:	1a52      	subs	r2, r2, r1
 80074fa:	0193      	lsls	r3, r2, #6
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	185b      	adds	r3, r3, r1
 8007502:	029b      	lsls	r3, r3, #10
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	0018      	movs	r0, r3
 8007508:	f7f8 fe06 	bl	8000118 <__udivsi3>
 800750c:	0003      	movs	r3, r0
 800750e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	613b      	str	r3, [r7, #16]
      break;
 8007514:	e00d      	b.n	8007532 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007516:	4b09      	ldr	r3, [pc, #36]	; (800753c <HAL_RCC_GetSysClockFreq+0xf4>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	0b5b      	lsrs	r3, r3, #13
 800751c:	2207      	movs	r2, #7
 800751e:	4013      	ands	r3, r2
 8007520:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	2280      	movs	r2, #128	; 0x80
 8007528:	0212      	lsls	r2, r2, #8
 800752a:	409a      	lsls	r2, r3
 800752c:	0013      	movs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]
      break;
 8007530:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007532:	693b      	ldr	r3, [r7, #16]
}
 8007534:	0018      	movs	r0, r3
 8007536:	46bd      	mov	sp, r7
 8007538:	b006      	add	sp, #24
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40021000 	.word	0x40021000
 8007540:	003d0900 	.word	0x003d0900
 8007544:	00f42400 	.word	0x00f42400
 8007548:	007a1200 	.word	0x007a1200
 800754c:	0800a1d4 	.word	0x0800a1d4

08007550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007554:	4b02      	ldr	r3, [pc, #8]	; (8007560 <HAL_RCC_GetHCLKFreq+0x10>)
 8007556:	681b      	ldr	r3, [r3, #0]
}
 8007558:	0018      	movs	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	46c0      	nop			; (mov r8, r8)
 8007560:	20000024 	.word	0x20000024

08007564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007568:	f7ff fff2 	bl	8007550 <HAL_RCC_GetHCLKFreq>
 800756c:	0001      	movs	r1, r0
 800756e:	4b06      	ldr	r3, [pc, #24]	; (8007588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	0a1b      	lsrs	r3, r3, #8
 8007574:	2207      	movs	r2, #7
 8007576:	4013      	ands	r3, r2
 8007578:	4a04      	ldr	r2, [pc, #16]	; (800758c <HAL_RCC_GetPCLK1Freq+0x28>)
 800757a:	5cd3      	ldrb	r3, [r2, r3]
 800757c:	40d9      	lsrs	r1, r3
 800757e:	000b      	movs	r3, r1
}
 8007580:	0018      	movs	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	46c0      	nop			; (mov r8, r8)
 8007588:	40021000 	.word	0x40021000
 800758c:	0800a1cc 	.word	0x0800a1cc

08007590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007594:	f7ff ffdc 	bl	8007550 <HAL_RCC_GetHCLKFreq>
 8007598:	0001      	movs	r1, r0
 800759a:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	0adb      	lsrs	r3, r3, #11
 80075a0:	2207      	movs	r2, #7
 80075a2:	4013      	ands	r3, r2
 80075a4:	4a04      	ldr	r2, [pc, #16]	; (80075b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80075a6:	5cd3      	ldrb	r3, [r2, r3]
 80075a8:	40d9      	lsrs	r1, r3
 80075aa:	000b      	movs	r3, r1
}
 80075ac:	0018      	movs	r0, r3
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	40021000 	.word	0x40021000
 80075b8:	0800a1cc 	.word	0x0800a1cc

080075bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2220      	movs	r2, #32
 80075ca:	4013      	ands	r3, r2
 80075cc:	d100      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80075ce:	e0c7      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80075d0:	2317      	movs	r3, #23
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075d8:	4b89      	ldr	r3, [pc, #548]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80075da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	055b      	lsls	r3, r3, #21
 80075e0:	4013      	ands	r3, r2
 80075e2:	d10a      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075e4:	4b86      	ldr	r3, [pc, #536]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80075e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075e8:	4b85      	ldr	r3, [pc, #532]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80075ea:	2180      	movs	r1, #128	; 0x80
 80075ec:	0549      	lsls	r1, r1, #21
 80075ee:	430a      	orrs	r2, r1
 80075f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80075f2:	2317      	movs	r3, #23
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	2201      	movs	r2, #1
 80075f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075fa:	4b82      	ldr	r3, [pc, #520]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	2380      	movs	r3, #128	; 0x80
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	4013      	ands	r3, r2
 8007604:	d11a      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007606:	4b7f      	ldr	r3, [pc, #508]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4b7e      	ldr	r3, [pc, #504]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800760c:	2180      	movs	r1, #128	; 0x80
 800760e:	0049      	lsls	r1, r1, #1
 8007610:	430a      	orrs	r2, r1
 8007612:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007614:	f7fd fea8 	bl	8005368 <HAL_GetTick>
 8007618:	0003      	movs	r3, r0
 800761a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800761c:	e008      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800761e:	f7fd fea3 	bl	8005368 <HAL_GetTick>
 8007622:	0002      	movs	r2, r0
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b64      	cmp	r3, #100	; 0x64
 800762a:	d901      	bls.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e0e3      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007630:	4b74      	ldr	r3, [pc, #464]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	2380      	movs	r3, #128	; 0x80
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	4013      	ands	r3, r2
 800763a:	d0f0      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800763c:	4b70      	ldr	r3, [pc, #448]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	23c0      	movs	r3, #192	; 0xc0
 8007642:	039b      	lsls	r3, r3, #14
 8007644:	4013      	ands	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	23c0      	movs	r3, #192	; 0xc0
 800764e:	039b      	lsls	r3, r3, #14
 8007650:	4013      	ands	r3, r2
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	429a      	cmp	r2, r3
 8007656:	d013      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	23c0      	movs	r3, #192	; 0xc0
 800765e:	029b      	lsls	r3, r3, #10
 8007660:	401a      	ands	r2, r3
 8007662:	23c0      	movs	r3, #192	; 0xc0
 8007664:	029b      	lsls	r3, r3, #10
 8007666:	429a      	cmp	r2, r3
 8007668:	d10a      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800766a:	4b65      	ldr	r3, [pc, #404]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	2380      	movs	r3, #128	; 0x80
 8007670:	029b      	lsls	r3, r3, #10
 8007672:	401a      	ands	r2, r3
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	029b      	lsls	r3, r3, #10
 8007678:	429a      	cmp	r2, r3
 800767a:	d101      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e0bb      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007680:	4b5f      	ldr	r3, [pc, #380]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007684:	23c0      	movs	r3, #192	; 0xc0
 8007686:	029b      	lsls	r3, r3, #10
 8007688:	4013      	ands	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d03b      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	23c0      	movs	r3, #192	; 0xc0
 8007698:	029b      	lsls	r3, r3, #10
 800769a:	4013      	ands	r3, r2
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d033      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2220      	movs	r2, #32
 80076a8:	4013      	ands	r3, r2
 80076aa:	d02e      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80076ac:	4b54      	ldr	r3, [pc, #336]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80076ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b0:	4a55      	ldr	r2, [pc, #340]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80076b2:	4013      	ands	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076b6:	4b52      	ldr	r3, [pc, #328]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80076b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076ba:	4b51      	ldr	r3, [pc, #324]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80076bc:	2180      	movs	r1, #128	; 0x80
 80076be:	0309      	lsls	r1, r1, #12
 80076c0:	430a      	orrs	r2, r1
 80076c2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076c4:	4b4e      	ldr	r3, [pc, #312]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80076c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076c8:	4b4d      	ldr	r3, [pc, #308]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80076ca:	4950      	ldr	r1, [pc, #320]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80076cc:	400a      	ands	r2, r1
 80076ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80076d0:	4b4b      	ldr	r3, [pc, #300]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	2380      	movs	r3, #128	; 0x80
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	4013      	ands	r3, r2
 80076de:	d014      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e0:	f7fd fe42 	bl	8005368 <HAL_GetTick>
 80076e4:	0003      	movs	r3, r0
 80076e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076e8:	e009      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076ea:	f7fd fe3d 	bl	8005368 <HAL_GetTick>
 80076ee:	0002      	movs	r2, r0
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	4a46      	ldr	r2, [pc, #280]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d901      	bls.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e07c      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076fe:	4b40      	ldr	r3, [pc, #256]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007702:	2380      	movs	r3, #128	; 0x80
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4013      	ands	r3, r2
 8007708:	d0ef      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	23c0      	movs	r3, #192	; 0xc0
 8007710:	029b      	lsls	r3, r3, #10
 8007712:	401a      	ands	r2, r3
 8007714:	23c0      	movs	r3, #192	; 0xc0
 8007716:	029b      	lsls	r3, r3, #10
 8007718:	429a      	cmp	r2, r3
 800771a:	d10c      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800771c:	4b38      	ldr	r3, [pc, #224]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a3c      	ldr	r2, [pc, #240]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007722:	4013      	ands	r3, r2
 8007724:	0019      	movs	r1, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	23c0      	movs	r3, #192	; 0xc0
 800772c:	039b      	lsls	r3, r3, #14
 800772e:	401a      	ands	r2, r3
 8007730:	4b33      	ldr	r3, [pc, #204]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007732:	430a      	orrs	r2, r1
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	4b32      	ldr	r3, [pc, #200]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007738:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	23c0      	movs	r3, #192	; 0xc0
 8007740:	029b      	lsls	r3, r3, #10
 8007742:	401a      	ands	r2, r3
 8007744:	4b2e      	ldr	r3, [pc, #184]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007746:	430a      	orrs	r2, r1
 8007748:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800774a:	2317      	movs	r3, #23
 800774c:	18fb      	adds	r3, r7, r3
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d105      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007754:	4b2a      	ldr	r3, [pc, #168]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007758:	4b29      	ldr	r3, [pc, #164]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800775a:	492f      	ldr	r1, [pc, #188]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800775c:	400a      	ands	r2, r1
 800775e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2201      	movs	r2, #1
 8007766:	4013      	ands	r3, r2
 8007768:	d009      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800776a:	4b25      	ldr	r3, [pc, #148]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800776c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776e:	2203      	movs	r2, #3
 8007770:	4393      	bics	r3, r2
 8007772:	0019      	movs	r1, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	4b21      	ldr	r3, [pc, #132]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800777a:	430a      	orrs	r2, r1
 800777c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2202      	movs	r2, #2
 8007784:	4013      	ands	r3, r2
 8007786:	d009      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007788:	4b1d      	ldr	r3, [pc, #116]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800778a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778c:	220c      	movs	r2, #12
 800778e:	4393      	bics	r3, r2
 8007790:	0019      	movs	r1, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	4b1a      	ldr	r3, [pc, #104]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007798:	430a      	orrs	r2, r1
 800779a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2204      	movs	r2, #4
 80077a2:	4013      	ands	r3, r2
 80077a4:	d009      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077a6:	4b16      	ldr	r3, [pc, #88]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80077a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077aa:	4a1c      	ldr	r2, [pc, #112]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	0019      	movs	r1, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	4b12      	ldr	r3, [pc, #72]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80077b6:	430a      	orrs	r2, r1
 80077b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2208      	movs	r2, #8
 80077c0:	4013      	ands	r3, r2
 80077c2:	d009      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80077c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c8:	4a15      	ldr	r2, [pc, #84]	; (8007820 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	0019      	movs	r1, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	4b0b      	ldr	r3, [pc, #44]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80077d4:	430a      	orrs	r2, r1
 80077d6:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2280      	movs	r2, #128	; 0x80
 80077de:	4013      	ands	r3, r2
 80077e0:	d009      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80077e2:	4b07      	ldr	r3, [pc, #28]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80077e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e6:	4a0f      	ldr	r2, [pc, #60]	; (8007824 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	0019      	movs	r1, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699a      	ldr	r2, [r3, #24]
 80077f0:	4b03      	ldr	r3, [pc, #12]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80077f2:	430a      	orrs	r2, r1
 80077f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	0018      	movs	r0, r3
 80077fa:	46bd      	mov	sp, r7
 80077fc:	b006      	add	sp, #24
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40021000 	.word	0x40021000
 8007804:	40007000 	.word	0x40007000
 8007808:	fffcffff 	.word	0xfffcffff
 800780c:	fff7ffff 	.word	0xfff7ffff
 8007810:	00001388 	.word	0x00001388
 8007814:	ffcfffff 	.word	0xffcfffff
 8007818:	efffffff 	.word	0xefffffff
 800781c:	fffff3ff 	.word	0xfffff3ff
 8007820:	ffffcfff 	.word	0xffffcfff
 8007824:	fff3ffff 	.word	0xfff3ffff

08007828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d101      	bne.n	800783a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e059      	b.n	80078ee <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2251      	movs	r2, #81	; 0x51
 8007844:	5c9b      	ldrb	r3, [r3, r2]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d107      	bne.n	800785c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2250      	movs	r2, #80	; 0x50
 8007850:	2100      	movs	r1, #0
 8007852:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	0018      	movs	r0, r3
 8007858:	f7fd f816 	bl	8004888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2251      	movs	r2, #81	; 0x51
 8007860:	2102      	movs	r1, #2
 8007862:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2140      	movs	r1, #64	; 0x40
 8007870:	438a      	bics	r2, r1
 8007872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6999      	ldr	r1, [r3, #24]
 8007894:	2380      	movs	r3, #128	; 0x80
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	400b      	ands	r3, r1
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	0011      	movs	r1, r2
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	2204      	movs	r2, #4
 80078be:	4013      	ands	r3, r2
 80078c0:	0019      	movs	r1, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4907      	ldr	r1, [pc, #28]	; (80078f8 <HAL_SPI_Init+0xd0>)
 80078da:	400a      	ands	r2, r1
 80078dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2251      	movs	r2, #81	; 0x51
 80078e8:	2101      	movs	r1, #1
 80078ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	0018      	movs	r0, r3
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b002      	add	sp, #8
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	fffff7ff 	.word	0xfffff7ff

080078fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e01e      	b.n	800794c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2239      	movs	r2, #57	; 0x39
 8007912:	5c9b      	ldrb	r3, [r3, r2]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d107      	bne.n	800792a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2238      	movs	r2, #56	; 0x38
 800791e:	2100      	movs	r1, #0
 8007920:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	0018      	movs	r0, r3
 8007926:	f7fd fb41 	bl	8004fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2239      	movs	r2, #57	; 0x39
 800792e:	2102      	movs	r1, #2
 8007930:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3304      	adds	r3, #4
 800793a:	0019      	movs	r1, r3
 800793c:	0010      	movs	r0, r2
 800793e:	f000 f9f1 	bl	8007d24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2239      	movs	r2, #57	; 0x39
 8007946:	2101      	movs	r1, #1
 8007948:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	0018      	movs	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	b002      	add	sp, #8
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2101      	movs	r1, #1
 8007968:	430a      	orrs	r2, r1
 800796a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2207      	movs	r2, #7
 8007974:	4013      	ands	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b06      	cmp	r3, #6
 800797c:	d007      	beq.n	800798e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2101      	movs	r1, #1
 800798a:	430a      	orrs	r2, r1
 800798c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	0018      	movs	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	b004      	add	sp, #16
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	2202      	movs	r2, #2
 80079a8:	4013      	ands	r3, r2
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d124      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	2202      	movs	r2, #2
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d11d      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2203      	movs	r2, #3
 80079c2:	4252      	negs	r2, r2
 80079c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	2203      	movs	r2, #3
 80079d4:	4013      	ands	r3, r2
 80079d6:	d004      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	0018      	movs	r0, r3
 80079dc:	f000 f98a 	bl	8007cf4 <HAL_TIM_IC_CaptureCallback>
 80079e0:	e007      	b.n	80079f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f000 f97d 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	0018      	movs	r0, r3
 80079ee:	f000 f989 	bl	8007d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2204      	movs	r2, #4
 8007a00:	4013      	ands	r3, r2
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d125      	bne.n	8007a52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	2204      	movs	r2, #4
 8007a0e:	4013      	ands	r3, r2
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	d11e      	bne.n	8007a52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2205      	movs	r2, #5
 8007a1a:	4252      	negs	r2, r2
 8007a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2202      	movs	r2, #2
 8007a22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	23c0      	movs	r3, #192	; 0xc0
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4013      	ands	r3, r2
 8007a30:	d004      	beq.n	8007a3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	0018      	movs	r0, r3
 8007a36:	f000 f95d 	bl	8007cf4 <HAL_TIM_IC_CaptureCallback>
 8007a3a:	e007      	b.n	8007a4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f000 f950 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	0018      	movs	r0, r3
 8007a48:	f000 f95c 	bl	8007d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d124      	bne.n	8007aaa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2208      	movs	r2, #8
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d11d      	bne.n	8007aaa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2209      	movs	r2, #9
 8007a74:	4252      	negs	r2, r2
 8007a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2204      	movs	r2, #4
 8007a7c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	2203      	movs	r2, #3
 8007a86:	4013      	ands	r3, r2
 8007a88:	d004      	beq.n	8007a94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	f000 f931 	bl	8007cf4 <HAL_TIM_IC_CaptureCallback>
 8007a92:	e007      	b.n	8007aa4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	0018      	movs	r0, r3
 8007a98:	f000 f924 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f000 f930 	bl	8007d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2210      	movs	r2, #16
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	d125      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	2210      	movs	r2, #16
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	2b10      	cmp	r3, #16
 8007ac4:	d11e      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2211      	movs	r2, #17
 8007acc:	4252      	negs	r2, r2
 8007ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2208      	movs	r2, #8
 8007ad4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69da      	ldr	r2, [r3, #28]
 8007adc:	23c0      	movs	r3, #192	; 0xc0
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	d004      	beq.n	8007aee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f000 f904 	bl	8007cf4 <HAL_TIM_IC_CaptureCallback>
 8007aec:	e007      	b.n	8007afe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 f8f7 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	0018      	movs	r0, r3
 8007afa:	f000 f903 	bl	8007d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d10f      	bne.n	8007b32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d108      	bne.n	8007b32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2202      	movs	r2, #2
 8007b26:	4252      	negs	r2, r2
 8007b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f7fd f97b 	bl	8004e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	2240      	movs	r2, #64	; 0x40
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	2b40      	cmp	r3, #64	; 0x40
 8007b3e:	d10f      	bne.n	8007b60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	2240      	movs	r2, #64	; 0x40
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b40      	cmp	r3, #64	; 0x40
 8007b4c:	d108      	bne.n	8007b60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2241      	movs	r2, #65	; 0x41
 8007b54:	4252      	negs	r2, r2
 8007b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 f8da 	bl	8007d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b60:	46c0      	nop			; (mov r8, r8)
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b002      	add	sp, #8
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2238      	movs	r2, #56	; 0x38
 8007b76:	5c9b      	ldrb	r3, [r3, r2]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d101      	bne.n	8007b80 <HAL_TIM_ConfigClockSource+0x18>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	e0ab      	b.n	8007cd8 <HAL_TIM_ConfigClockSource+0x170>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2238      	movs	r2, #56	; 0x38
 8007b84:	2101      	movs	r1, #1
 8007b86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2239      	movs	r2, #57	; 0x39
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2277      	movs	r2, #119	; 0x77
 8007b9c:	4393      	bics	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a4f      	ldr	r2, [pc, #316]	; (8007ce0 <HAL_TIM_ConfigClockSource+0x178>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b40      	cmp	r3, #64	; 0x40
 8007bb6:	d100      	bne.n	8007bba <HAL_TIM_ConfigClockSource+0x52>
 8007bb8:	e06b      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x12a>
 8007bba:	d80e      	bhi.n	8007bda <HAL_TIM_ConfigClockSource+0x72>
 8007bbc:	2b10      	cmp	r3, #16
 8007bbe:	d100      	bne.n	8007bc2 <HAL_TIM_ConfigClockSource+0x5a>
 8007bc0:	e077      	b.n	8007cb2 <HAL_TIM_ConfigClockSource+0x14a>
 8007bc2:	d803      	bhi.n	8007bcc <HAL_TIM_ConfigClockSource+0x64>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d100      	bne.n	8007bca <HAL_TIM_ConfigClockSource+0x62>
 8007bc8:	e073      	b.n	8007cb2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007bca:	e07c      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	d100      	bne.n	8007bd2 <HAL_TIM_ConfigClockSource+0x6a>
 8007bd0:	e06f      	b.n	8007cb2 <HAL_TIM_ConfigClockSource+0x14a>
 8007bd2:	2b30      	cmp	r3, #48	; 0x30
 8007bd4:	d100      	bne.n	8007bd8 <HAL_TIM_ConfigClockSource+0x70>
 8007bd6:	e06c      	b.n	8007cb2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007bd8:	e075      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007bda:	2b70      	cmp	r3, #112	; 0x70
 8007bdc:	d00e      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0x94>
 8007bde:	d804      	bhi.n	8007bea <HAL_TIM_ConfigClockSource+0x82>
 8007be0:	2b50      	cmp	r3, #80	; 0x50
 8007be2:	d036      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0xea>
 8007be4:	2b60      	cmp	r3, #96	; 0x60
 8007be6:	d044      	beq.n	8007c72 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007be8:	e06d      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007bea:	2280      	movs	r2, #128	; 0x80
 8007bec:	0152      	lsls	r2, r2, #5
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d068      	beq.n	8007cc4 <HAL_TIM_ConfigClockSource+0x15c>
 8007bf2:	2280      	movs	r2, #128	; 0x80
 8007bf4:	0192      	lsls	r2, r2, #6
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d017      	beq.n	8007c2a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007bfa:	e064      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	6899      	ldr	r1, [r3, #8]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f000 f958 	bl	8007ec0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2277      	movs	r2, #119	; 0x77
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	609a      	str	r2, [r3, #8]
      break;
 8007c28:	e04d      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6899      	ldr	r1, [r3, #8]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f000 f941 	bl	8007ec0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2180      	movs	r1, #128	; 0x80
 8007c4a:	01c9      	lsls	r1, r1, #7
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	609a      	str	r2, [r3, #8]
      break;
 8007c50:	e039      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6818      	ldr	r0, [r3, #0]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	6859      	ldr	r1, [r3, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	001a      	movs	r2, r3
 8007c60:	f000 f8b4 	bl	8007dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2150      	movs	r1, #80	; 0x50
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	f000 f90e 	bl	8007e8c <TIM_ITRx_SetConfig>
      break;
 8007c70:	e029      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	6859      	ldr	r1, [r3, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	001a      	movs	r2, r3
 8007c80:	f000 f8d2 	bl	8007e28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2160      	movs	r1, #96	; 0x60
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	f000 f8fe 	bl	8007e8c <TIM_ITRx_SetConfig>
      break;
 8007c90:	e019      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6818      	ldr	r0, [r3, #0]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	6859      	ldr	r1, [r3, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	001a      	movs	r2, r3
 8007ca0:	f000 f894 	bl	8007dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2140      	movs	r1, #64	; 0x40
 8007caa:	0018      	movs	r0, r3
 8007cac:	f000 f8ee 	bl	8007e8c <TIM_ITRx_SetConfig>
      break;
 8007cb0:	e009      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	0019      	movs	r1, r3
 8007cbc:	0010      	movs	r0, r2
 8007cbe:	f000 f8e5 	bl	8007e8c <TIM_ITRx_SetConfig>
      break;
 8007cc2:	e000      	b.n	8007cc6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007cc4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2239      	movs	r2, #57	; 0x39
 8007cca:	2101      	movs	r1, #1
 8007ccc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2238      	movs	r2, #56	; 0x38
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	0018      	movs	r0, r3
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	b004      	add	sp, #16
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	ffff00ff 	.word	0xffff00ff

08007ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cec:	46c0      	nop			; (mov r8, r8)
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b002      	add	sp, #8
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cfc:	46c0      	nop			; (mov r8, r8)
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	b002      	add	sp, #8
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d0c:	46c0      	nop			; (mov r8, r8)
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b002      	add	sp, #8
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d1c:	46c0      	nop			; (mov r8, r8)
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b002      	add	sp, #8
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	2380      	movs	r3, #128	; 0x80
 8007d38:	05db      	lsls	r3, r3, #23
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d007      	beq.n	8007d4e <TIM_Base_SetConfig+0x2a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a1f      	ldr	r2, [pc, #124]	; (8007dc0 <TIM_Base_SetConfig+0x9c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d003      	beq.n	8007d4e <TIM_Base_SetConfig+0x2a>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a1e      	ldr	r2, [pc, #120]	; (8007dc4 <TIM_Base_SetConfig+0xa0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d108      	bne.n	8007d60 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2270      	movs	r2, #112	; 0x70
 8007d52:	4393      	bics	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	2380      	movs	r3, #128	; 0x80
 8007d64:	05db      	lsls	r3, r3, #23
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d007      	beq.n	8007d7a <TIM_Base_SetConfig+0x56>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <TIM_Base_SetConfig+0x9c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d003      	beq.n	8007d7a <TIM_Base_SetConfig+0x56>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a13      	ldr	r2, [pc, #76]	; (8007dc4 <TIM_Base_SetConfig+0xa0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d108      	bne.n	8007d8c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <TIM_Base_SetConfig+0xa4>)
 8007d7e:	4013      	ands	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2280      	movs	r2, #128	; 0x80
 8007d90:	4393      	bics	r3, r2
 8007d92:	001a      	movs	r2, r3
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	615a      	str	r2, [r3, #20]
}
 8007db8:	46c0      	nop			; (mov r8, r8)
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	b004      	add	sp, #16
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40010800 	.word	0x40010800
 8007dc4:	40011400 	.word	0x40011400
 8007dc8:	fffffcff 	.word	0xfffffcff

08007dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	2201      	movs	r2, #1
 8007de4:	4393      	bics	r3, r2
 8007de6:	001a      	movs	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	22f0      	movs	r2, #240	; 0xf0
 8007df6:	4393      	bics	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	220a      	movs	r2, #10
 8007e08:	4393      	bics	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	621a      	str	r2, [r3, #32]
}
 8007e20:	46c0      	nop			; (mov r8, r8)
 8007e22:	46bd      	mov	sp, r7
 8007e24:	b006      	add	sp, #24
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	2210      	movs	r2, #16
 8007e3a:	4393      	bics	r3, r2
 8007e3c:	001a      	movs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	4a0d      	ldr	r2, [pc, #52]	; (8007e88 <TIM_TI2_ConfigInputStage+0x60>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	031b      	lsls	r3, r3, #12
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	22a0      	movs	r2, #160	; 0xa0
 8007e64:	4393      	bics	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	621a      	str	r2, [r3, #32]
}
 8007e7e:	46c0      	nop			; (mov r8, r8)
 8007e80:	46bd      	mov	sp, r7
 8007e82:	b006      	add	sp, #24
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	ffff0fff 	.word	0xffff0fff

08007e8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2270      	movs	r2, #112	; 0x70
 8007ea0:	4393      	bics	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	2207      	movs	r2, #7
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	609a      	str	r2, [r3, #8]
}
 8007eb6:	46c0      	nop			; (mov r8, r8)
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b004      	add	sp, #16
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	4a09      	ldr	r2, [pc, #36]	; (8007efc <TIM_ETR_SetConfig+0x3c>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	021a      	lsls	r2, r3, #8
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	609a      	str	r2, [r3, #8]
}
 8007ef4:	46c0      	nop			; (mov r8, r8)
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	b006      	add	sp, #24
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	ffff00ff 	.word	0xffff00ff

08007f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2238      	movs	r2, #56	; 0x38
 8007f0e:	5c9b      	ldrb	r3, [r3, r2]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d101      	bne.n	8007f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e032      	b.n	8007f7e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2238      	movs	r2, #56	; 0x38
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2239      	movs	r2, #57	; 0x39
 8007f24:	2102      	movs	r1, #2
 8007f26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2270      	movs	r2, #112	; 0x70
 8007f3c:	4393      	bics	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2280      	movs	r2, #128	; 0x80
 8007f4e:	4393      	bics	r3, r2
 8007f50:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2239      	movs	r2, #57	; 0x39
 8007f70:	2101      	movs	r1, #1
 8007f72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2238      	movs	r2, #56	; 0x38
 8007f78:	2100      	movs	r1, #0
 8007f7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	0018      	movs	r0, r3
 8007f80:	46bd      	mov	sp, r7
 8007f82:	b004      	add	sp, #16
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e044      	b.n	8008024 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d107      	bne.n	8007fb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2270      	movs	r2, #112	; 0x70
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	0018      	movs	r0, r3
 8007fae:	f7fd f84b 	bl	8005048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2224      	movs	r2, #36	; 0x24
 8007fb6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	438a      	bics	r2, r1
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f000 f8d8 	bl	8008180 <UART_SetConfig>
 8007fd0:	0003      	movs	r3, r0
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e024      	b.n	8008024 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	f000 fbe3 	bl	80087b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	490d      	ldr	r1, [pc, #52]	; (800802c <HAL_UART_Init+0xa4>)
 8007ff6:	400a      	ands	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	212a      	movs	r1, #42	; 0x2a
 8008006:	438a      	bics	r2, r1
 8008008:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2101      	movs	r1, #1
 8008016:	430a      	orrs	r2, r1
 8008018:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	0018      	movs	r0, r3
 800801e:	f000 fc7b 	bl	8008918 <UART_CheckIdleState>
 8008022:	0003      	movs	r3, r0
}
 8008024:	0018      	movs	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	b002      	add	sp, #8
 800802a:	bd80      	pop	{r7, pc}
 800802c:	ffffb7ff 	.word	0xffffb7ff

08008030 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08a      	sub	sp, #40	; 0x28
 8008034:	af02      	add	r7, sp, #8
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	1dbb      	adds	r3, r7, #6
 800803e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008044:	2b20      	cmp	r3, #32
 8008046:	d000      	beq.n	800804a <HAL_UART_Transmit+0x1a>
 8008048:	e094      	b.n	8008174 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <HAL_UART_Transmit+0x28>
 8008050:	1dbb      	adds	r3, r7, #6
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e08c      	b.n	8008176 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	689a      	ldr	r2, [r3, #8]
 8008060:	2380      	movs	r3, #128	; 0x80
 8008062:	015b      	lsls	r3, r3, #5
 8008064:	429a      	cmp	r2, r3
 8008066:	d109      	bne.n	800807c <HAL_UART_Transmit+0x4c>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d105      	bne.n	800807c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2201      	movs	r2, #1
 8008074:	4013      	ands	r3, r2
 8008076:	d001      	beq.n	800807c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e07c      	b.n	8008176 <HAL_UART_Transmit+0x146>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2270      	movs	r2, #112	; 0x70
 8008080:	5c9b      	ldrb	r3, [r3, r2]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d101      	bne.n	800808a <HAL_UART_Transmit+0x5a>
 8008086:	2302      	movs	r3, #2
 8008088:	e075      	b.n	8008176 <HAL_UART_Transmit+0x146>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2270      	movs	r2, #112	; 0x70
 800808e:	2101      	movs	r1, #1
 8008090:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2221      	movs	r2, #33	; 0x21
 800809c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800809e:	f7fd f963 	bl	8005368 <HAL_GetTick>
 80080a2:	0003      	movs	r3, r0
 80080a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	1dba      	adds	r2, r7, #6
 80080aa:	2150      	movs	r1, #80	; 0x50
 80080ac:	8812      	ldrh	r2, [r2, #0]
 80080ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	1dba      	adds	r2, r7, #6
 80080b4:	2152      	movs	r1, #82	; 0x52
 80080b6:	8812      	ldrh	r2, [r2, #0]
 80080b8:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	2380      	movs	r3, #128	; 0x80
 80080c0:	015b      	lsls	r3, r3, #5
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d108      	bne.n	80080d8 <HAL_UART_Transmit+0xa8>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d104      	bne.n	80080d8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	e003      	b.n	80080e0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080e0:	e02c      	b.n	800813c <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	0013      	movs	r3, r2
 80080ec:	2200      	movs	r2, #0
 80080ee:	2180      	movs	r1, #128	; 0x80
 80080f0:	f000 fc58 	bl	80089a4 <UART_WaitOnFlagUntilTimeout>
 80080f4:	1e03      	subs	r3, r0, #0
 80080f6:	d001      	beq.n	80080fc <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e03c      	b.n	8008176 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10b      	bne.n	800811a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	001a      	movs	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	05d2      	lsls	r2, r2, #23
 800810e:	0dd2      	lsrs	r2, r2, #23
 8008110:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	3302      	adds	r3, #2
 8008116:	61bb      	str	r3, [r7, #24]
 8008118:	e007      	b.n	800812a <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	781a      	ldrb	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	3301      	adds	r3, #1
 8008128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2252      	movs	r2, #82	; 0x52
 800812e:	5a9b      	ldrh	r3, [r3, r2]
 8008130:	b29b      	uxth	r3, r3
 8008132:	3b01      	subs	r3, #1
 8008134:	b299      	uxth	r1, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2252      	movs	r2, #82	; 0x52
 800813a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2252      	movs	r2, #82	; 0x52
 8008140:	5a9b      	ldrh	r3, [r3, r2]
 8008142:	b29b      	uxth	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1cc      	bne.n	80080e2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	0013      	movs	r3, r2
 8008152:	2200      	movs	r2, #0
 8008154:	2140      	movs	r1, #64	; 0x40
 8008156:	f000 fc25 	bl	80089a4 <UART_WaitOnFlagUntilTimeout>
 800815a:	1e03      	subs	r3, r0, #0
 800815c:	d001      	beq.n	8008162 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e009      	b.n	8008176 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2220      	movs	r2, #32
 8008166:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2270      	movs	r2, #112	; 0x70
 800816c:	2100      	movs	r1, #0
 800816e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	e000      	b.n	8008176 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	0018      	movs	r0, r3
 8008178:	46bd      	mov	sp, r7
 800817a:	b008      	add	sp, #32
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008180:	b5b0      	push	{r4, r5, r7, lr}
 8008182:	b08e      	sub	sp, #56	; 0x38
 8008184:	af00      	add	r7, sp, #0
 8008186:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8008188:	231b      	movs	r3, #27
 800818a:	2218      	movs	r2, #24
 800818c:	4694      	mov	ip, r2
 800818e:	44bc      	add	ip, r7
 8008190:	4463      	add	r3, ip
 8008192:	2210      	movs	r2, #16
 8008194:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8008196:	2300      	movs	r3, #0
 8008198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800819a:	2313      	movs	r3, #19
 800819c:	2218      	movs	r2, #24
 800819e:	4694      	mov	ip, r2
 80081a0:	44bc      	add	ip, r7
 80081a2:	4463      	add	r3, ip
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	431a      	orrs	r2, r3
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	431a      	orrs	r2, r3
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4ac8      	ldr	r2, [pc, #800]	; (80084ec <UART_SetConfig+0x36c>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	0019      	movs	r1, r3
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081d6:	430a      	orrs	r2, r1
 80081d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4ac3      	ldr	r2, [pc, #780]	; (80084f0 <UART_SetConfig+0x370>)
 80081e2:	4013      	ands	r3, r2
 80081e4:	0019      	movs	r1, r3
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4abd      	ldr	r2, [pc, #756]	; (80084f4 <UART_SetConfig+0x374>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d004      	beq.n	800820c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008208:	4313      	orrs	r3, r2
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	4ab9      	ldr	r2, [pc, #740]	; (80084f8 <UART_SetConfig+0x378>)
 8008214:	4013      	ands	r3, r2
 8008216:	0019      	movs	r1, r3
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800821e:	430a      	orrs	r2, r1
 8008220:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4ab5      	ldr	r2, [pc, #724]	; (80084fc <UART_SetConfig+0x37c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d134      	bne.n	8008296 <UART_SetConfig+0x116>
 800822c:	4bb4      	ldr	r3, [pc, #720]	; (8008500 <UART_SetConfig+0x380>)
 800822e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008230:	2203      	movs	r2, #3
 8008232:	4013      	ands	r3, r2
 8008234:	2b01      	cmp	r3, #1
 8008236:	d015      	beq.n	8008264 <UART_SetConfig+0xe4>
 8008238:	d304      	bcc.n	8008244 <UART_SetConfig+0xc4>
 800823a:	2b02      	cmp	r3, #2
 800823c:	d00a      	beq.n	8008254 <UART_SetConfig+0xd4>
 800823e:	2b03      	cmp	r3, #3
 8008240:	d018      	beq.n	8008274 <UART_SetConfig+0xf4>
 8008242:	e01f      	b.n	8008284 <UART_SetConfig+0x104>
 8008244:	231b      	movs	r3, #27
 8008246:	2218      	movs	r2, #24
 8008248:	4694      	mov	ip, r2
 800824a:	44bc      	add	ip, r7
 800824c:	4463      	add	r3, ip
 800824e:	2201      	movs	r2, #1
 8008250:	701a      	strb	r2, [r3, #0]
 8008252:	e0ab      	b.n	80083ac <UART_SetConfig+0x22c>
 8008254:	231b      	movs	r3, #27
 8008256:	2218      	movs	r2, #24
 8008258:	4694      	mov	ip, r2
 800825a:	44bc      	add	ip, r7
 800825c:	4463      	add	r3, ip
 800825e:	2202      	movs	r2, #2
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	e0a3      	b.n	80083ac <UART_SetConfig+0x22c>
 8008264:	231b      	movs	r3, #27
 8008266:	2218      	movs	r2, #24
 8008268:	4694      	mov	ip, r2
 800826a:	44bc      	add	ip, r7
 800826c:	4463      	add	r3, ip
 800826e:	2204      	movs	r2, #4
 8008270:	701a      	strb	r2, [r3, #0]
 8008272:	e09b      	b.n	80083ac <UART_SetConfig+0x22c>
 8008274:	231b      	movs	r3, #27
 8008276:	2218      	movs	r2, #24
 8008278:	4694      	mov	ip, r2
 800827a:	44bc      	add	ip, r7
 800827c:	4463      	add	r3, ip
 800827e:	2208      	movs	r2, #8
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e093      	b.n	80083ac <UART_SetConfig+0x22c>
 8008284:	231b      	movs	r3, #27
 8008286:	2218      	movs	r2, #24
 8008288:	4694      	mov	ip, r2
 800828a:	44bc      	add	ip, r7
 800828c:	4463      	add	r3, ip
 800828e:	2210      	movs	r2, #16
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	46c0      	nop			; (mov r8, r8)
 8008294:	e08a      	b.n	80083ac <UART_SetConfig+0x22c>
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a9a      	ldr	r2, [pc, #616]	; (8008504 <UART_SetConfig+0x384>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d137      	bne.n	8008310 <UART_SetConfig+0x190>
 80082a0:	4b97      	ldr	r3, [pc, #604]	; (8008500 <UART_SetConfig+0x380>)
 80082a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a4:	220c      	movs	r2, #12
 80082a6:	4013      	ands	r3, r2
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d018      	beq.n	80082de <UART_SetConfig+0x15e>
 80082ac:	d802      	bhi.n	80082b4 <UART_SetConfig+0x134>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <UART_SetConfig+0x13e>
 80082b2:	e024      	b.n	80082fe <UART_SetConfig+0x17e>
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d00a      	beq.n	80082ce <UART_SetConfig+0x14e>
 80082b8:	2b0c      	cmp	r3, #12
 80082ba:	d018      	beq.n	80082ee <UART_SetConfig+0x16e>
 80082bc:	e01f      	b.n	80082fe <UART_SetConfig+0x17e>
 80082be:	231b      	movs	r3, #27
 80082c0:	2218      	movs	r2, #24
 80082c2:	4694      	mov	ip, r2
 80082c4:	44bc      	add	ip, r7
 80082c6:	4463      	add	r3, ip
 80082c8:	2200      	movs	r2, #0
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	e06e      	b.n	80083ac <UART_SetConfig+0x22c>
 80082ce:	231b      	movs	r3, #27
 80082d0:	2218      	movs	r2, #24
 80082d2:	4694      	mov	ip, r2
 80082d4:	44bc      	add	ip, r7
 80082d6:	4463      	add	r3, ip
 80082d8:	2202      	movs	r2, #2
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	e066      	b.n	80083ac <UART_SetConfig+0x22c>
 80082de:	231b      	movs	r3, #27
 80082e0:	2218      	movs	r2, #24
 80082e2:	4694      	mov	ip, r2
 80082e4:	44bc      	add	ip, r7
 80082e6:	4463      	add	r3, ip
 80082e8:	2204      	movs	r2, #4
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	e05e      	b.n	80083ac <UART_SetConfig+0x22c>
 80082ee:	231b      	movs	r3, #27
 80082f0:	2218      	movs	r2, #24
 80082f2:	4694      	mov	ip, r2
 80082f4:	44bc      	add	ip, r7
 80082f6:	4463      	add	r3, ip
 80082f8:	2208      	movs	r2, #8
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e056      	b.n	80083ac <UART_SetConfig+0x22c>
 80082fe:	231b      	movs	r3, #27
 8008300:	2218      	movs	r2, #24
 8008302:	4694      	mov	ip, r2
 8008304:	44bc      	add	ip, r7
 8008306:	4463      	add	r3, ip
 8008308:	2210      	movs	r2, #16
 800830a:	701a      	strb	r2, [r3, #0]
 800830c:	46c0      	nop			; (mov r8, r8)
 800830e:	e04d      	b.n	80083ac <UART_SetConfig+0x22c>
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a77      	ldr	r2, [pc, #476]	; (80084f4 <UART_SetConfig+0x374>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d141      	bne.n	800839e <UART_SetConfig+0x21e>
 800831a:	4b79      	ldr	r3, [pc, #484]	; (8008500 <UART_SetConfig+0x380>)
 800831c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800831e:	23c0      	movs	r3, #192	; 0xc0
 8008320:	011b      	lsls	r3, r3, #4
 8008322:	4013      	ands	r3, r2
 8008324:	2280      	movs	r2, #128	; 0x80
 8008326:	00d2      	lsls	r2, r2, #3
 8008328:	4293      	cmp	r3, r2
 800832a:	d01f      	beq.n	800836c <UART_SetConfig+0x1ec>
 800832c:	2280      	movs	r2, #128	; 0x80
 800832e:	00d2      	lsls	r2, r2, #3
 8008330:	4293      	cmp	r3, r2
 8008332:	d802      	bhi.n	800833a <UART_SetConfig+0x1ba>
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <UART_SetConfig+0x1cc>
 8008338:	e028      	b.n	800838c <UART_SetConfig+0x20c>
 800833a:	2280      	movs	r2, #128	; 0x80
 800833c:	0112      	lsls	r2, r2, #4
 800833e:	4293      	cmp	r3, r2
 8008340:	d00c      	beq.n	800835c <UART_SetConfig+0x1dc>
 8008342:	22c0      	movs	r2, #192	; 0xc0
 8008344:	0112      	lsls	r2, r2, #4
 8008346:	4293      	cmp	r3, r2
 8008348:	d018      	beq.n	800837c <UART_SetConfig+0x1fc>
 800834a:	e01f      	b.n	800838c <UART_SetConfig+0x20c>
 800834c:	231b      	movs	r3, #27
 800834e:	2218      	movs	r2, #24
 8008350:	4694      	mov	ip, r2
 8008352:	44bc      	add	ip, r7
 8008354:	4463      	add	r3, ip
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
 800835a:	e027      	b.n	80083ac <UART_SetConfig+0x22c>
 800835c:	231b      	movs	r3, #27
 800835e:	2218      	movs	r2, #24
 8008360:	4694      	mov	ip, r2
 8008362:	44bc      	add	ip, r7
 8008364:	4463      	add	r3, ip
 8008366:	2202      	movs	r2, #2
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e01f      	b.n	80083ac <UART_SetConfig+0x22c>
 800836c:	231b      	movs	r3, #27
 800836e:	2218      	movs	r2, #24
 8008370:	4694      	mov	ip, r2
 8008372:	44bc      	add	ip, r7
 8008374:	4463      	add	r3, ip
 8008376:	2204      	movs	r2, #4
 8008378:	701a      	strb	r2, [r3, #0]
 800837a:	e017      	b.n	80083ac <UART_SetConfig+0x22c>
 800837c:	231b      	movs	r3, #27
 800837e:	2218      	movs	r2, #24
 8008380:	4694      	mov	ip, r2
 8008382:	44bc      	add	ip, r7
 8008384:	4463      	add	r3, ip
 8008386:	2208      	movs	r2, #8
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	e00f      	b.n	80083ac <UART_SetConfig+0x22c>
 800838c:	231b      	movs	r3, #27
 800838e:	2218      	movs	r2, #24
 8008390:	4694      	mov	ip, r2
 8008392:	44bc      	add	ip, r7
 8008394:	4463      	add	r3, ip
 8008396:	2210      	movs	r2, #16
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	e006      	b.n	80083ac <UART_SetConfig+0x22c>
 800839e:	231b      	movs	r3, #27
 80083a0:	2218      	movs	r2, #24
 80083a2:	4694      	mov	ip, r2
 80083a4:	44bc      	add	ip, r7
 80083a6:	4463      	add	r3, ip
 80083a8:	2210      	movs	r2, #16
 80083aa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a50      	ldr	r2, [pc, #320]	; (80084f4 <UART_SetConfig+0x374>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d000      	beq.n	80083b8 <UART_SetConfig+0x238>
 80083b6:	e083      	b.n	80084c0 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083b8:	231b      	movs	r3, #27
 80083ba:	2218      	movs	r2, #24
 80083bc:	4694      	mov	ip, r2
 80083be:	44bc      	add	ip, r7
 80083c0:	4463      	add	r3, ip
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d00d      	beq.n	80083e4 <UART_SetConfig+0x264>
 80083c8:	dc02      	bgt.n	80083d0 <UART_SetConfig+0x250>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d005      	beq.n	80083da <UART_SetConfig+0x25a>
 80083ce:	e01d      	b.n	800840c <UART_SetConfig+0x28c>
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d012      	beq.n	80083fa <UART_SetConfig+0x27a>
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d015      	beq.n	8008404 <UART_SetConfig+0x284>
 80083d8:	e018      	b.n	800840c <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80083da:	f7ff f8c3 	bl	8007564 <HAL_RCC_GetPCLK1Freq>
 80083de:	0003      	movs	r3, r0
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083e2:	e01b      	b.n	800841c <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083e4:	4b46      	ldr	r3, [pc, #280]	; (8008500 <UART_SetConfig+0x380>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2210      	movs	r2, #16
 80083ea:	4013      	ands	r3, r2
 80083ec:	d002      	beq.n	80083f4 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80083ee:	4b46      	ldr	r3, [pc, #280]	; (8008508 <UART_SetConfig+0x388>)
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80083f2:	e013      	b.n	800841c <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80083f4:	4b45      	ldr	r3, [pc, #276]	; (800850c <UART_SetConfig+0x38c>)
 80083f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083f8:	e010      	b.n	800841c <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80083fa:	f7ff f825 	bl	8007448 <HAL_RCC_GetSysClockFreq>
 80083fe:	0003      	movs	r3, r0
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008402:	e00b      	b.n	800841c <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8008404:	2380      	movs	r3, #128	; 0x80
 8008406:	021b      	lsls	r3, r3, #8
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800840a:	e007      	b.n	800841c <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800840c:	2313      	movs	r3, #19
 800840e:	2218      	movs	r2, #24
 8008410:	4694      	mov	ip, r2
 8008412:	44bc      	add	ip, r7
 8008414:	4463      	add	r3, ip
 8008416:	2201      	movs	r2, #1
 8008418:	701a      	strb	r2, [r3, #0]
        break;
 800841a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	2b00      	cmp	r3, #0
 8008420:	d100      	bne.n	8008424 <UART_SetConfig+0x2a4>
 8008422:	e1a6      	b.n	8008772 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	0013      	movs	r3, r2
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	189b      	adds	r3, r3, r2
 800842e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008430:	429a      	cmp	r2, r3
 8008432:	d305      	bcc.n	8008440 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800843a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843c:	429a      	cmp	r2, r3
 800843e:	d907      	bls.n	8008450 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8008440:	2313      	movs	r3, #19
 8008442:	2218      	movs	r2, #24
 8008444:	4694      	mov	ip, r2
 8008446:	44bc      	add	ip, r7
 8008448:	4463      	add	r3, ip
 800844a:	2201      	movs	r2, #1
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e190      	b.n	8008772 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	613b      	str	r3, [r7, #16]
 8008454:	2300      	movs	r3, #0
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	6939      	ldr	r1, [r7, #16]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	000b      	movs	r3, r1
 800845e:	0e1b      	lsrs	r3, r3, #24
 8008460:	0010      	movs	r0, r2
 8008462:	0205      	lsls	r5, r0, #8
 8008464:	431d      	orrs	r5, r3
 8008466:	000b      	movs	r3, r1
 8008468:	021c      	lsls	r4, r3, #8
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	085b      	lsrs	r3, r3, #1
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	68b8      	ldr	r0, [r7, #8]
 8008478:	68f9      	ldr	r1, [r7, #12]
 800847a:	1900      	adds	r0, r0, r4
 800847c:	4169      	adcs	r1, r5
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	2300      	movs	r3, #0
 8008486:	607b      	str	r3, [r7, #4]
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f7f7 ff0e 	bl	80002ac <__aeabi_uldivmod>
 8008490:	0003      	movs	r3, r0
 8008492:	000c      	movs	r4, r1
 8008494:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008498:	4a1d      	ldr	r2, [pc, #116]	; (8008510 <UART_SetConfig+0x390>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d908      	bls.n	80084b0 <UART_SetConfig+0x330>
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	4a1c      	ldr	r2, [pc, #112]	; (8008514 <UART_SetConfig+0x394>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d804      	bhi.n	80084b0 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ac:	60da      	str	r2, [r3, #12]
 80084ae:	e160      	b.n	8008772 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 80084b0:	2313      	movs	r3, #19
 80084b2:	2218      	movs	r2, #24
 80084b4:	4694      	mov	ip, r2
 80084b6:	44bc      	add	ip, r7
 80084b8:	4463      	add	r3, ip
 80084ba:	2201      	movs	r2, #1
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	e158      	b.n	8008772 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	69da      	ldr	r2, [r3, #28]
 80084c4:	2380      	movs	r3, #128	; 0x80
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d000      	beq.n	80084ce <UART_SetConfig+0x34e>
 80084cc:	e0c3      	b.n	8008656 <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 80084ce:	231b      	movs	r3, #27
 80084d0:	2218      	movs	r2, #24
 80084d2:	4694      	mov	ip, r2
 80084d4:	44bc      	add	ip, r7
 80084d6:	4463      	add	r3, ip
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b08      	cmp	r3, #8
 80084dc:	d900      	bls.n	80084e0 <UART_SetConfig+0x360>
 80084de:	e086      	b.n	80085ee <UART_SetConfig+0x46e>
 80084e0:	009a      	lsls	r2, r3, #2
 80084e2:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <UART_SetConfig+0x398>)
 80084e4:	18d3      	adds	r3, r2, r3
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	469f      	mov	pc, r3
 80084ea:	46c0      	nop			; (mov r8, r8)
 80084ec:	efff69f3 	.word	0xefff69f3
 80084f0:	ffffcfff 	.word	0xffffcfff
 80084f4:	40004800 	.word	0x40004800
 80084f8:	fffff4ff 	.word	0xfffff4ff
 80084fc:	40013800 	.word	0x40013800
 8008500:	40021000 	.word	0x40021000
 8008504:	40004400 	.word	0x40004400
 8008508:	003d0900 	.word	0x003d0900
 800850c:	00f42400 	.word	0x00f42400
 8008510:	000002ff 	.word	0x000002ff
 8008514:	000fffff 	.word	0x000fffff
 8008518:	0800a1e0 	.word	0x0800a1e0
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800851c:	f7ff f822 	bl	8007564 <HAL_RCC_GetPCLK1Freq>
 8008520:	0003      	movs	r3, r0
 8008522:	005a      	lsls	r2, r3, #1
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	085b      	lsrs	r3, r3, #1
 800852a:	18d2      	adds	r2, r2, r3
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	0019      	movs	r1, r3
 8008532:	0010      	movs	r0, r2
 8008534:	f7f7 fdf0 	bl	8000118 <__udivsi3>
 8008538:	0003      	movs	r3, r0
 800853a:	b29b      	uxth	r3, r3
 800853c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800853e:	e05e      	b.n	80085fe <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008540:	f7ff f826 	bl	8007590 <HAL_RCC_GetPCLK2Freq>
 8008544:	0003      	movs	r3, r0
 8008546:	005a      	lsls	r2, r3, #1
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	18d2      	adds	r2, r2, r3
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	0019      	movs	r1, r3
 8008556:	0010      	movs	r0, r2
 8008558:	f7f7 fdde 	bl	8000118 <__udivsi3>
 800855c:	0003      	movs	r3, r0
 800855e:	b29b      	uxth	r3, r3
 8008560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008562:	e04c      	b.n	80085fe <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008564:	4b8b      	ldr	r3, [pc, #556]	; (8008794 <UART_SetConfig+0x614>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2210      	movs	r2, #16
 800856a:	4013      	ands	r3, r2
 800856c:	d00e      	beq.n	800858c <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	4a88      	ldr	r2, [pc, #544]	; (8008798 <UART_SetConfig+0x618>)
 8008576:	189a      	adds	r2, r3, r2
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	0019      	movs	r1, r3
 800857e:	0010      	movs	r0, r2
 8008580:	f7f7 fdca 	bl	8000118 <__udivsi3>
 8008584:	0003      	movs	r3, r0
 8008586:	b29b      	uxth	r3, r3
 8008588:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800858a:	e038      	b.n	80085fe <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	085b      	lsrs	r3, r3, #1
 8008592:	4a82      	ldr	r2, [pc, #520]	; (800879c <UART_SetConfig+0x61c>)
 8008594:	189a      	adds	r2, r3, r2
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	0019      	movs	r1, r3
 800859c:	0010      	movs	r0, r2
 800859e:	f7f7 fdbb 	bl	8000118 <__udivsi3>
 80085a2:	0003      	movs	r3, r0
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085a8:	e029      	b.n	80085fe <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80085aa:	f7fe ff4d 	bl	8007448 <HAL_RCC_GetSysClockFreq>
 80085ae:	0003      	movs	r3, r0
 80085b0:	005a      	lsls	r2, r3, #1
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	085b      	lsrs	r3, r3, #1
 80085b8:	18d2      	adds	r2, r2, r3
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	0019      	movs	r1, r3
 80085c0:	0010      	movs	r0, r2
 80085c2:	f7f7 fda9 	bl	8000118 <__udivsi3>
 80085c6:	0003      	movs	r3, r0
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085cc:	e017      	b.n	80085fe <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	085b      	lsrs	r3, r3, #1
 80085d4:	2280      	movs	r2, #128	; 0x80
 80085d6:	0252      	lsls	r2, r2, #9
 80085d8:	189a      	adds	r2, r3, r2
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	0019      	movs	r1, r3
 80085e0:	0010      	movs	r0, r2
 80085e2:	f7f7 fd99 	bl	8000118 <__udivsi3>
 80085e6:	0003      	movs	r3, r0
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085ec:	e007      	b.n	80085fe <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80085ee:	2313      	movs	r3, #19
 80085f0:	2218      	movs	r2, #24
 80085f2:	4694      	mov	ip, r2
 80085f4:	44bc      	add	ip, r7
 80085f6:	4463      	add	r3, ip
 80085f8:	2201      	movs	r2, #1
 80085fa:	701a      	strb	r2, [r3, #0]
        break;
 80085fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	2b0f      	cmp	r3, #15
 8008602:	d920      	bls.n	8008646 <UART_SetConfig+0x4c6>
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008606:	4a66      	ldr	r2, [pc, #408]	; (80087a0 <UART_SetConfig+0x620>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d81c      	bhi.n	8008646 <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	b29a      	uxth	r2, r3
 8008610:	200a      	movs	r0, #10
 8008612:	2418      	movs	r4, #24
 8008614:	193b      	adds	r3, r7, r4
 8008616:	181b      	adds	r3, r3, r0
 8008618:	210f      	movs	r1, #15
 800861a:	438a      	bics	r2, r1
 800861c:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	b29b      	uxth	r3, r3
 8008624:	2207      	movs	r2, #7
 8008626:	4013      	ands	r3, r2
 8008628:	b299      	uxth	r1, r3
 800862a:	193b      	adds	r3, r7, r4
 800862c:	181b      	adds	r3, r3, r0
 800862e:	193a      	adds	r2, r7, r4
 8008630:	1812      	adds	r2, r2, r0
 8008632:	8812      	ldrh	r2, [r2, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	193a      	adds	r2, r7, r4
 800863e:	1812      	adds	r2, r2, r0
 8008640:	8812      	ldrh	r2, [r2, #0]
 8008642:	60da      	str	r2, [r3, #12]
 8008644:	e095      	b.n	8008772 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8008646:	2313      	movs	r3, #19
 8008648:	2218      	movs	r2, #24
 800864a:	4694      	mov	ip, r2
 800864c:	44bc      	add	ip, r7
 800864e:	4463      	add	r3, ip
 8008650:	2201      	movs	r2, #1
 8008652:	701a      	strb	r2, [r3, #0]
 8008654:	e08d      	b.n	8008772 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 8008656:	231b      	movs	r3, #27
 8008658:	2218      	movs	r2, #24
 800865a:	4694      	mov	ip, r2
 800865c:	44bc      	add	ip, r7
 800865e:	4463      	add	r3, ip
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	2b08      	cmp	r3, #8
 8008664:	d86a      	bhi.n	800873c <UART_SetConfig+0x5bc>
 8008666:	009a      	lsls	r2, r3, #2
 8008668:	4b4e      	ldr	r3, [pc, #312]	; (80087a4 <UART_SetConfig+0x624>)
 800866a:	18d3      	adds	r3, r2, r3
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008670:	f7fe ff78 	bl	8007564 <HAL_RCC_GetPCLK1Freq>
 8008674:	0002      	movs	r2, r0
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	085b      	lsrs	r3, r3, #1
 800867c:	18d2      	adds	r2, r2, r3
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	0019      	movs	r1, r3
 8008684:	0010      	movs	r0, r2
 8008686:	f7f7 fd47 	bl	8000118 <__udivsi3>
 800868a:	0003      	movs	r3, r0
 800868c:	b29b      	uxth	r3, r3
 800868e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008690:	e05c      	b.n	800874c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008692:	f7fe ff7d 	bl	8007590 <HAL_RCC_GetPCLK2Freq>
 8008696:	0002      	movs	r2, r0
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	085b      	lsrs	r3, r3, #1
 800869e:	18d2      	adds	r2, r2, r3
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	0019      	movs	r1, r3
 80086a6:	0010      	movs	r0, r2
 80086a8:	f7f7 fd36 	bl	8000118 <__udivsi3>
 80086ac:	0003      	movs	r3, r0
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086b2:	e04b      	b.n	800874c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086b4:	4b37      	ldr	r3, [pc, #220]	; (8008794 <UART_SetConfig+0x614>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2210      	movs	r2, #16
 80086ba:	4013      	ands	r3, r2
 80086bc:	d00e      	beq.n	80086dc <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	4a38      	ldr	r2, [pc, #224]	; (80087a8 <UART_SetConfig+0x628>)
 80086c6:	189a      	adds	r2, r3, r2
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	0019      	movs	r1, r3
 80086ce:	0010      	movs	r0, r2
 80086d0:	f7f7 fd22 	bl	8000118 <__udivsi3>
 80086d4:	0003      	movs	r3, r0
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80086da:	e037      	b.n	800874c <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	085b      	lsrs	r3, r3, #1
 80086e2:	4a32      	ldr	r2, [pc, #200]	; (80087ac <UART_SetConfig+0x62c>)
 80086e4:	189a      	adds	r2, r3, r2
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	0019      	movs	r1, r3
 80086ec:	0010      	movs	r0, r2
 80086ee:	f7f7 fd13 	bl	8000118 <__udivsi3>
 80086f2:	0003      	movs	r3, r0
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086f8:	e028      	b.n	800874c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80086fa:	f7fe fea5 	bl	8007448 <HAL_RCC_GetSysClockFreq>
 80086fe:	0002      	movs	r2, r0
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	085b      	lsrs	r3, r3, #1
 8008706:	18d2      	adds	r2, r2, r3
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	0019      	movs	r1, r3
 800870e:	0010      	movs	r0, r2
 8008710:	f7f7 fd02 	bl	8000118 <__udivsi3>
 8008714:	0003      	movs	r3, r0
 8008716:	b29b      	uxth	r3, r3
 8008718:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800871a:	e017      	b.n	800874c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	2280      	movs	r2, #128	; 0x80
 8008724:	0212      	lsls	r2, r2, #8
 8008726:	189a      	adds	r2, r3, r2
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	0019      	movs	r1, r3
 800872e:	0010      	movs	r0, r2
 8008730:	f7f7 fcf2 	bl	8000118 <__udivsi3>
 8008734:	0003      	movs	r3, r0
 8008736:	b29b      	uxth	r3, r3
 8008738:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800873a:	e007      	b.n	800874c <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800873c:	2313      	movs	r3, #19
 800873e:	2218      	movs	r2, #24
 8008740:	4694      	mov	ip, r2
 8008742:	44bc      	add	ip, r7
 8008744:	4463      	add	r3, ip
 8008746:	2201      	movs	r2, #1
 8008748:	701a      	strb	r2, [r3, #0]
        break;
 800874a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	2b0f      	cmp	r3, #15
 8008750:	d908      	bls.n	8008764 <UART_SetConfig+0x5e4>
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	4a12      	ldr	r2, [pc, #72]	; (80087a0 <UART_SetConfig+0x620>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d804      	bhi.n	8008764 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008760:	60da      	str	r2, [r3, #12]
 8008762:	e006      	b.n	8008772 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8008764:	2313      	movs	r3, #19
 8008766:	2218      	movs	r2, #24
 8008768:	4694      	mov	ip, r2
 800876a:	44bc      	add	ip, r7
 800876c:	4463      	add	r3, ip
 800876e:	2201      	movs	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	2200      	movs	r2, #0
 8008776:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2200      	movs	r2, #0
 800877c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800877e:	2313      	movs	r3, #19
 8008780:	2218      	movs	r2, #24
 8008782:	4694      	mov	ip, r2
 8008784:	44bc      	add	ip, r7
 8008786:	4463      	add	r3, ip
 8008788:	781b      	ldrb	r3, [r3, #0]
}
 800878a:	0018      	movs	r0, r3
 800878c:	46bd      	mov	sp, r7
 800878e:	b00e      	add	sp, #56	; 0x38
 8008790:	bdb0      	pop	{r4, r5, r7, pc}
 8008792:	46c0      	nop			; (mov r8, r8)
 8008794:	40021000 	.word	0x40021000
 8008798:	007a1200 	.word	0x007a1200
 800879c:	01e84800 	.word	0x01e84800
 80087a0:	0000ffff 	.word	0x0000ffff
 80087a4:	0800a204 	.word	0x0800a204
 80087a8:	003d0900 	.word	0x003d0900
 80087ac:	00f42400 	.word	0x00f42400

080087b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2201      	movs	r2, #1
 80087be:	4013      	ands	r3, r2
 80087c0:	d00b      	beq.n	80087da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4a4a      	ldr	r2, [pc, #296]	; (80088f4 <UART_AdvFeatureConfig+0x144>)
 80087ca:	4013      	ands	r3, r2
 80087cc:	0019      	movs	r1, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	2202      	movs	r2, #2
 80087e0:	4013      	ands	r3, r2
 80087e2:	d00b      	beq.n	80087fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	4a43      	ldr	r2, [pc, #268]	; (80088f8 <UART_AdvFeatureConfig+0x148>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	0019      	movs	r1, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	2204      	movs	r2, #4
 8008802:	4013      	ands	r3, r2
 8008804:	d00b      	beq.n	800881e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	4a3b      	ldr	r2, [pc, #236]	; (80088fc <UART_AdvFeatureConfig+0x14c>)
 800880e:	4013      	ands	r3, r2
 8008810:	0019      	movs	r1, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	2208      	movs	r2, #8
 8008824:	4013      	ands	r3, r2
 8008826:	d00b      	beq.n	8008840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	4a34      	ldr	r2, [pc, #208]	; (8008900 <UART_AdvFeatureConfig+0x150>)
 8008830:	4013      	ands	r3, r2
 8008832:	0019      	movs	r1, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	2210      	movs	r2, #16
 8008846:	4013      	ands	r3, r2
 8008848:	d00b      	beq.n	8008862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	4a2c      	ldr	r2, [pc, #176]	; (8008904 <UART_AdvFeatureConfig+0x154>)
 8008852:	4013      	ands	r3, r2
 8008854:	0019      	movs	r1, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	2220      	movs	r2, #32
 8008868:	4013      	ands	r3, r2
 800886a:	d00b      	beq.n	8008884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	4a25      	ldr	r2, [pc, #148]	; (8008908 <UART_AdvFeatureConfig+0x158>)
 8008874:	4013      	ands	r3, r2
 8008876:	0019      	movs	r1, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2240      	movs	r2, #64	; 0x40
 800888a:	4013      	ands	r3, r2
 800888c:	d01d      	beq.n	80088ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	4a1d      	ldr	r2, [pc, #116]	; (800890c <UART_AdvFeatureConfig+0x15c>)
 8008896:	4013      	ands	r3, r2
 8008898:	0019      	movs	r1, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088aa:	2380      	movs	r3, #128	; 0x80
 80088ac:	035b      	lsls	r3, r3, #13
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d10b      	bne.n	80088ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4a15      	ldr	r2, [pc, #84]	; (8008910 <UART_AdvFeatureConfig+0x160>)
 80088ba:	4013      	ands	r3, r2
 80088bc:	0019      	movs	r1, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2280      	movs	r2, #128	; 0x80
 80088d0:	4013      	ands	r3, r2
 80088d2:	d00b      	beq.n	80088ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	4a0e      	ldr	r2, [pc, #56]	; (8008914 <UART_AdvFeatureConfig+0x164>)
 80088dc:	4013      	ands	r3, r2
 80088de:	0019      	movs	r1, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	605a      	str	r2, [r3, #4]
  }
}
 80088ec:	46c0      	nop			; (mov r8, r8)
 80088ee:	46bd      	mov	sp, r7
 80088f0:	b002      	add	sp, #8
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	fffdffff 	.word	0xfffdffff
 80088f8:	fffeffff 	.word	0xfffeffff
 80088fc:	fffbffff 	.word	0xfffbffff
 8008900:	ffff7fff 	.word	0xffff7fff
 8008904:	ffffefff 	.word	0xffffefff
 8008908:	ffffdfff 	.word	0xffffdfff
 800890c:	ffefffff 	.word	0xffefffff
 8008910:	ff9fffff 	.word	0xff9fffff
 8008914:	fff7ffff 	.word	0xfff7ffff

08008918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af02      	add	r7, sp, #8
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008926:	f7fc fd1f 	bl	8005368 <HAL_GetTick>
 800892a:	0003      	movs	r3, r0
 800892c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2208      	movs	r2, #8
 8008936:	4013      	ands	r3, r2
 8008938:	2b08      	cmp	r3, #8
 800893a:	d10d      	bne.n	8008958 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	2380      	movs	r3, #128	; 0x80
 8008940:	0399      	lsls	r1, r3, #14
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <UART_CheckIdleState+0x88>)
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	0013      	movs	r3, r2
 800894a:	2200      	movs	r2, #0
 800894c:	f000 f82a 	bl	80089a4 <UART_WaitOnFlagUntilTimeout>
 8008950:	1e03      	subs	r3, r0, #0
 8008952:	d001      	beq.n	8008958 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e01f      	b.n	8008998 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2204      	movs	r2, #4
 8008960:	4013      	ands	r3, r2
 8008962:	2b04      	cmp	r3, #4
 8008964:	d10d      	bne.n	8008982 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	03d9      	lsls	r1, r3, #15
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <UART_CheckIdleState+0x88>)
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	0013      	movs	r3, r2
 8008974:	2200      	movs	r2, #0
 8008976:	f000 f815 	bl	80089a4 <UART_WaitOnFlagUntilTimeout>
 800897a:	1e03      	subs	r3, r0, #0
 800897c:	d001      	beq.n	8008982 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e00a      	b.n	8008998 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2270      	movs	r2, #112	; 0x70
 8008992:	2100      	movs	r1, #0
 8008994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	0018      	movs	r0, r3
 800899a:	46bd      	mov	sp, r7
 800899c:	b004      	add	sp, #16
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	01ffffff 	.word	0x01ffffff

080089a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	1dfb      	adds	r3, r7, #7
 80089b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b4:	e029      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	3301      	adds	r3, #1
 80089ba:	d026      	beq.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089bc:	f7fc fcd4 	bl	8005368 <HAL_GetTick>
 80089c0:	0002      	movs	r2, r0
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d302      	bcc.n	80089d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d11b      	bne.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4915      	ldr	r1, [pc, #84]	; (8008a34 <UART_WaitOnFlagUntilTimeout+0x90>)
 80089de:	400a      	ands	r2, r1
 80089e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2101      	movs	r1, #1
 80089ee:	438a      	bics	r2, r1
 80089f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2220      	movs	r2, #32
 80089f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2270      	movs	r2, #112	; 0x70
 8008a02:	2100      	movs	r1, #0
 8008a04:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e00f      	b.n	8008a2a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	4013      	ands	r3, r2
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	425a      	negs	r2, r3
 8008a1a:	4153      	adcs	r3, r2
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	001a      	movs	r2, r3
 8008a20:	1dfb      	adds	r3, r7, #7
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d0c6      	beq.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	b004      	add	sp, #16
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	fffffe5f 	.word	0xfffffe5f

08008a38 <__errno>:
 8008a38:	4b01      	ldr	r3, [pc, #4]	; (8008a40 <__errno+0x8>)
 8008a3a:	6818      	ldr	r0, [r3, #0]
 8008a3c:	4770      	bx	lr
 8008a3e:	46c0      	nop			; (mov r8, r8)
 8008a40:	20000030 	.word	0x20000030

08008a44 <__libc_init_array>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	2600      	movs	r6, #0
 8008a48:	4d0c      	ldr	r5, [pc, #48]	; (8008a7c <__libc_init_array+0x38>)
 8008a4a:	4c0d      	ldr	r4, [pc, #52]	; (8008a80 <__libc_init_array+0x3c>)
 8008a4c:	1b64      	subs	r4, r4, r5
 8008a4e:	10a4      	asrs	r4, r4, #2
 8008a50:	42a6      	cmp	r6, r4
 8008a52:	d109      	bne.n	8008a68 <__libc_init_array+0x24>
 8008a54:	2600      	movs	r6, #0
 8008a56:	f000 fc29 	bl	80092ac <_init>
 8008a5a:	4d0a      	ldr	r5, [pc, #40]	; (8008a84 <__libc_init_array+0x40>)
 8008a5c:	4c0a      	ldr	r4, [pc, #40]	; (8008a88 <__libc_init_array+0x44>)
 8008a5e:	1b64      	subs	r4, r4, r5
 8008a60:	10a4      	asrs	r4, r4, #2
 8008a62:	42a6      	cmp	r6, r4
 8008a64:	d105      	bne.n	8008a72 <__libc_init_array+0x2e>
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	00b3      	lsls	r3, r6, #2
 8008a6a:	58eb      	ldr	r3, [r5, r3]
 8008a6c:	4798      	blx	r3
 8008a6e:	3601      	adds	r6, #1
 8008a70:	e7ee      	b.n	8008a50 <__libc_init_array+0xc>
 8008a72:	00b3      	lsls	r3, r6, #2
 8008a74:	58eb      	ldr	r3, [r5, r3]
 8008a76:	4798      	blx	r3
 8008a78:	3601      	adds	r6, #1
 8008a7a:	e7f2      	b.n	8008a62 <__libc_init_array+0x1e>
 8008a7c:	0800a264 	.word	0x0800a264
 8008a80:	0800a264 	.word	0x0800a264
 8008a84:	0800a264 	.word	0x0800a264
 8008a88:	0800a268 	.word	0x0800a268

08008a8c <memset>:
 8008a8c:	0003      	movs	r3, r0
 8008a8e:	1812      	adds	r2, r2, r0
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d100      	bne.n	8008a96 <memset+0xa>
 8008a94:	4770      	bx	lr
 8008a96:	7019      	strb	r1, [r3, #0]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	e7f9      	b.n	8008a90 <memset+0x4>

08008a9c <siprintf>:
 8008a9c:	b40e      	push	{r1, r2, r3}
 8008a9e:	b500      	push	{lr}
 8008aa0:	490b      	ldr	r1, [pc, #44]	; (8008ad0 <siprintf+0x34>)
 8008aa2:	b09c      	sub	sp, #112	; 0x70
 8008aa4:	ab1d      	add	r3, sp, #116	; 0x74
 8008aa6:	9002      	str	r0, [sp, #8]
 8008aa8:	9006      	str	r0, [sp, #24]
 8008aaa:	9107      	str	r1, [sp, #28]
 8008aac:	9104      	str	r1, [sp, #16]
 8008aae:	4809      	ldr	r0, [pc, #36]	; (8008ad4 <siprintf+0x38>)
 8008ab0:	4909      	ldr	r1, [pc, #36]	; (8008ad8 <siprintf+0x3c>)
 8008ab2:	cb04      	ldmia	r3!, {r2}
 8008ab4:	9105      	str	r1, [sp, #20]
 8008ab6:	6800      	ldr	r0, [r0, #0]
 8008ab8:	a902      	add	r1, sp, #8
 8008aba:	9301      	str	r3, [sp, #4]
 8008abc:	f000 f870 	bl	8008ba0 <_svfiprintf_r>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	9a02      	ldr	r2, [sp, #8]
 8008ac4:	7013      	strb	r3, [r2, #0]
 8008ac6:	b01c      	add	sp, #112	; 0x70
 8008ac8:	bc08      	pop	{r3}
 8008aca:	b003      	add	sp, #12
 8008acc:	4718      	bx	r3
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	7fffffff 	.word	0x7fffffff
 8008ad4:	20000030 	.word	0x20000030
 8008ad8:	ffff0208 	.word	0xffff0208

08008adc <__ssputs_r>:
 8008adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ade:	688e      	ldr	r6, [r1, #8]
 8008ae0:	b085      	sub	sp, #20
 8008ae2:	0007      	movs	r7, r0
 8008ae4:	000c      	movs	r4, r1
 8008ae6:	9203      	str	r2, [sp, #12]
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	429e      	cmp	r6, r3
 8008aec:	d83c      	bhi.n	8008b68 <__ssputs_r+0x8c>
 8008aee:	2390      	movs	r3, #144	; 0x90
 8008af0:	898a      	ldrh	r2, [r1, #12]
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	421a      	tst	r2, r3
 8008af6:	d034      	beq.n	8008b62 <__ssputs_r+0x86>
 8008af8:	2503      	movs	r5, #3
 8008afa:	6909      	ldr	r1, [r1, #16]
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	1a5b      	subs	r3, r3, r1
 8008b00:	9302      	str	r3, [sp, #8]
 8008b02:	6963      	ldr	r3, [r4, #20]
 8008b04:	9802      	ldr	r0, [sp, #8]
 8008b06:	435d      	muls	r5, r3
 8008b08:	0feb      	lsrs	r3, r5, #31
 8008b0a:	195d      	adds	r5, r3, r5
 8008b0c:	9b01      	ldr	r3, [sp, #4]
 8008b0e:	106d      	asrs	r5, r5, #1
 8008b10:	3301      	adds	r3, #1
 8008b12:	181b      	adds	r3, r3, r0
 8008b14:	42ab      	cmp	r3, r5
 8008b16:	d900      	bls.n	8008b1a <__ssputs_r+0x3e>
 8008b18:	001d      	movs	r5, r3
 8008b1a:	0553      	lsls	r3, r2, #21
 8008b1c:	d532      	bpl.n	8008b84 <__ssputs_r+0xa8>
 8008b1e:	0029      	movs	r1, r5
 8008b20:	0038      	movs	r0, r7
 8008b22:	f000 fb23 	bl	800916c <_malloc_r>
 8008b26:	1e06      	subs	r6, r0, #0
 8008b28:	d109      	bne.n	8008b3e <__ssputs_r+0x62>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	2340      	movs	r3, #64	; 0x40
 8008b30:	2001      	movs	r0, #1
 8008b32:	89a2      	ldrh	r2, [r4, #12]
 8008b34:	4240      	negs	r0, r0
 8008b36:	4313      	orrs	r3, r2
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	b005      	add	sp, #20
 8008b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b3e:	9a02      	ldr	r2, [sp, #8]
 8008b40:	6921      	ldr	r1, [r4, #16]
 8008b42:	f000 faac 	bl	800909e <memcpy>
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	4a14      	ldr	r2, [pc, #80]	; (8008b9c <__ssputs_r+0xc0>)
 8008b4a:	401a      	ands	r2, r3
 8008b4c:	2380      	movs	r3, #128	; 0x80
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	9b02      	ldr	r3, [sp, #8]
 8008b54:	6126      	str	r6, [r4, #16]
 8008b56:	18f6      	adds	r6, r6, r3
 8008b58:	6026      	str	r6, [r4, #0]
 8008b5a:	6165      	str	r5, [r4, #20]
 8008b5c:	9e01      	ldr	r6, [sp, #4]
 8008b5e:	1aed      	subs	r5, r5, r3
 8008b60:	60a5      	str	r5, [r4, #8]
 8008b62:	9b01      	ldr	r3, [sp, #4]
 8008b64:	429e      	cmp	r6, r3
 8008b66:	d900      	bls.n	8008b6a <__ssputs_r+0x8e>
 8008b68:	9e01      	ldr	r6, [sp, #4]
 8008b6a:	0032      	movs	r2, r6
 8008b6c:	9903      	ldr	r1, [sp, #12]
 8008b6e:	6820      	ldr	r0, [r4, #0]
 8008b70:	f000 fa9e 	bl	80090b0 <memmove>
 8008b74:	68a3      	ldr	r3, [r4, #8]
 8008b76:	2000      	movs	r0, #0
 8008b78:	1b9b      	subs	r3, r3, r6
 8008b7a:	60a3      	str	r3, [r4, #8]
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	199e      	adds	r6, r3, r6
 8008b80:	6026      	str	r6, [r4, #0]
 8008b82:	e7da      	b.n	8008b3a <__ssputs_r+0x5e>
 8008b84:	002a      	movs	r2, r5
 8008b86:	0038      	movs	r0, r7
 8008b88:	f000 fb4e 	bl	8009228 <_realloc_r>
 8008b8c:	1e06      	subs	r6, r0, #0
 8008b8e:	d1e0      	bne.n	8008b52 <__ssputs_r+0x76>
 8008b90:	6921      	ldr	r1, [r4, #16]
 8008b92:	0038      	movs	r0, r7
 8008b94:	f000 faa0 	bl	80090d8 <_free_r>
 8008b98:	e7c7      	b.n	8008b2a <__ssputs_r+0x4e>
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	fffffb7f 	.word	0xfffffb7f

08008ba0 <_svfiprintf_r>:
 8008ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ba2:	b0a1      	sub	sp, #132	; 0x84
 8008ba4:	9003      	str	r0, [sp, #12]
 8008ba6:	001d      	movs	r5, r3
 8008ba8:	898b      	ldrh	r3, [r1, #12]
 8008baa:	000f      	movs	r7, r1
 8008bac:	0016      	movs	r6, r2
 8008bae:	061b      	lsls	r3, r3, #24
 8008bb0:	d511      	bpl.n	8008bd6 <_svfiprintf_r+0x36>
 8008bb2:	690b      	ldr	r3, [r1, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10e      	bne.n	8008bd6 <_svfiprintf_r+0x36>
 8008bb8:	2140      	movs	r1, #64	; 0x40
 8008bba:	f000 fad7 	bl	800916c <_malloc_r>
 8008bbe:	6038      	str	r0, [r7, #0]
 8008bc0:	6138      	str	r0, [r7, #16]
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d105      	bne.n	8008bd2 <_svfiprintf_r+0x32>
 8008bc6:	230c      	movs	r3, #12
 8008bc8:	9a03      	ldr	r2, [sp, #12]
 8008bca:	3801      	subs	r0, #1
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	b021      	add	sp, #132	; 0x84
 8008bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	617b      	str	r3, [r7, #20]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	ac08      	add	r4, sp, #32
 8008bda:	6163      	str	r3, [r4, #20]
 8008bdc:	3320      	adds	r3, #32
 8008bde:	7663      	strb	r3, [r4, #25]
 8008be0:	3310      	adds	r3, #16
 8008be2:	76a3      	strb	r3, [r4, #26]
 8008be4:	9507      	str	r5, [sp, #28]
 8008be6:	0035      	movs	r5, r6
 8008be8:	782b      	ldrb	r3, [r5, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <_svfiprintf_r+0x52>
 8008bee:	2b25      	cmp	r3, #37	; 0x25
 8008bf0:	d146      	bne.n	8008c80 <_svfiprintf_r+0xe0>
 8008bf2:	1bab      	subs	r3, r5, r6
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	d00c      	beq.n	8008c12 <_svfiprintf_r+0x72>
 8008bf8:	0032      	movs	r2, r6
 8008bfa:	0039      	movs	r1, r7
 8008bfc:	9803      	ldr	r0, [sp, #12]
 8008bfe:	f7ff ff6d 	bl	8008adc <__ssputs_r>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d100      	bne.n	8008c08 <_svfiprintf_r+0x68>
 8008c06:	e0ae      	b.n	8008d66 <_svfiprintf_r+0x1c6>
 8008c08:	6962      	ldr	r2, [r4, #20]
 8008c0a:	9b05      	ldr	r3, [sp, #20]
 8008c0c:	4694      	mov	ip, r2
 8008c0e:	4463      	add	r3, ip
 8008c10:	6163      	str	r3, [r4, #20]
 8008c12:	782b      	ldrb	r3, [r5, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d100      	bne.n	8008c1a <_svfiprintf_r+0x7a>
 8008c18:	e0a5      	b.n	8008d66 <_svfiprintf_r+0x1c6>
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	4252      	negs	r2, r2
 8008c20:	6062      	str	r2, [r4, #4]
 8008c22:	a904      	add	r1, sp, #16
 8008c24:	3254      	adds	r2, #84	; 0x54
 8008c26:	1852      	adds	r2, r2, r1
 8008c28:	1c6e      	adds	r6, r5, #1
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	60e3      	str	r3, [r4, #12]
 8008c2e:	60a3      	str	r3, [r4, #8]
 8008c30:	7013      	strb	r3, [r2, #0]
 8008c32:	65a3      	str	r3, [r4, #88]	; 0x58
 8008c34:	7831      	ldrb	r1, [r6, #0]
 8008c36:	2205      	movs	r2, #5
 8008c38:	4853      	ldr	r0, [pc, #332]	; (8008d88 <_svfiprintf_r+0x1e8>)
 8008c3a:	f000 fa25 	bl	8009088 <memchr>
 8008c3e:	1c75      	adds	r5, r6, #1
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d11f      	bne.n	8008c84 <_svfiprintf_r+0xe4>
 8008c44:	6822      	ldr	r2, [r4, #0]
 8008c46:	06d3      	lsls	r3, r2, #27
 8008c48:	d504      	bpl.n	8008c54 <_svfiprintf_r+0xb4>
 8008c4a:	2353      	movs	r3, #83	; 0x53
 8008c4c:	a904      	add	r1, sp, #16
 8008c4e:	185b      	adds	r3, r3, r1
 8008c50:	2120      	movs	r1, #32
 8008c52:	7019      	strb	r1, [r3, #0]
 8008c54:	0713      	lsls	r3, r2, #28
 8008c56:	d504      	bpl.n	8008c62 <_svfiprintf_r+0xc2>
 8008c58:	2353      	movs	r3, #83	; 0x53
 8008c5a:	a904      	add	r1, sp, #16
 8008c5c:	185b      	adds	r3, r3, r1
 8008c5e:	212b      	movs	r1, #43	; 0x2b
 8008c60:	7019      	strb	r1, [r3, #0]
 8008c62:	7833      	ldrb	r3, [r6, #0]
 8008c64:	2b2a      	cmp	r3, #42	; 0x2a
 8008c66:	d016      	beq.n	8008c96 <_svfiprintf_r+0xf6>
 8008c68:	0035      	movs	r5, r6
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	200a      	movs	r0, #10
 8008c6e:	68e3      	ldr	r3, [r4, #12]
 8008c70:	782a      	ldrb	r2, [r5, #0]
 8008c72:	1c6e      	adds	r6, r5, #1
 8008c74:	3a30      	subs	r2, #48	; 0x30
 8008c76:	2a09      	cmp	r2, #9
 8008c78:	d94e      	bls.n	8008d18 <_svfiprintf_r+0x178>
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	d018      	beq.n	8008cb0 <_svfiprintf_r+0x110>
 8008c7e:	e010      	b.n	8008ca2 <_svfiprintf_r+0x102>
 8008c80:	3501      	adds	r5, #1
 8008c82:	e7b1      	b.n	8008be8 <_svfiprintf_r+0x48>
 8008c84:	4b40      	ldr	r3, [pc, #256]	; (8008d88 <_svfiprintf_r+0x1e8>)
 8008c86:	6822      	ldr	r2, [r4, #0]
 8008c88:	1ac0      	subs	r0, r0, r3
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4083      	lsls	r3, r0
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	002e      	movs	r6, r5
 8008c94:	e7ce      	b.n	8008c34 <_svfiprintf_r+0x94>
 8008c96:	9b07      	ldr	r3, [sp, #28]
 8008c98:	1d19      	adds	r1, r3, #4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	9107      	str	r1, [sp, #28]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	db01      	blt.n	8008ca6 <_svfiprintf_r+0x106>
 8008ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ca4:	e004      	b.n	8008cb0 <_svfiprintf_r+0x110>
 8008ca6:	425b      	negs	r3, r3
 8008ca8:	60e3      	str	r3, [r4, #12]
 8008caa:	2302      	movs	r3, #2
 8008cac:	4313      	orrs	r3, r2
 8008cae:	6023      	str	r3, [r4, #0]
 8008cb0:	782b      	ldrb	r3, [r5, #0]
 8008cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8008cb4:	d10a      	bne.n	8008ccc <_svfiprintf_r+0x12c>
 8008cb6:	786b      	ldrb	r3, [r5, #1]
 8008cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cba:	d135      	bne.n	8008d28 <_svfiprintf_r+0x188>
 8008cbc:	9b07      	ldr	r3, [sp, #28]
 8008cbe:	3502      	adds	r5, #2
 8008cc0:	1d1a      	adds	r2, r3, #4
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	9207      	str	r2, [sp, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	db2b      	blt.n	8008d22 <_svfiprintf_r+0x182>
 8008cca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ccc:	4e2f      	ldr	r6, [pc, #188]	; (8008d8c <_svfiprintf_r+0x1ec>)
 8008cce:	7829      	ldrb	r1, [r5, #0]
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	0030      	movs	r0, r6
 8008cd4:	f000 f9d8 	bl	8009088 <memchr>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d006      	beq.n	8008cea <_svfiprintf_r+0x14a>
 8008cdc:	2340      	movs	r3, #64	; 0x40
 8008cde:	1b80      	subs	r0, r0, r6
 8008ce0:	4083      	lsls	r3, r0
 8008ce2:	6822      	ldr	r2, [r4, #0]
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	7829      	ldrb	r1, [r5, #0]
 8008cec:	2206      	movs	r2, #6
 8008cee:	4828      	ldr	r0, [pc, #160]	; (8008d90 <_svfiprintf_r+0x1f0>)
 8008cf0:	1c6e      	adds	r6, r5, #1
 8008cf2:	7621      	strb	r1, [r4, #24]
 8008cf4:	f000 f9c8 	bl	8009088 <memchr>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d03c      	beq.n	8008d76 <_svfiprintf_r+0x1d6>
 8008cfc:	4b25      	ldr	r3, [pc, #148]	; (8008d94 <_svfiprintf_r+0x1f4>)
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d125      	bne.n	8008d4e <_svfiprintf_r+0x1ae>
 8008d02:	2207      	movs	r2, #7
 8008d04:	9b07      	ldr	r3, [sp, #28]
 8008d06:	3307      	adds	r3, #7
 8008d08:	4393      	bics	r3, r2
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	9307      	str	r3, [sp, #28]
 8008d0e:	6963      	ldr	r3, [r4, #20]
 8008d10:	9a04      	ldr	r2, [sp, #16]
 8008d12:	189b      	adds	r3, r3, r2
 8008d14:	6163      	str	r3, [r4, #20]
 8008d16:	e766      	b.n	8008be6 <_svfiprintf_r+0x46>
 8008d18:	4343      	muls	r3, r0
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	189b      	adds	r3, r3, r2
 8008d1e:	0035      	movs	r5, r6
 8008d20:	e7a6      	b.n	8008c70 <_svfiprintf_r+0xd0>
 8008d22:	2301      	movs	r3, #1
 8008d24:	425b      	negs	r3, r3
 8008d26:	e7d0      	b.n	8008cca <_svfiprintf_r+0x12a>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	200a      	movs	r0, #10
 8008d2c:	001a      	movs	r2, r3
 8008d2e:	3501      	adds	r5, #1
 8008d30:	6063      	str	r3, [r4, #4]
 8008d32:	7829      	ldrb	r1, [r5, #0]
 8008d34:	1c6e      	adds	r6, r5, #1
 8008d36:	3930      	subs	r1, #48	; 0x30
 8008d38:	2909      	cmp	r1, #9
 8008d3a:	d903      	bls.n	8008d44 <_svfiprintf_r+0x1a4>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0c5      	beq.n	8008ccc <_svfiprintf_r+0x12c>
 8008d40:	9209      	str	r2, [sp, #36]	; 0x24
 8008d42:	e7c3      	b.n	8008ccc <_svfiprintf_r+0x12c>
 8008d44:	4342      	muls	r2, r0
 8008d46:	2301      	movs	r3, #1
 8008d48:	1852      	adds	r2, r2, r1
 8008d4a:	0035      	movs	r5, r6
 8008d4c:	e7f1      	b.n	8008d32 <_svfiprintf_r+0x192>
 8008d4e:	ab07      	add	r3, sp, #28
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	003a      	movs	r2, r7
 8008d54:	4b10      	ldr	r3, [pc, #64]	; (8008d98 <_svfiprintf_r+0x1f8>)
 8008d56:	0021      	movs	r1, r4
 8008d58:	9803      	ldr	r0, [sp, #12]
 8008d5a:	e000      	b.n	8008d5e <_svfiprintf_r+0x1be>
 8008d5c:	bf00      	nop
 8008d5e:	9004      	str	r0, [sp, #16]
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	3301      	adds	r3, #1
 8008d64:	d1d3      	bne.n	8008d0e <_svfiprintf_r+0x16e>
 8008d66:	89bb      	ldrh	r3, [r7, #12]
 8008d68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008d6a:	065b      	lsls	r3, r3, #25
 8008d6c:	d400      	bmi.n	8008d70 <_svfiprintf_r+0x1d0>
 8008d6e:	e72e      	b.n	8008bce <_svfiprintf_r+0x2e>
 8008d70:	2001      	movs	r0, #1
 8008d72:	4240      	negs	r0, r0
 8008d74:	e72b      	b.n	8008bce <_svfiprintf_r+0x2e>
 8008d76:	ab07      	add	r3, sp, #28
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	003a      	movs	r2, r7
 8008d7c:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <_svfiprintf_r+0x1f8>)
 8008d7e:	0021      	movs	r1, r4
 8008d80:	9803      	ldr	r0, [sp, #12]
 8008d82:	f000 f879 	bl	8008e78 <_printf_i>
 8008d86:	e7ea      	b.n	8008d5e <_svfiprintf_r+0x1be>
 8008d88:	0800a228 	.word	0x0800a228
 8008d8c:	0800a22e 	.word	0x0800a22e
 8008d90:	0800a232 	.word	0x0800a232
 8008d94:	00000000 	.word	0x00000000
 8008d98:	08008add 	.word	0x08008add

08008d9c <_printf_common>:
 8008d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d9e:	0015      	movs	r5, r2
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	688a      	ldr	r2, [r1, #8]
 8008da4:	690b      	ldr	r3, [r1, #16]
 8008da6:	9000      	str	r0, [sp, #0]
 8008da8:	000c      	movs	r4, r1
 8008daa:	4293      	cmp	r3, r2
 8008dac:	da00      	bge.n	8008db0 <_printf_common+0x14>
 8008dae:	0013      	movs	r3, r2
 8008db0:	0022      	movs	r2, r4
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	3243      	adds	r2, #67	; 0x43
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	d001      	beq.n	8008dc0 <_printf_common+0x24>
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	069b      	lsls	r3, r3, #26
 8008dc4:	d502      	bpl.n	8008dcc <_printf_common+0x30>
 8008dc6:	682b      	ldr	r3, [r5, #0]
 8008dc8:	3302      	adds	r3, #2
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	2706      	movs	r7, #6
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	401f      	ands	r7, r3
 8008dd2:	d027      	beq.n	8008e24 <_printf_common+0x88>
 8008dd4:	0023      	movs	r3, r4
 8008dd6:	3343      	adds	r3, #67	; 0x43
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	1e5a      	subs	r2, r3, #1
 8008ddc:	4193      	sbcs	r3, r2
 8008dde:	6822      	ldr	r2, [r4, #0]
 8008de0:	0692      	lsls	r2, r2, #26
 8008de2:	d430      	bmi.n	8008e46 <_printf_common+0xaa>
 8008de4:	0022      	movs	r2, r4
 8008de6:	9901      	ldr	r1, [sp, #4]
 8008de8:	3243      	adds	r2, #67	; 0x43
 8008dea:	9800      	ldr	r0, [sp, #0]
 8008dec:	9e08      	ldr	r6, [sp, #32]
 8008dee:	47b0      	blx	r6
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d025      	beq.n	8008e40 <_printf_common+0xa4>
 8008df4:	2306      	movs	r3, #6
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	682a      	ldr	r2, [r5, #0]
 8008dfa:	68e1      	ldr	r1, [r4, #12]
 8008dfc:	4003      	ands	r3, r0
 8008dfe:	2500      	movs	r5, #0
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d103      	bne.n	8008e0c <_printf_common+0x70>
 8008e04:	1a8d      	subs	r5, r1, r2
 8008e06:	43eb      	mvns	r3, r5
 8008e08:	17db      	asrs	r3, r3, #31
 8008e0a:	401d      	ands	r5, r3
 8008e0c:	68a3      	ldr	r3, [r4, #8]
 8008e0e:	6922      	ldr	r2, [r4, #16]
 8008e10:	4293      	cmp	r3, r2
 8008e12:	dd01      	ble.n	8008e18 <_printf_common+0x7c>
 8008e14:	1a9b      	subs	r3, r3, r2
 8008e16:	18ed      	adds	r5, r5, r3
 8008e18:	2700      	movs	r7, #0
 8008e1a:	42bd      	cmp	r5, r7
 8008e1c:	d120      	bne.n	8008e60 <_printf_common+0xc4>
 8008e1e:	2000      	movs	r0, #0
 8008e20:	e010      	b.n	8008e44 <_printf_common+0xa8>
 8008e22:	3701      	adds	r7, #1
 8008e24:	68e3      	ldr	r3, [r4, #12]
 8008e26:	682a      	ldr	r2, [r5, #0]
 8008e28:	1a9b      	subs	r3, r3, r2
 8008e2a:	42bb      	cmp	r3, r7
 8008e2c:	ddd2      	ble.n	8008dd4 <_printf_common+0x38>
 8008e2e:	0022      	movs	r2, r4
 8008e30:	2301      	movs	r3, #1
 8008e32:	3219      	adds	r2, #25
 8008e34:	9901      	ldr	r1, [sp, #4]
 8008e36:	9800      	ldr	r0, [sp, #0]
 8008e38:	9e08      	ldr	r6, [sp, #32]
 8008e3a:	47b0      	blx	r6
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d1f0      	bne.n	8008e22 <_printf_common+0x86>
 8008e40:	2001      	movs	r0, #1
 8008e42:	4240      	negs	r0, r0
 8008e44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e46:	2030      	movs	r0, #48	; 0x30
 8008e48:	18e1      	adds	r1, r4, r3
 8008e4a:	3143      	adds	r1, #67	; 0x43
 8008e4c:	7008      	strb	r0, [r1, #0]
 8008e4e:	0021      	movs	r1, r4
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	3145      	adds	r1, #69	; 0x45
 8008e54:	7809      	ldrb	r1, [r1, #0]
 8008e56:	18a2      	adds	r2, r4, r2
 8008e58:	3243      	adds	r2, #67	; 0x43
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	7011      	strb	r1, [r2, #0]
 8008e5e:	e7c1      	b.n	8008de4 <_printf_common+0x48>
 8008e60:	0022      	movs	r2, r4
 8008e62:	2301      	movs	r3, #1
 8008e64:	321a      	adds	r2, #26
 8008e66:	9901      	ldr	r1, [sp, #4]
 8008e68:	9800      	ldr	r0, [sp, #0]
 8008e6a:	9e08      	ldr	r6, [sp, #32]
 8008e6c:	47b0      	blx	r6
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	d0e6      	beq.n	8008e40 <_printf_common+0xa4>
 8008e72:	3701      	adds	r7, #1
 8008e74:	e7d1      	b.n	8008e1a <_printf_common+0x7e>
	...

08008e78 <_printf_i>:
 8008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7a:	b089      	sub	sp, #36	; 0x24
 8008e7c:	9204      	str	r2, [sp, #16]
 8008e7e:	000a      	movs	r2, r1
 8008e80:	3243      	adds	r2, #67	; 0x43
 8008e82:	9305      	str	r3, [sp, #20]
 8008e84:	9003      	str	r0, [sp, #12]
 8008e86:	9202      	str	r2, [sp, #8]
 8008e88:	7e0a      	ldrb	r2, [r1, #24]
 8008e8a:	000c      	movs	r4, r1
 8008e8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e8e:	2a6e      	cmp	r2, #110	; 0x6e
 8008e90:	d100      	bne.n	8008e94 <_printf_i+0x1c>
 8008e92:	e086      	b.n	8008fa2 <_printf_i+0x12a>
 8008e94:	d81f      	bhi.n	8008ed6 <_printf_i+0x5e>
 8008e96:	2a63      	cmp	r2, #99	; 0x63
 8008e98:	d033      	beq.n	8008f02 <_printf_i+0x8a>
 8008e9a:	d808      	bhi.n	8008eae <_printf_i+0x36>
 8008e9c:	2a00      	cmp	r2, #0
 8008e9e:	d100      	bne.n	8008ea2 <_printf_i+0x2a>
 8008ea0:	e08c      	b.n	8008fbc <_printf_i+0x144>
 8008ea2:	2a58      	cmp	r2, #88	; 0x58
 8008ea4:	d04d      	beq.n	8008f42 <_printf_i+0xca>
 8008ea6:	0025      	movs	r5, r4
 8008ea8:	3542      	adds	r5, #66	; 0x42
 8008eaa:	702a      	strb	r2, [r5, #0]
 8008eac:	e030      	b.n	8008f10 <_printf_i+0x98>
 8008eae:	2a64      	cmp	r2, #100	; 0x64
 8008eb0:	d001      	beq.n	8008eb6 <_printf_i+0x3e>
 8008eb2:	2a69      	cmp	r2, #105	; 0x69
 8008eb4:	d1f7      	bne.n	8008ea6 <_printf_i+0x2e>
 8008eb6:	6819      	ldr	r1, [r3, #0]
 8008eb8:	6825      	ldr	r5, [r4, #0]
 8008eba:	1d0a      	adds	r2, r1, #4
 8008ebc:	0628      	lsls	r0, r5, #24
 8008ebe:	d529      	bpl.n	8008f14 <_printf_i+0x9c>
 8008ec0:	6808      	ldr	r0, [r1, #0]
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	da03      	bge.n	8008ed0 <_printf_i+0x58>
 8008ec8:	232d      	movs	r3, #45	; 0x2d
 8008eca:	9a02      	ldr	r2, [sp, #8]
 8008ecc:	4240      	negs	r0, r0
 8008ece:	7013      	strb	r3, [r2, #0]
 8008ed0:	4e6b      	ldr	r6, [pc, #428]	; (8009080 <_printf_i+0x208>)
 8008ed2:	270a      	movs	r7, #10
 8008ed4:	e04f      	b.n	8008f76 <_printf_i+0xfe>
 8008ed6:	2a73      	cmp	r2, #115	; 0x73
 8008ed8:	d074      	beq.n	8008fc4 <_printf_i+0x14c>
 8008eda:	d808      	bhi.n	8008eee <_printf_i+0x76>
 8008edc:	2a6f      	cmp	r2, #111	; 0x6f
 8008ede:	d01f      	beq.n	8008f20 <_printf_i+0xa8>
 8008ee0:	2a70      	cmp	r2, #112	; 0x70
 8008ee2:	d1e0      	bne.n	8008ea6 <_printf_i+0x2e>
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	6809      	ldr	r1, [r1, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	6022      	str	r2, [r4, #0]
 8008eec:	e003      	b.n	8008ef6 <_printf_i+0x7e>
 8008eee:	2a75      	cmp	r2, #117	; 0x75
 8008ef0:	d016      	beq.n	8008f20 <_printf_i+0xa8>
 8008ef2:	2a78      	cmp	r2, #120	; 0x78
 8008ef4:	d1d7      	bne.n	8008ea6 <_printf_i+0x2e>
 8008ef6:	0022      	movs	r2, r4
 8008ef8:	2178      	movs	r1, #120	; 0x78
 8008efa:	3245      	adds	r2, #69	; 0x45
 8008efc:	7011      	strb	r1, [r2, #0]
 8008efe:	4e61      	ldr	r6, [pc, #388]	; (8009084 <_printf_i+0x20c>)
 8008f00:	e022      	b.n	8008f48 <_printf_i+0xd0>
 8008f02:	0025      	movs	r5, r4
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	3542      	adds	r5, #66	; 0x42
 8008f08:	1d11      	adds	r1, r2, #4
 8008f0a:	6019      	str	r1, [r3, #0]
 8008f0c:	6813      	ldr	r3, [r2, #0]
 8008f0e:	702b      	strb	r3, [r5, #0]
 8008f10:	2301      	movs	r3, #1
 8008f12:	e065      	b.n	8008fe0 <_printf_i+0x168>
 8008f14:	6808      	ldr	r0, [r1, #0]
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	0669      	lsls	r1, r5, #25
 8008f1a:	d5d3      	bpl.n	8008ec4 <_printf_i+0x4c>
 8008f1c:	b200      	sxth	r0, r0
 8008f1e:	e7d1      	b.n	8008ec4 <_printf_i+0x4c>
 8008f20:	6819      	ldr	r1, [r3, #0]
 8008f22:	6825      	ldr	r5, [r4, #0]
 8008f24:	1d08      	adds	r0, r1, #4
 8008f26:	6018      	str	r0, [r3, #0]
 8008f28:	6808      	ldr	r0, [r1, #0]
 8008f2a:	062e      	lsls	r6, r5, #24
 8008f2c:	d505      	bpl.n	8008f3a <_printf_i+0xc2>
 8008f2e:	4e54      	ldr	r6, [pc, #336]	; (8009080 <_printf_i+0x208>)
 8008f30:	2708      	movs	r7, #8
 8008f32:	2a6f      	cmp	r2, #111	; 0x6f
 8008f34:	d01b      	beq.n	8008f6e <_printf_i+0xf6>
 8008f36:	270a      	movs	r7, #10
 8008f38:	e019      	b.n	8008f6e <_printf_i+0xf6>
 8008f3a:	066d      	lsls	r5, r5, #25
 8008f3c:	d5f7      	bpl.n	8008f2e <_printf_i+0xb6>
 8008f3e:	b280      	uxth	r0, r0
 8008f40:	e7f5      	b.n	8008f2e <_printf_i+0xb6>
 8008f42:	3145      	adds	r1, #69	; 0x45
 8008f44:	4e4e      	ldr	r6, [pc, #312]	; (8009080 <_printf_i+0x208>)
 8008f46:	700a      	strb	r2, [r1, #0]
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	6822      	ldr	r2, [r4, #0]
 8008f4c:	1d01      	adds	r1, r0, #4
 8008f4e:	6800      	ldr	r0, [r0, #0]
 8008f50:	6019      	str	r1, [r3, #0]
 8008f52:	0615      	lsls	r5, r2, #24
 8008f54:	d521      	bpl.n	8008f9a <_printf_i+0x122>
 8008f56:	07d3      	lsls	r3, r2, #31
 8008f58:	d502      	bpl.n	8008f60 <_printf_i+0xe8>
 8008f5a:	2320      	movs	r3, #32
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	6022      	str	r2, [r4, #0]
 8008f60:	2710      	movs	r7, #16
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d103      	bne.n	8008f6e <_printf_i+0xf6>
 8008f66:	2320      	movs	r3, #32
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	439a      	bics	r2, r3
 8008f6c:	6022      	str	r2, [r4, #0]
 8008f6e:	0023      	movs	r3, r4
 8008f70:	2200      	movs	r2, #0
 8008f72:	3343      	adds	r3, #67	; 0x43
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	6863      	ldr	r3, [r4, #4]
 8008f78:	60a3      	str	r3, [r4, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	db58      	blt.n	8009030 <_printf_i+0x1b8>
 8008f7e:	2204      	movs	r2, #4
 8008f80:	6821      	ldr	r1, [r4, #0]
 8008f82:	4391      	bics	r1, r2
 8008f84:	6021      	str	r1, [r4, #0]
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d154      	bne.n	8009034 <_printf_i+0x1bc>
 8008f8a:	9d02      	ldr	r5, [sp, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d05a      	beq.n	8009046 <_printf_i+0x1ce>
 8008f90:	0025      	movs	r5, r4
 8008f92:	7833      	ldrb	r3, [r6, #0]
 8008f94:	3542      	adds	r5, #66	; 0x42
 8008f96:	702b      	strb	r3, [r5, #0]
 8008f98:	e055      	b.n	8009046 <_printf_i+0x1ce>
 8008f9a:	0655      	lsls	r5, r2, #25
 8008f9c:	d5db      	bpl.n	8008f56 <_printf_i+0xde>
 8008f9e:	b280      	uxth	r0, r0
 8008fa0:	e7d9      	b.n	8008f56 <_printf_i+0xde>
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	680d      	ldr	r5, [r1, #0]
 8008fa6:	1d10      	adds	r0, r2, #4
 8008fa8:	6949      	ldr	r1, [r1, #20]
 8008faa:	6018      	str	r0, [r3, #0]
 8008fac:	6813      	ldr	r3, [r2, #0]
 8008fae:	062e      	lsls	r6, r5, #24
 8008fb0:	d501      	bpl.n	8008fb6 <_printf_i+0x13e>
 8008fb2:	6019      	str	r1, [r3, #0]
 8008fb4:	e002      	b.n	8008fbc <_printf_i+0x144>
 8008fb6:	066d      	lsls	r5, r5, #25
 8008fb8:	d5fb      	bpl.n	8008fb2 <_printf_i+0x13a>
 8008fba:	8019      	strh	r1, [r3, #0]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	9d02      	ldr	r5, [sp, #8]
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	e04f      	b.n	8009064 <_printf_i+0x1ec>
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	1d11      	adds	r1, r2, #4
 8008fc8:	6019      	str	r1, [r3, #0]
 8008fca:	6815      	ldr	r5, [r2, #0]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	6862      	ldr	r2, [r4, #4]
 8008fd0:	0028      	movs	r0, r5
 8008fd2:	f000 f859 	bl	8009088 <memchr>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d001      	beq.n	8008fde <_printf_i+0x166>
 8008fda:	1b40      	subs	r0, r0, r5
 8008fdc:	6060      	str	r0, [r4, #4]
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9a02      	ldr	r2, [sp, #8]
 8008fe6:	7013      	strb	r3, [r2, #0]
 8008fe8:	e03c      	b.n	8009064 <_printf_i+0x1ec>
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	002a      	movs	r2, r5
 8008fee:	9904      	ldr	r1, [sp, #16]
 8008ff0:	9803      	ldr	r0, [sp, #12]
 8008ff2:	9d05      	ldr	r5, [sp, #20]
 8008ff4:	47a8      	blx	r5
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d03e      	beq.n	8009078 <_printf_i+0x200>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	079b      	lsls	r3, r3, #30
 8008ffe:	d415      	bmi.n	800902c <_printf_i+0x1b4>
 8009000:	9b07      	ldr	r3, [sp, #28]
 8009002:	68e0      	ldr	r0, [r4, #12]
 8009004:	4298      	cmp	r0, r3
 8009006:	da39      	bge.n	800907c <_printf_i+0x204>
 8009008:	0018      	movs	r0, r3
 800900a:	e037      	b.n	800907c <_printf_i+0x204>
 800900c:	0022      	movs	r2, r4
 800900e:	2301      	movs	r3, #1
 8009010:	3219      	adds	r2, #25
 8009012:	9904      	ldr	r1, [sp, #16]
 8009014:	9803      	ldr	r0, [sp, #12]
 8009016:	9e05      	ldr	r6, [sp, #20]
 8009018:	47b0      	blx	r6
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	d02c      	beq.n	8009078 <_printf_i+0x200>
 800901e:	3501      	adds	r5, #1
 8009020:	68e3      	ldr	r3, [r4, #12]
 8009022:	9a07      	ldr	r2, [sp, #28]
 8009024:	1a9b      	subs	r3, r3, r2
 8009026:	42ab      	cmp	r3, r5
 8009028:	dcf0      	bgt.n	800900c <_printf_i+0x194>
 800902a:	e7e9      	b.n	8009000 <_printf_i+0x188>
 800902c:	2500      	movs	r5, #0
 800902e:	e7f7      	b.n	8009020 <_printf_i+0x1a8>
 8009030:	2800      	cmp	r0, #0
 8009032:	d0ad      	beq.n	8008f90 <_printf_i+0x118>
 8009034:	9d02      	ldr	r5, [sp, #8]
 8009036:	0039      	movs	r1, r7
 8009038:	f7f7 f8f4 	bl	8000224 <__aeabi_uidivmod>
 800903c:	5c73      	ldrb	r3, [r6, r1]
 800903e:	3d01      	subs	r5, #1
 8009040:	702b      	strb	r3, [r5, #0]
 8009042:	2800      	cmp	r0, #0
 8009044:	d1f7      	bne.n	8009036 <_printf_i+0x1be>
 8009046:	2f08      	cmp	r7, #8
 8009048:	d109      	bne.n	800905e <_printf_i+0x1e6>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	07db      	lsls	r3, r3, #31
 800904e:	d506      	bpl.n	800905e <_printf_i+0x1e6>
 8009050:	6863      	ldr	r3, [r4, #4]
 8009052:	6922      	ldr	r2, [r4, #16]
 8009054:	4293      	cmp	r3, r2
 8009056:	dc02      	bgt.n	800905e <_printf_i+0x1e6>
 8009058:	2330      	movs	r3, #48	; 0x30
 800905a:	3d01      	subs	r5, #1
 800905c:	702b      	strb	r3, [r5, #0]
 800905e:	9b02      	ldr	r3, [sp, #8]
 8009060:	1b5b      	subs	r3, r3, r5
 8009062:	6123      	str	r3, [r4, #16]
 8009064:	9b05      	ldr	r3, [sp, #20]
 8009066:	aa07      	add	r2, sp, #28
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	0021      	movs	r1, r4
 800906c:	9b04      	ldr	r3, [sp, #16]
 800906e:	9803      	ldr	r0, [sp, #12]
 8009070:	f7ff fe94 	bl	8008d9c <_printf_common>
 8009074:	1c43      	adds	r3, r0, #1
 8009076:	d1b8      	bne.n	8008fea <_printf_i+0x172>
 8009078:	2001      	movs	r0, #1
 800907a:	4240      	negs	r0, r0
 800907c:	b009      	add	sp, #36	; 0x24
 800907e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009080:	0800a239 	.word	0x0800a239
 8009084:	0800a24a 	.word	0x0800a24a

08009088 <memchr>:
 8009088:	b2c9      	uxtb	r1, r1
 800908a:	1882      	adds	r2, r0, r2
 800908c:	4290      	cmp	r0, r2
 800908e:	d101      	bne.n	8009094 <memchr+0xc>
 8009090:	2000      	movs	r0, #0
 8009092:	4770      	bx	lr
 8009094:	7803      	ldrb	r3, [r0, #0]
 8009096:	428b      	cmp	r3, r1
 8009098:	d0fb      	beq.n	8009092 <memchr+0xa>
 800909a:	3001      	adds	r0, #1
 800909c:	e7f6      	b.n	800908c <memchr+0x4>

0800909e <memcpy>:
 800909e:	2300      	movs	r3, #0
 80090a0:	b510      	push	{r4, lr}
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d100      	bne.n	80090a8 <memcpy+0xa>
 80090a6:	bd10      	pop	{r4, pc}
 80090a8:	5ccc      	ldrb	r4, [r1, r3]
 80090aa:	54c4      	strb	r4, [r0, r3]
 80090ac:	3301      	adds	r3, #1
 80090ae:	e7f8      	b.n	80090a2 <memcpy+0x4>

080090b0 <memmove>:
 80090b0:	b510      	push	{r4, lr}
 80090b2:	4288      	cmp	r0, r1
 80090b4:	d902      	bls.n	80090bc <memmove+0xc>
 80090b6:	188b      	adds	r3, r1, r2
 80090b8:	4298      	cmp	r0, r3
 80090ba:	d303      	bcc.n	80090c4 <memmove+0x14>
 80090bc:	2300      	movs	r3, #0
 80090be:	e007      	b.n	80090d0 <memmove+0x20>
 80090c0:	5c8b      	ldrb	r3, [r1, r2]
 80090c2:	5483      	strb	r3, [r0, r2]
 80090c4:	3a01      	subs	r2, #1
 80090c6:	d2fb      	bcs.n	80090c0 <memmove+0x10>
 80090c8:	bd10      	pop	{r4, pc}
 80090ca:	5ccc      	ldrb	r4, [r1, r3]
 80090cc:	54c4      	strb	r4, [r0, r3]
 80090ce:	3301      	adds	r3, #1
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d1fa      	bne.n	80090ca <memmove+0x1a>
 80090d4:	e7f8      	b.n	80090c8 <memmove+0x18>
	...

080090d8 <_free_r>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	0005      	movs	r5, r0
 80090dc:	2900      	cmp	r1, #0
 80090de:	d010      	beq.n	8009102 <_free_r+0x2a>
 80090e0:	1f0c      	subs	r4, r1, #4
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	da00      	bge.n	80090ea <_free_r+0x12>
 80090e8:	18e4      	adds	r4, r4, r3
 80090ea:	0028      	movs	r0, r5
 80090ec:	f000 f8d4 	bl	8009298 <__malloc_lock>
 80090f0:	4a1d      	ldr	r2, [pc, #116]	; (8009168 <_free_r+0x90>)
 80090f2:	6813      	ldr	r3, [r2, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d105      	bne.n	8009104 <_free_r+0x2c>
 80090f8:	6063      	str	r3, [r4, #4]
 80090fa:	6014      	str	r4, [r2, #0]
 80090fc:	0028      	movs	r0, r5
 80090fe:	f000 f8cc 	bl	800929a <__malloc_unlock>
 8009102:	bd70      	pop	{r4, r5, r6, pc}
 8009104:	42a3      	cmp	r3, r4
 8009106:	d909      	bls.n	800911c <_free_r+0x44>
 8009108:	6821      	ldr	r1, [r4, #0]
 800910a:	1860      	adds	r0, r4, r1
 800910c:	4283      	cmp	r3, r0
 800910e:	d1f3      	bne.n	80090f8 <_free_r+0x20>
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	1841      	adds	r1, r0, r1
 8009116:	6021      	str	r1, [r4, #0]
 8009118:	e7ee      	b.n	80090f8 <_free_r+0x20>
 800911a:	0013      	movs	r3, r2
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	2a00      	cmp	r2, #0
 8009120:	d001      	beq.n	8009126 <_free_r+0x4e>
 8009122:	42a2      	cmp	r2, r4
 8009124:	d9f9      	bls.n	800911a <_free_r+0x42>
 8009126:	6819      	ldr	r1, [r3, #0]
 8009128:	1858      	adds	r0, r3, r1
 800912a:	42a0      	cmp	r0, r4
 800912c:	d10b      	bne.n	8009146 <_free_r+0x6e>
 800912e:	6820      	ldr	r0, [r4, #0]
 8009130:	1809      	adds	r1, r1, r0
 8009132:	1858      	adds	r0, r3, r1
 8009134:	6019      	str	r1, [r3, #0]
 8009136:	4282      	cmp	r2, r0
 8009138:	d1e0      	bne.n	80090fc <_free_r+0x24>
 800913a:	6810      	ldr	r0, [r2, #0]
 800913c:	6852      	ldr	r2, [r2, #4]
 800913e:	1841      	adds	r1, r0, r1
 8009140:	6019      	str	r1, [r3, #0]
 8009142:	605a      	str	r2, [r3, #4]
 8009144:	e7da      	b.n	80090fc <_free_r+0x24>
 8009146:	42a0      	cmp	r0, r4
 8009148:	d902      	bls.n	8009150 <_free_r+0x78>
 800914a:	230c      	movs	r3, #12
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	e7d5      	b.n	80090fc <_free_r+0x24>
 8009150:	6821      	ldr	r1, [r4, #0]
 8009152:	1860      	adds	r0, r4, r1
 8009154:	4282      	cmp	r2, r0
 8009156:	d103      	bne.n	8009160 <_free_r+0x88>
 8009158:	6810      	ldr	r0, [r2, #0]
 800915a:	6852      	ldr	r2, [r2, #4]
 800915c:	1841      	adds	r1, r0, r1
 800915e:	6021      	str	r1, [r4, #0]
 8009160:	6062      	str	r2, [r4, #4]
 8009162:	605c      	str	r4, [r3, #4]
 8009164:	e7ca      	b.n	80090fc <_free_r+0x24>
 8009166:	46c0      	nop			; (mov r8, r8)
 8009168:	20000608 	.word	0x20000608

0800916c <_malloc_r>:
 800916c:	2303      	movs	r3, #3
 800916e:	b570      	push	{r4, r5, r6, lr}
 8009170:	1ccd      	adds	r5, r1, #3
 8009172:	439d      	bics	r5, r3
 8009174:	3508      	adds	r5, #8
 8009176:	0006      	movs	r6, r0
 8009178:	2d0c      	cmp	r5, #12
 800917a:	d21e      	bcs.n	80091ba <_malloc_r+0x4e>
 800917c:	250c      	movs	r5, #12
 800917e:	42a9      	cmp	r1, r5
 8009180:	d81d      	bhi.n	80091be <_malloc_r+0x52>
 8009182:	0030      	movs	r0, r6
 8009184:	f000 f888 	bl	8009298 <__malloc_lock>
 8009188:	4a25      	ldr	r2, [pc, #148]	; (8009220 <_malloc_r+0xb4>)
 800918a:	6814      	ldr	r4, [r2, #0]
 800918c:	0021      	movs	r1, r4
 800918e:	2900      	cmp	r1, #0
 8009190:	d119      	bne.n	80091c6 <_malloc_r+0x5a>
 8009192:	4c24      	ldr	r4, [pc, #144]	; (8009224 <_malloc_r+0xb8>)
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d103      	bne.n	80091a2 <_malloc_r+0x36>
 800919a:	0030      	movs	r0, r6
 800919c:	f000 f86a 	bl	8009274 <_sbrk_r>
 80091a0:	6020      	str	r0, [r4, #0]
 80091a2:	0029      	movs	r1, r5
 80091a4:	0030      	movs	r0, r6
 80091a6:	f000 f865 	bl	8009274 <_sbrk_r>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	d12b      	bne.n	8009206 <_malloc_r+0x9a>
 80091ae:	230c      	movs	r3, #12
 80091b0:	0030      	movs	r0, r6
 80091b2:	6033      	str	r3, [r6, #0]
 80091b4:	f000 f871 	bl	800929a <__malloc_unlock>
 80091b8:	e003      	b.n	80091c2 <_malloc_r+0x56>
 80091ba:	2d00      	cmp	r5, #0
 80091bc:	dadf      	bge.n	800917e <_malloc_r+0x12>
 80091be:	230c      	movs	r3, #12
 80091c0:	6033      	str	r3, [r6, #0]
 80091c2:	2000      	movs	r0, #0
 80091c4:	bd70      	pop	{r4, r5, r6, pc}
 80091c6:	680b      	ldr	r3, [r1, #0]
 80091c8:	1b5b      	subs	r3, r3, r5
 80091ca:	d419      	bmi.n	8009200 <_malloc_r+0x94>
 80091cc:	2b0b      	cmp	r3, #11
 80091ce:	d903      	bls.n	80091d8 <_malloc_r+0x6c>
 80091d0:	600b      	str	r3, [r1, #0]
 80091d2:	18cc      	adds	r4, r1, r3
 80091d4:	6025      	str	r5, [r4, #0]
 80091d6:	e003      	b.n	80091e0 <_malloc_r+0x74>
 80091d8:	684b      	ldr	r3, [r1, #4]
 80091da:	428c      	cmp	r4, r1
 80091dc:	d10d      	bne.n	80091fa <_malloc_r+0x8e>
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	0030      	movs	r0, r6
 80091e2:	f000 f85a 	bl	800929a <__malloc_unlock>
 80091e6:	0020      	movs	r0, r4
 80091e8:	2207      	movs	r2, #7
 80091ea:	300b      	adds	r0, #11
 80091ec:	1d23      	adds	r3, r4, #4
 80091ee:	4390      	bics	r0, r2
 80091f0:	1ac3      	subs	r3, r0, r3
 80091f2:	d0e7      	beq.n	80091c4 <_malloc_r+0x58>
 80091f4:	425a      	negs	r2, r3
 80091f6:	50e2      	str	r2, [r4, r3]
 80091f8:	e7e4      	b.n	80091c4 <_malloc_r+0x58>
 80091fa:	6063      	str	r3, [r4, #4]
 80091fc:	000c      	movs	r4, r1
 80091fe:	e7ef      	b.n	80091e0 <_malloc_r+0x74>
 8009200:	000c      	movs	r4, r1
 8009202:	6849      	ldr	r1, [r1, #4]
 8009204:	e7c3      	b.n	800918e <_malloc_r+0x22>
 8009206:	2303      	movs	r3, #3
 8009208:	1cc4      	adds	r4, r0, #3
 800920a:	439c      	bics	r4, r3
 800920c:	42a0      	cmp	r0, r4
 800920e:	d0e1      	beq.n	80091d4 <_malloc_r+0x68>
 8009210:	1a21      	subs	r1, r4, r0
 8009212:	0030      	movs	r0, r6
 8009214:	f000 f82e 	bl	8009274 <_sbrk_r>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d1db      	bne.n	80091d4 <_malloc_r+0x68>
 800921c:	e7c7      	b.n	80091ae <_malloc_r+0x42>
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	20000608 	.word	0x20000608
 8009224:	2000060c 	.word	0x2000060c

08009228 <_realloc_r>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	0007      	movs	r7, r0
 800922c:	000d      	movs	r5, r1
 800922e:	0016      	movs	r6, r2
 8009230:	2900      	cmp	r1, #0
 8009232:	d105      	bne.n	8009240 <_realloc_r+0x18>
 8009234:	0011      	movs	r1, r2
 8009236:	f7ff ff99 	bl	800916c <_malloc_r>
 800923a:	0004      	movs	r4, r0
 800923c:	0020      	movs	r0, r4
 800923e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009240:	2a00      	cmp	r2, #0
 8009242:	d103      	bne.n	800924c <_realloc_r+0x24>
 8009244:	f7ff ff48 	bl	80090d8 <_free_r>
 8009248:	0034      	movs	r4, r6
 800924a:	e7f7      	b.n	800923c <_realloc_r+0x14>
 800924c:	f000 f826 	bl	800929c <_malloc_usable_size_r>
 8009250:	002c      	movs	r4, r5
 8009252:	42b0      	cmp	r0, r6
 8009254:	d2f2      	bcs.n	800923c <_realloc_r+0x14>
 8009256:	0031      	movs	r1, r6
 8009258:	0038      	movs	r0, r7
 800925a:	f7ff ff87 	bl	800916c <_malloc_r>
 800925e:	1e04      	subs	r4, r0, #0
 8009260:	d0ec      	beq.n	800923c <_realloc_r+0x14>
 8009262:	0029      	movs	r1, r5
 8009264:	0032      	movs	r2, r6
 8009266:	f7ff ff1a 	bl	800909e <memcpy>
 800926a:	0029      	movs	r1, r5
 800926c:	0038      	movs	r0, r7
 800926e:	f7ff ff33 	bl	80090d8 <_free_r>
 8009272:	e7e3      	b.n	800923c <_realloc_r+0x14>

08009274 <_sbrk_r>:
 8009274:	2300      	movs	r3, #0
 8009276:	b570      	push	{r4, r5, r6, lr}
 8009278:	4c06      	ldr	r4, [pc, #24]	; (8009294 <_sbrk_r+0x20>)
 800927a:	0005      	movs	r5, r0
 800927c:	0008      	movs	r0, r1
 800927e:	6023      	str	r3, [r4, #0]
 8009280:	f7fb fde4 	bl	8004e4c <_sbrk>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d103      	bne.n	8009290 <_sbrk_r+0x1c>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d000      	beq.n	8009290 <_sbrk_r+0x1c>
 800928e:	602b      	str	r3, [r5, #0]
 8009290:	bd70      	pop	{r4, r5, r6, pc}
 8009292:	46c0      	nop			; (mov r8, r8)
 8009294:	20000820 	.word	0x20000820

08009298 <__malloc_lock>:
 8009298:	4770      	bx	lr

0800929a <__malloc_unlock>:
 800929a:	4770      	bx	lr

0800929c <_malloc_usable_size_r>:
 800929c:	1f0b      	subs	r3, r1, #4
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	1f18      	subs	r0, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	da01      	bge.n	80092aa <_malloc_usable_size_r+0xe>
 80092a6:	580b      	ldr	r3, [r1, r0]
 80092a8:	18c0      	adds	r0, r0, r3
 80092aa:	4770      	bx	lr

080092ac <_init>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr

080092b8 <_fini>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	46c0      	nop			; (mov r8, r8)
 80092bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092be:	bc08      	pop	{r3}
 80092c0:	469e      	mov	lr, r3
 80092c2:	4770      	bx	lr
